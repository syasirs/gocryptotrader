// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bybit

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1a082230DecodeGithubComThrasherCorpGocryptotraderExchangesBybit(in *jlexer.Lexer, out *WsParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		case "binary":
			out.IsBinary = bool(in.Bool())
		case "symbolName":
			out.SymbolName = string(in.String())
		case "klineType":
			out.KlineType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a082230EncodeGithubComThrasherCorpGocryptotraderExchangesBybit(out *jwriter.Writer, in WsParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"binary\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBinary))
	}
	if in.SymbolName != "" {
		const prefix string = ",\"symbolName\":"
		out.RawString(prefix)
		out.String(string(in.SymbolName))
	}
	if in.KlineType != "" {
		const prefix string = ",\"klineType\":"
		out.RawString(prefix)
		out.String(string(in.KlineType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a082230EncodeGithubComThrasherCorpGocryptotraderExchangesBybit(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a082230EncodeGithubComThrasherCorpGocryptotraderExchangesBybit(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a082230DecodeGithubComThrasherCorpGocryptotraderExchangesBybit(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a082230DecodeGithubComThrasherCorpGocryptotraderExchangesBybit(l, v)
}
func easyjson1a082230DecodeGithubComThrasherCorpGocryptotraderExchangesBybit1(in *jlexer.Lexer, out *WsOrderbookData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "t":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "v":
			out.Version = string(in.String())
		case "b":
			if in.IsNull() {
				in.Skip()
				out.Bids = nil
			} else {
				in.Delim('[')
				if out.Bids == nil {
					if !in.IsDelim(']') {
						out.Bids = make([][2]string, 0, 2)
					} else {
						out.Bids = [][2]string{}
					}
				} else {
					out.Bids = (out.Bids)[:0]
				}
				for !in.IsDelim(']') {
					var v1 [2]string
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v2 := 0
						for !in.IsDelim(']') {
							if v2 < 2 {
								(v1)[v2] = string(in.String())
								v2++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Bids = append(out.Bids, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "a":
			if in.IsNull() {
				in.Skip()
				out.Asks = nil
			} else {
				in.Delim('[')
				if out.Asks == nil {
					if !in.IsDelim(']') {
						out.Asks = make([][2]string, 0, 2)
					} else {
						out.Asks = [][2]string{}
					}
				} else {
					out.Asks = (out.Asks)[:0]
				}
				for !in.IsDelim(']') {
					var v3 [2]string
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('[')
						v4 := 0
						for !in.IsDelim(']') {
							if v4 < 2 {
								(v3)[v4] = string(in.String())
								v4++
							} else {
								in.SkipRecursive()
							}
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Asks = append(out.Asks, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a082230EncodeGithubComThrasherCorpGocryptotraderExchangesBybit1(out *jwriter.Writer, in WsOrderbookData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		easyjson1a082230EncodeGithubComThrasherCorpGocryptotraderExchangesBybit2(out, in.Time)
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		if in.Bids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Bids {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v7 := range v6 {
					if v7 > 0 {
						out.RawByte(',')
					}
					out.String(string((v6)[v7]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		if in.Asks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Asks {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.RawByte('[')
				for v10 := range v9 {
					if v10 > 0 {
						out.RawByte(',')
					}
					out.String(string((v9)[v10]))
				}
				out.RawByte(']')
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOrderbookData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a082230EncodeGithubComThrasherCorpGocryptotraderExchangesBybit1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderbookData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a082230EncodeGithubComThrasherCorpGocryptotraderExchangesBybit1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOrderbookData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a082230DecodeGithubComThrasherCorpGocryptotraderExchangesBybit1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderbookData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a082230DecodeGithubComThrasherCorpGocryptotraderExchangesBybit1(l, v)
}
func easyjson1a082230DecodeGithubComThrasherCorpGocryptotraderExchangesBybit2(in *jlexer.Lexer, out *bybitTimeMilliSec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a082230EncodeGithubComThrasherCorpGocryptotraderExchangesBybit2(out *jwriter.Writer, in bybitTimeMilliSec) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson1a082230DecodeGithubComThrasherCorpGocryptotraderExchangesBybit3(in *jlexer.Lexer, out *WsOrderbook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic":
			out.Topic = string(in.String())
		case "params":
			(out.Parameters).UnmarshalEasyJSON(in)
		case "data":
			(out.OBData).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a082230EncodeGithubComThrasherCorpGocryptotraderExchangesBybit3(out *jwriter.Writer, in WsOrderbook) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topic\":"
		out.RawString(prefix[1:])
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"params\":"
		out.RawString(prefix)
		(in.Parameters).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.OBData).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WsOrderbook) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a082230EncodeGithubComThrasherCorpGocryptotraderExchangesBybit3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WsOrderbook) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a082230EncodeGithubComThrasherCorpGocryptotraderExchangesBybit3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WsOrderbook) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a082230DecodeGithubComThrasherCorpGocryptotraderExchangesBybit3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WsOrderbook) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a082230DecodeGithubComThrasherCorpGocryptotraderExchangesBybit3(l, v)
}
