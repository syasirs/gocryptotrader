// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testGCTUsers(t *testing.T) {
	t.Parallel()

	query := GCTUsers(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testGCTUsersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = gctUser.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := GCTUsers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGCTUsersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = GCTUsers(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := GCTUsers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGCTUsersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := GCTUserSlice{gctUser}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := GCTUsers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testGCTUsersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := GCTUserExists(tx, gctUser.ID)
	if err != nil {
		t.Errorf("Unable to check if GCTUser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GCTUserExistsG to return true, but got false.")
	}
}
func testGCTUsersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx); err != nil {
		t.Error(err)
	}

	gctUserFound, err := FindGCTUser(tx, gctUser.ID)
	if err != nil {
		t.Error(err)
	}

	if gctUserFound == nil {
		t.Error("want a record, got nil")
	}
}
func testGCTUsersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = GCTUsers(tx).Bind(gctUser); err != nil {
		t.Error(err)
	}
}

func testGCTUsersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := GCTUsers(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGCTUsersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctUserOne := &GCTUser{}
	gctUserTwo := &GCTUser{}
	if err = randomize.Struct(seed, gctUserOne, gctUserDBTypes, false, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}
	if err = randomize.Struct(seed, gctUserTwo, gctUserDBTypes, false, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUserOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = gctUserTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := GCTUsers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGCTUsersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gctUserOne := &GCTUser{}
	gctUserTwo := &GCTUser{}
	if err = randomize.Struct(seed, gctUserOne, gctUserDBTypes, false, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}
	if err = randomize.Struct(seed, gctUserTwo, gctUserDBTypes, false, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUserOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = gctUserTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GCTUsers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func gctUserBeforeInsertHook(e boil.Executor, o *GCTUser) error {
	*o = GCTUser{}
	return nil
}

func gctUserAfterInsertHook(e boil.Executor, o *GCTUser) error {
	*o = GCTUser{}
	return nil
}

func gctUserAfterSelectHook(e boil.Executor, o *GCTUser) error {
	*o = GCTUser{}
	return nil
}

func gctUserBeforeUpdateHook(e boil.Executor, o *GCTUser) error {
	*o = GCTUser{}
	return nil
}

func gctUserAfterUpdateHook(e boil.Executor, o *GCTUser) error {
	*o = GCTUser{}
	return nil
}

func gctUserBeforeDeleteHook(e boil.Executor, o *GCTUser) error {
	*o = GCTUser{}
	return nil
}

func gctUserAfterDeleteHook(e boil.Executor, o *GCTUser) error {
	*o = GCTUser{}
	return nil
}

func gctUserBeforeUpsertHook(e boil.Executor, o *GCTUser) error {
	*o = GCTUser{}
	return nil
}

func gctUserAfterUpsertHook(e boil.Executor, o *GCTUser) error {
	*o = GCTUser{}
	return nil
}

func testGCTUsersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &GCTUser{}
	o := &GCTUser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, gctUserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GCTUser object: %s", err)
	}

	AddGCTUserHook(boil.BeforeInsertHook, gctUserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	gctUserBeforeInsertHooks = []GCTUserHook{}

	AddGCTUserHook(boil.AfterInsertHook, gctUserAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	gctUserAfterInsertHooks = []GCTUserHook{}

	AddGCTUserHook(boil.AfterSelectHook, gctUserAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	gctUserAfterSelectHooks = []GCTUserHook{}

	AddGCTUserHook(boil.BeforeUpdateHook, gctUserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	gctUserBeforeUpdateHooks = []GCTUserHook{}

	AddGCTUserHook(boil.AfterUpdateHook, gctUserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	gctUserAfterUpdateHooks = []GCTUserHook{}

	AddGCTUserHook(boil.BeforeDeleteHook, gctUserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	gctUserBeforeDeleteHooks = []GCTUserHook{}

	AddGCTUserHook(boil.AfterDeleteHook, gctUserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	gctUserAfterDeleteHooks = []GCTUserHook{}

	AddGCTUserHook(boil.BeforeUpsertHook, gctUserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	gctUserBeforeUpsertHooks = []GCTUserHook{}

	AddGCTUserHook(boil.AfterUpsertHook, gctUserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	gctUserAfterUpsertHooks = []GCTUserHook{}
}
func testGCTUsersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GCTUsers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGCTUsersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx, gctUserColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := GCTUsers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGCTUserToManyExchanges(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GCTUser
	var b, c Exchange

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, exchangeDBTypes, false, exchangeColumnsWithDefault...)
	randomize.Struct(seed, &c, exchangeDBTypes, false, exchangeColumnsWithDefault...)

	b.GCTUserID = a.ID
	c.GCTUserID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	exchange, err := a.Exchanges(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range exchange {
		if v.GCTUserID == b.GCTUserID {
			bFound = true
		}
		if v.GCTUserID == c.GCTUserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GCTUserSlice{&a}
	if err = a.L.LoadExchanges(tx, false, (*[]*GCTUser)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Exchanges); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Exchanges = nil
	if err = a.L.LoadExchanges(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Exchanges); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", exchange)
	}
}

func testGCTUserToManyAddressAddressInformations(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GCTUser
	var b, c AddressInformation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, addressInformationDBTypes, false, addressInformationColumnsWithDefault...)
	randomize.Struct(seed, &c, addressInformationDBTypes, false, addressInformationColumnsWithDefault...)

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"portfolio\" (\"gct_user_id\", \"address_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"portfolio\" (\"gct_user_id\", \"address_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	addressInformation, err := a.AddressAddressInformations(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range addressInformation {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GCTUserSlice{&a}
	if err = a.L.LoadAddressAddressInformations(tx, false, (*[]*GCTUser)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AddressAddressInformations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AddressAddressInformations = nil
	if err = a.L.LoadAddressAddressInformations(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AddressAddressInformations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", addressInformation)
	}
}

func testGCTUserToManyTradeHistories(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GCTUser
	var b, c TradeHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, tradeHistoryDBTypes, false, tradeHistoryColumnsWithDefault...)
	randomize.Struct(seed, &c, tradeHistoryDBTypes, false, tradeHistoryColumnsWithDefault...)

	b.GCTUserID = a.ID
	c.GCTUserID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	tradeHistory, err := a.TradeHistories(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range tradeHistory {
		if v.GCTUserID == b.GCTUserID {
			bFound = true
		}
		if v.GCTUserID == c.GCTUserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GCTUserSlice{&a}
	if err = a.L.LoadTradeHistories(tx, false, (*[]*GCTUser)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TradeHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TradeHistories = nil
	if err = a.L.LoadTradeHistories(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TradeHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", tradeHistory)
	}
}

func testGCTUserToManyAddOpExchanges(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GCTUser
	var b, c, d, e Exchange

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gctUserDBTypes, false, strmangle.SetComplement(gctUserPrimaryKeyColumns, gctUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Exchange{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, exchangeDBTypes, false, strmangle.SetComplement(exchangePrimaryKeyColumns, exchangeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Exchange{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddExchanges(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GCTUserID {
			t.Error("foreign key was wrong value", a.ID, first.GCTUserID)
		}
		if a.ID != second.GCTUserID {
			t.Error("foreign key was wrong value", a.ID, second.GCTUserID)
		}

		if first.R.GCTUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GCTUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Exchanges[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Exchanges[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Exchanges(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGCTUserToManyAddOpAddressAddressInformations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GCTUser
	var b, c, d, e AddressInformation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gctUserDBTypes, false, strmangle.SetComplement(gctUserPrimaryKeyColumns, gctUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AddressInformation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, addressInformationDBTypes, false, strmangle.SetComplement(addressInformationPrimaryKeyColumns, addressInformationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AddressInformation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAddressAddressInformations(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.GCTUsers[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.GCTUsers[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.AddressAddressInformations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AddressAddressInformations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AddressAddressInformations(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGCTUserToManySetOpAddressAddressInformations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GCTUser
	var b, c, d, e AddressInformation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gctUserDBTypes, false, strmangle.SetComplement(gctUserPrimaryKeyColumns, gctUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AddressInformation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, addressInformationDBTypes, false, strmangle.SetComplement(addressInformationPrimaryKeyColumns, addressInformationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetAddressAddressInformations(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AddressAddressInformations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAddressAddressInformations(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AddressAddressInformations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.GCTUsers) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.GCTUsers) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.GCTUsers[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.GCTUsers[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.AddressAddressInformations[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AddressAddressInformations[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testGCTUserToManyRemoveOpAddressAddressInformations(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GCTUser
	var b, c, d, e AddressInformation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gctUserDBTypes, false, strmangle.SetComplement(gctUserPrimaryKeyColumns, gctUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*AddressInformation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, addressInformationDBTypes, false, strmangle.SetComplement(addressInformationPrimaryKeyColumns, addressInformationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddAddressAddressInformations(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AddressAddressInformations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAddressAddressInformations(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AddressAddressInformations(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.GCTUsers) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.GCTUsers) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.GCTUsers[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.GCTUsers[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.AddressAddressInformations) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AddressAddressInformations[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AddressAddressInformations[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testGCTUserToManyAddOpTradeHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GCTUser
	var b, c, d, e TradeHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, gctUserDBTypes, false, strmangle.SetComplement(gctUserPrimaryKeyColumns, gctUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TradeHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradeHistoryDBTypes, false, strmangle.SetComplement(tradeHistoryPrimaryKeyColumns, tradeHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TradeHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTradeHistories(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GCTUserID {
			t.Error("foreign key was wrong value", a.ID, first.GCTUserID)
		}
		if a.ID != second.GCTUserID {
			t.Error("foreign key was wrong value", a.ID, second.GCTUserID)
		}

		if first.R.GCTUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GCTUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TradeHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TradeHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TradeHistories(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGCTUsersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = gctUser.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testGCTUsersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := GCTUserSlice{gctUser}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testGCTUsersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := GCTUsers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gctUserDBTypes = map[string]string{`ID`: `integer`, `Name`: `text`, `Password`: `text`}
	_              = bytes.MinRead
)

func testGCTUsersUpdate(t *testing.T) {
	t.Parallel()

	if len(gctUserColumns) == len(gctUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GCTUsers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	if err = gctUser.Update(tx); err != nil {
		t.Error(err)
	}
}

func testGCTUsersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gctUserColumns) == len(gctUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	gctUser := &GCTUser{}
	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GCTUsers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, gctUser, gctUserDBTypes, true, gctUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gctUserColumns, gctUserPrimaryKeyColumns) {
		fields = gctUserColumns
	} else {
		fields = strmangle.SetComplement(
			gctUserColumns,
			gctUserPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(gctUser))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := GCTUserSlice{gctUser}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testGCTUsersUpsert(t *testing.T) {
	t.Parallel()

	if len(gctUserColumns) == len(gctUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	gctUser := GCTUser{}
	if err = randomize.Struct(seed, &gctUser, gctUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = gctUser.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert GCTUser: %s", err)
	}

	count, err := GCTUsers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &gctUser, gctUserDBTypes, false, gctUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	if err = gctUser.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert GCTUser: %s", err)
	}

	count, err = GCTUsers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
