// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Config is an object representing the database table.
type Config struct {
	ConfigID            int64  `boil:"config_id" json:"config_id" toml:"config_id" yaml:"config_id"`
	Name                string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Password            string `boil:"password" json:"password" toml:"password" yaml:"password"`
	EncryptConfig       int    `boil:"encrypt_config" json:"encrypt_config" toml:"encrypt_config" yaml:"encrypt_config"`
	Cryptocurrencies    string `boil:"cryptocurrencies" json:"cryptocurrencies" toml:"cryptocurrencies" yaml:"cryptocurrencies"`
	CurrencyFXProvider  string `boil:"currency_fx_provider" json:"currency_fx_provider" toml:"currency_fx_provider" yaml:"currency_fx_provider"`
	FiatDisplayCurrency string `boil:"fiat_display_currency" json:"fiat_display_currency" toml:"fiat_display_currency" yaml:"fiat_display_currency"`
	GlobalHTTPTimeout   int64  `boil:"global_http_timeout" json:"global_http_timeout" toml:"global_http_timeout" yaml:"global_http_timeout"`

	R *configR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L configL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConfigColumns = struct {
	ConfigID            string
	Name                string
	Password            string
	EncryptConfig       string
	Cryptocurrencies    string
	CurrencyFXProvider  string
	FiatDisplayCurrency string
	GlobalHTTPTimeout   string
}{
	ConfigID:            "config_id",
	Name:                "name",
	Password:            "password",
	EncryptConfig:       "encrypt_config",
	Cryptocurrencies:    "cryptocurrencies",
	CurrencyFXProvider:  "currency_fx_provider",
	FiatDisplayCurrency: "fiat_display_currency",
	GlobalHTTPTimeout:   "global_http_timeout",
}

// configR is where relationships are stored.
type configR struct {
	OrderHistories OrderHistorySlice
}

// configL is where Load methods for each relationship are stored.
type configL struct{}

var (
	configColumns               = []string{"config_id", "name", "password", "encrypt_config", "cryptocurrencies", "currency_fx_provider", "fiat_display_currency", "global_http_timeout"}
	configColumnsWithoutDefault = []string{"config_id", "name", "password", "encrypt_config", "cryptocurrencies", "currency_fx_provider", "fiat_display_currency", "global_http_timeout"}
	configColumnsWithDefault    = []string{}
	configPrimaryKeyColumns     = []string{"config_id"}
)

type (
	// ConfigSlice is an alias for a slice of pointers to Config.
	// This should generally be used opposed to []Config.
	ConfigSlice []*Config

	configQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	configType                 = reflect.TypeOf(&Config{})
	configMapping              = queries.MakeStructMapping(configType)
	configPrimaryKeyMapping, _ = queries.BindMapping(configType, configMapping, configPrimaryKeyColumns)
	configInsertCacheMut       sync.RWMutex
	configInsertCache          = make(map[string]insertCache)
	configUpdateCacheMut       sync.RWMutex
	configUpdateCache          = make(map[string]updateCache)
	configUpsertCacheMut       sync.RWMutex
	configUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single config record from the query, and panics on error.
func (q configQuery) OneP() *Config {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single config record from the query.
func (q configQuery) One() (*Config, error) {
	o := &Config{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for config")
	}

	return o, nil
}

// AllP returns all Config records from the query, and panics on error.
func (q configQuery) AllP() ConfigSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Config records from the query.
func (q configQuery) All() (ConfigSlice, error) {
	var o []*Config

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Config slice")
	}

	return o, nil
}

// CountP returns the count of all Config records in the query, and panics on error.
func (q configQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Config records in the query.
func (q configQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count config rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q configQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q configQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if config exists")
	}

	return count > 0, nil
}

// OrderHistoriesG retrieves all the order_history's order history.
func (o *Config) OrderHistoriesG(mods ...qm.QueryMod) orderHistoryQuery {
	return o.OrderHistories(boil.GetDB(), mods...)
}

// OrderHistories retrieves all the order_history's order history with an executor.
func (o *Config) OrderHistories(exec boil.Executor, mods ...qm.QueryMod) orderHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"order_history\".\"config_id\"=?", o.ConfigID),
	)

	query := OrderHistories(exec, queryMods...)
	queries.SetFrom(query.Query, "\"order_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"order_history\".*"})
	}

	return query
}

// LoadOrderHistories allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (configL) LoadOrderHistories(e boil.Executor, singular bool, maybeConfig interface{}) error {
	var slice []*Config
	var object *Config

	count := 1
	if singular {
		object = maybeConfig.(*Config)
	} else {
		slice = *maybeConfig.(*[]*Config)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &configR{}
		}
		args[0] = object.ConfigID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &configR{}
			}
			args[i] = obj.ConfigID
		}
	}

	query := fmt.Sprintf(
		"select * from \"order_history\" where \"config_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load order_history")
	}
	defer results.Close()

	var resultSlice []*OrderHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice order_history")
	}

	if singular {
		object.R.OrderHistories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ConfigID == foreign.ConfigID {
				local.R.OrderHistories = append(local.R.OrderHistories, foreign)
				break
			}
		}
	}

	return nil
}

// AddOrderHistoriesG adds the given related objects to the existing relationships
// of the config, optionally inserting them as new records.
// Appends related to o.R.OrderHistories.
// Sets related.R.Config appropriately.
// Uses the global database handle.
func (o *Config) AddOrderHistoriesG(insert bool, related ...*OrderHistory) error {
	return o.AddOrderHistories(boil.GetDB(), insert, related...)
}

// AddOrderHistoriesP adds the given related objects to the existing relationships
// of the config, optionally inserting them as new records.
// Appends related to o.R.OrderHistories.
// Sets related.R.Config appropriately.
// Panics on error.
func (o *Config) AddOrderHistoriesP(exec boil.Executor, insert bool, related ...*OrderHistory) {
	if err := o.AddOrderHistories(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOrderHistoriesGP adds the given related objects to the existing relationships
// of the config, optionally inserting them as new records.
// Appends related to o.R.OrderHistories.
// Sets related.R.Config appropriately.
// Uses the global database handle and panics on error.
func (o *Config) AddOrderHistoriesGP(insert bool, related ...*OrderHistory) {
	if err := o.AddOrderHistories(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOrderHistories adds the given related objects to the existing relationships
// of the config, optionally inserting them as new records.
// Appends related to o.R.OrderHistories.
// Sets related.R.Config appropriately.
func (o *Config) AddOrderHistories(exec boil.Executor, insert bool, related ...*OrderHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConfigID = o.ConfigID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"order_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"config_id"}),
				strmangle.WhereClause("\"", "\"", 2, orderHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ConfigID, rel.OrderHistoryID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConfigID = o.ConfigID
		}
	}

	if o.R == nil {
		o.R = &configR{
			OrderHistories: related,
		}
	} else {
		o.R.OrderHistories = append(o.R.OrderHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &orderHistoryR{
				Config: o,
			}
		} else {
			rel.R.Config = o
		}
	}
	return nil
}

// ConfigsG retrieves all records.
func ConfigsG(mods ...qm.QueryMod) configQuery {
	return Configs(boil.GetDB(), mods...)
}

// Configs retrieves all the records using an executor.
func Configs(exec boil.Executor, mods ...qm.QueryMod) configQuery {
	mods = append(mods, qm.From("\"config\""))
	return configQuery{NewQuery(exec, mods...)}
}

// FindConfigG retrieves a single record by ID.
func FindConfigG(configID int64, selectCols ...string) (*Config, error) {
	return FindConfig(boil.GetDB(), configID, selectCols...)
}

// FindConfigGP retrieves a single record by ID, and panics on error.
func FindConfigGP(configID int64, selectCols ...string) *Config {
	retobj, err := FindConfig(boil.GetDB(), configID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConfig(exec boil.Executor, configID int64, selectCols ...string) (*Config, error) {
	configObj := &Config{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"config\" where \"config_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, configID)

	err := q.Bind(configObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from config")
	}

	return configObj, nil
}

// FindConfigP retrieves a single record by ID with an executor, and panics on error.
func FindConfigP(exec boil.Executor, configID int64, selectCols ...string) *Config {
	retobj, err := FindConfig(exec, configID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Config) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Config) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Config) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Config) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no config provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(configColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	configInsertCacheMut.RLock()
	cache, cached := configInsertCache[key]
	configInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			configColumns,
			configColumnsWithDefault,
			configColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(configType, configMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(configType, configMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"config\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into config")
	}

	if !cached {
		configInsertCacheMut.Lock()
		configInsertCache[key] = cache
		configInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Config record. See Update for
// whitelist behavior description.
func (o *Config) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Config record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Config) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Config, and panics on error.
// See Update for whitelist behavior description.
func (o *Config) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Config.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Config) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	configUpdateCacheMut.RLock()
	cache, cached := configUpdateCache[key]
	configUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			configColumns,
			configPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, configPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(configType, configMapping, append(wl, configPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update config row")
	}

	if !cached {
		configUpdateCacheMut.Lock()
		configUpdateCache[key] = cache
		configUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q configQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q configQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for config")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ConfigSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ConfigSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ConfigSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConfigSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, configPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in config slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Config) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Config) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Config) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Config) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no config provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(configColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	configUpsertCacheMut.RLock()
	cache, cached := configUpsertCache[key]
	configUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			configColumns,
			configColumnsWithDefault,
			configColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			configColumns,
			configPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert config, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(configPrimaryKeyColumns))
			copy(conflict, configPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"config\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(configType, configMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(configType, configMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert config")
	}

	if !cached {
		configUpsertCacheMut.Lock()
		configUpsertCache[key] = cache
		configUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single Config record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Config) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Config record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Config) DeleteG() error {
	if o == nil {
		return errors.New("models: no Config provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Config record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Config) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Config record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Config) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Config provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), configPrimaryKeyMapping)
	sql := "DELETE FROM \"config\" WHERE \"config_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from config")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q configQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q configQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no configQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from config")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ConfigSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ConfigSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Config slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ConfigSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConfigSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Config slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from config slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Config) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Config) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Config) ReloadG() error {
	if o == nil {
		return errors.New("models: no Config provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Config) Reload(exec boil.Executor) error {
	ret, err := FindConfig(exec, o.ConfigID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ConfigSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ConfigSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ConfigSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	configs := ConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"config\".* FROM \"config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, configPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&configs)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConfigSlice")
	}

	*o = configs

	return nil
}

// ConfigExists checks if the Config row exists.
func ConfigExists(exec boil.Executor, configID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"config\" where \"config_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, configID)
	}

	row := exec.QueryRow(sql, configID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if config exists")
	}

	return exists, nil
}

// ConfigExistsG checks if the Config row exists.
func ConfigExistsG(configID int64) (bool, error) {
	return ConfigExists(boil.GetDB(), configID)
}

// ConfigExistsGP checks if the Config row exists. Panics on error.
func ConfigExistsGP(configID int64) bool {
	e, err := ConfigExists(boil.GetDB(), configID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ConfigExistsP checks if the Config row exists. Panics on error.
func ConfigExistsP(exec boil.Executor, configID int64) bool {
	e, err := ConfigExists(exec, configID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
