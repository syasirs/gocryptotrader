// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Config is an object representing the database table.
type Config struct {
	ID                                int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ConfigName                        string      `boil:"config_name" json:"config_name" toml:"config_name" yaml:"config_name"`
	GlobalHTTPTimeout                 int64       `boil:"global_http_timeout" json:"global_http_timeout" toml:"global_http_timeout" yaml:"global_http_timeout"`
	WebserverEnabled                  bool        `boil:"webserver_enabled" json:"webserver_enabled" toml:"webserver_enabled" yaml:"webserver_enabled"`
	WebserverAdminUsername            null.String `boil:"webserver_admin_username" json:"webserver_admin_username,omitempty" toml:"webserver_admin_username" yaml:"webserver_admin_username,omitempty"`
	WebserverAdminPassword            null.String `boil:"webserver_admin_password" json:"webserver_admin_password,omitempty" toml:"webserver_admin_password" yaml:"webserver_admin_password,omitempty"`
	WebserverListenAddress            null.String `boil:"webserver_listen_address" json:"webserver_listen_address,omitempty" toml:"webserver_listen_address" yaml:"webserver_listen_address,omitempty"`
	WebserverWebsocketConnectionLimit null.Int64  `boil:"webserver_websocket_connection_limit" json:"webserver_websocket_connection_limit,omitempty" toml:"webserver_websocket_connection_limit" yaml:"webserver_websocket_connection_limit,omitempty"`
	WebserverAllowInsecureOrigin      bool        `boil:"webserver_allow_insecure_origin" json:"webserver_allow_insecure_origin" toml:"webserver_allow_insecure_origin" yaml:"webserver_allow_insecure_origin"`

	R *configR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L configL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConfigColumns = struct {
	ID                                string
	ConfigName                        string
	GlobalHTTPTimeout                 string
	WebserverEnabled                  string
	WebserverAdminUsername            string
	WebserverAdminPassword            string
	WebserverListenAddress            string
	WebserverWebsocketConnectionLimit string
	WebserverAllowInsecureOrigin      string
}{
	ID:                                "id",
	ConfigName:                        "config_name",
	GlobalHTTPTimeout:                 "global_http_timeout",
	WebserverEnabled:                  "webserver_enabled",
	WebserverAdminUsername:            "webserver_admin_username",
	WebserverAdminPassword:            "webserver_admin_password",
	WebserverListenAddress:            "webserver_listen_address",
	WebserverWebsocketConnectionLimit: "webserver_websocket_connection_limit",
	WebserverAllowInsecureOrigin:      "webserver_allow_insecure_origin",
}

// ConfigRels is where relationship names are stored.
var ConfigRels = struct {
	BankAccountConfigs             string
	CommunicationConfigs           string
	CommunicationConfigContacts    string
	ExchangeConfigs                string
	ForeignExchangeProviderConfigs string
	Portfolios                     string
}{
	BankAccountConfigs:             "BankAccountConfigs",
	CommunicationConfigs:           "CommunicationConfigs",
	CommunicationConfigContacts:    "CommunicationConfigContacts",
	ExchangeConfigs:                "ExchangeConfigs",
	ForeignExchangeProviderConfigs: "ForeignExchangeProviderConfigs",
	Portfolios:                     "Portfolios",
}

// configR is where relationships are stored.
type configR struct {
	BankAccountConfigs             BankAccountConfigSlice
	CommunicationConfigs           CommunicationConfigSlice
	CommunicationConfigContacts    CommunicationConfigContactSlice
	ExchangeConfigs                ExchangeConfigSlice
	ForeignExchangeProviderConfigs ForeignExchangeProviderConfigSlice
	Portfolios                     PortfolioSlice
}

// NewStruct creates a new relationship struct
func (*configR) NewStruct() *configR {
	return &configR{}
}

// configL is where Load methods for each relationship are stored.
type configL struct{}

var (
	configColumns               = []string{"id", "config_name", "global_http_timeout", "webserver_enabled", "webserver_admin_username", "webserver_admin_password", "webserver_listen_address", "webserver_websocket_connection_limit", "webserver_allow_insecure_origin"}
	configColumnsWithoutDefault = []string{}
	configColumnsWithDefault    = []string{"id", "config_name", "global_http_timeout", "webserver_enabled", "webserver_admin_username", "webserver_admin_password", "webserver_listen_address", "webserver_websocket_connection_limit", "webserver_allow_insecure_origin"}
	configPrimaryKeyColumns     = []string{"id"}
)

type (
	// ConfigSlice is an alias for a slice of pointers to Config.
	// This should generally be used opposed to []Config.
	ConfigSlice []*Config
	// ConfigHook is the signature for custom Config hook methods
	ConfigHook func(context.Context, boil.ContextExecutor, *Config) error

	configQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	configType                 = reflect.TypeOf(&Config{})
	configMapping              = queries.MakeStructMapping(configType)
	configPrimaryKeyMapping, _ = queries.BindMapping(configType, configMapping, configPrimaryKeyColumns)
	configInsertCacheMut       sync.RWMutex
	configInsertCache          = make(map[string]insertCache)
	configUpdateCacheMut       sync.RWMutex
	configUpdateCache          = make(map[string]updateCache)
	configUpsertCacheMut       sync.RWMutex
	configUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var configBeforeInsertHooks []ConfigHook
var configBeforeUpdateHooks []ConfigHook
var configBeforeDeleteHooks []ConfigHook
var configBeforeUpsertHooks []ConfigHook

var configAfterInsertHooks []ConfigHook
var configAfterSelectHooks []ConfigHook
var configAfterUpdateHooks []ConfigHook
var configAfterDeleteHooks []ConfigHook
var configAfterUpsertHooks []ConfigHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Config) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range configBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Config) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range configBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Config) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range configBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Config) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range configBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Config) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range configAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Config) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range configAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Config) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range configAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Config) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range configAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Config) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range configAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConfigHook registers your hook function for all future operations.
func AddConfigHook(hookPoint boil.HookPoint, configHook ConfigHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		configBeforeInsertHooks = append(configBeforeInsertHooks, configHook)
	case boil.BeforeUpdateHook:
		configBeforeUpdateHooks = append(configBeforeUpdateHooks, configHook)
	case boil.BeforeDeleteHook:
		configBeforeDeleteHooks = append(configBeforeDeleteHooks, configHook)
	case boil.BeforeUpsertHook:
		configBeforeUpsertHooks = append(configBeforeUpsertHooks, configHook)
	case boil.AfterInsertHook:
		configAfterInsertHooks = append(configAfterInsertHooks, configHook)
	case boil.AfterSelectHook:
		configAfterSelectHooks = append(configAfterSelectHooks, configHook)
	case boil.AfterUpdateHook:
		configAfterUpdateHooks = append(configAfterUpdateHooks, configHook)
	case boil.AfterDeleteHook:
		configAfterDeleteHooks = append(configAfterDeleteHooks, configHook)
	case boil.AfterUpsertHook:
		configAfterUpsertHooks = append(configAfterUpsertHooks, configHook)
	}
}

// One returns a single config record from the query.
func (q configQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Config, error) {
	o := &Config{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for config")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Config records from the query.
func (q configQuery) All(ctx context.Context, exec boil.ContextExecutor) (ConfigSlice, error) {
	var o []*Config

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Config slice")
	}

	if len(configAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Config records in the query.
func (q configQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count config rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q configQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if config exists")
	}

	return count > 0, nil
}

// BankAccountConfigs retrieves all the bank_account_config's BankAccountConfigs with an executor.
func (o *Config) BankAccountConfigs(mods ...qm.QueryMod) bankAccountConfigQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bank_account_config\".\"config_id\"=?", o.ID),
	)

	query := BankAccountConfigs(queryMods...)
	queries.SetFrom(query.Query, "\"bank_account_config\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"bank_account_config\".*"})
	}

	return query
}

// CommunicationConfigs retrieves all the communication_config's CommunicationConfigs with an executor.
func (o *Config) CommunicationConfigs(mods ...qm.QueryMod) communicationConfigQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"communication_config\".\"config_id\"=?", o.ID),
	)

	query := CommunicationConfigs(queryMods...)
	queries.SetFrom(query.Query, "\"communication_config\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"communication_config\".*"})
	}

	return query
}

// CommunicationConfigContacts retrieves all the communication_config_contact's CommunicationConfigContacts with an executor.
func (o *Config) CommunicationConfigContacts(mods ...qm.QueryMod) communicationConfigContactQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"communication_config_contact\".\"config_id\"=?", o.ID),
	)

	query := CommunicationConfigContacts(queryMods...)
	queries.SetFrom(query.Query, "\"communication_config_contact\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"communication_config_contact\".*"})
	}

	return query
}

// ExchangeConfigs retrieves all the exchange_config's ExchangeConfigs with an executor.
func (o *Config) ExchangeConfigs(mods ...qm.QueryMod) exchangeConfigQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"exchange_config\".\"config_id\"=?", o.ID),
	)

	query := ExchangeConfigs(queryMods...)
	queries.SetFrom(query.Query, "\"exchange_config\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"exchange_config\".*"})
	}

	return query
}

// ForeignExchangeProviderConfigs retrieves all the foreign_exchange_provider_config's ForeignExchangeProviderConfigs with an executor.
func (o *Config) ForeignExchangeProviderConfigs(mods ...qm.QueryMod) foreignExchangeProviderConfigQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"foreign_exchange_provider_config\".\"config_id\"=?", o.ID),
	)

	query := ForeignExchangeProviderConfigs(queryMods...)
	queries.SetFrom(query.Query, "\"foreign_exchange_provider_config\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"foreign_exchange_provider_config\".*"})
	}

	return query
}

// Portfolios retrieves all the portfolio's Portfolios with an executor.
func (o *Config) Portfolios(mods ...qm.QueryMod) portfolioQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"portfolio\".\"config_id\"=?", o.ID),
	)

	query := Portfolios(queryMods...)
	queries.SetFrom(query.Query, "\"portfolio\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"portfolio\".*"})
	}

	return query
}

// LoadBankAccountConfigs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (configL) LoadBankAccountConfigs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfig interface{}, mods queries.Applicator) error {
	var slice []*Config
	var object *Config

	if singular {
		object = maybeConfig.(*Config)
	} else {
		slice = *maybeConfig.(*[]*Config)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`bank_account_config`), qm.WhereIn(`config_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bank_account_config")
	}

	var resultSlice []*BankAccountConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bank_account_config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bank_account_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bank_account_config")
	}

	if len(bankAccountConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BankAccountConfigs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bankAccountConfigR{}
			}
			foreign.R.Config = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ConfigID {
				local.R.BankAccountConfigs = append(local.R.BankAccountConfigs, foreign)
				if foreign.R == nil {
					foreign.R = &bankAccountConfigR{}
				}
				foreign.R.Config = local
				break
			}
		}
	}

	return nil
}

// LoadCommunicationConfigs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (configL) LoadCommunicationConfigs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfig interface{}, mods queries.Applicator) error {
	var slice []*Config
	var object *Config

	if singular {
		object = maybeConfig.(*Config)
	} else {
		slice = *maybeConfig.(*[]*Config)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`communication_config`), qm.WhereIn(`config_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load communication_config")
	}

	var resultSlice []*CommunicationConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice communication_config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on communication_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for communication_config")
	}

	if len(communicationConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CommunicationConfigs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &communicationConfigR{}
			}
			foreign.R.Config = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ConfigID {
				local.R.CommunicationConfigs = append(local.R.CommunicationConfigs, foreign)
				if foreign.R == nil {
					foreign.R = &communicationConfigR{}
				}
				foreign.R.Config = local
				break
			}
		}
	}

	return nil
}

// LoadCommunicationConfigContacts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (configL) LoadCommunicationConfigContacts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfig interface{}, mods queries.Applicator) error {
	var slice []*Config
	var object *Config

	if singular {
		object = maybeConfig.(*Config)
	} else {
		slice = *maybeConfig.(*[]*Config)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`communication_config_contact`), qm.WhereIn(`config_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load communication_config_contact")
	}

	var resultSlice []*CommunicationConfigContact
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice communication_config_contact")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on communication_config_contact")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for communication_config_contact")
	}

	if len(communicationConfigContactAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CommunicationConfigContacts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &communicationConfigContactR{}
			}
			foreign.R.Config = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ConfigID {
				local.R.CommunicationConfigContacts = append(local.R.CommunicationConfigContacts, foreign)
				if foreign.R == nil {
					foreign.R = &communicationConfigContactR{}
				}
				foreign.R.Config = local
				break
			}
		}
	}

	return nil
}

// LoadExchangeConfigs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (configL) LoadExchangeConfigs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfig interface{}, mods queries.Applicator) error {
	var slice []*Config
	var object *Config

	if singular {
		object = maybeConfig.(*Config)
	} else {
		slice = *maybeConfig.(*[]*Config)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`exchange_config`), qm.WhereIn(`config_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load exchange_config")
	}

	var resultSlice []*ExchangeConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice exchange_config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on exchange_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exchange_config")
	}

	if len(exchangeConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ExchangeConfigs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &exchangeConfigR{}
			}
			foreign.R.Config = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ConfigID {
				local.R.ExchangeConfigs = append(local.R.ExchangeConfigs, foreign)
				if foreign.R == nil {
					foreign.R = &exchangeConfigR{}
				}
				foreign.R.Config = local
				break
			}
		}
	}

	return nil
}

// LoadForeignExchangeProviderConfigs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (configL) LoadForeignExchangeProviderConfigs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfig interface{}, mods queries.Applicator) error {
	var slice []*Config
	var object *Config

	if singular {
		object = maybeConfig.(*Config)
	} else {
		slice = *maybeConfig.(*[]*Config)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`foreign_exchange_provider_config`), qm.WhereIn(`config_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load foreign_exchange_provider_config")
	}

	var resultSlice []*ForeignExchangeProviderConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice foreign_exchange_provider_config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on foreign_exchange_provider_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for foreign_exchange_provider_config")
	}

	if len(foreignExchangeProviderConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ForeignExchangeProviderConfigs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &foreignExchangeProviderConfigR{}
			}
			foreign.R.Config = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ConfigID {
				local.R.ForeignExchangeProviderConfigs = append(local.R.ForeignExchangeProviderConfigs, foreign)
				if foreign.R == nil {
					foreign.R = &foreignExchangeProviderConfigR{}
				}
				foreign.R.Config = local
				break
			}
		}
	}

	return nil
}

// LoadPortfolios allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (configL) LoadPortfolios(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConfig interface{}, mods queries.Applicator) error {
	var slice []*Config
	var object *Config

	if singular {
		object = maybeConfig.(*Config)
	} else {
		slice = *maybeConfig.(*[]*Config)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &configR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &configR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`portfolio`), qm.WhereIn(`config_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load portfolio")
	}

	var resultSlice []*Portfolio
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice portfolio")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on portfolio")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for portfolio")
	}

	if len(portfolioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Portfolios = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &portfolioR{}
			}
			foreign.R.Config = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ConfigID {
				local.R.Portfolios = append(local.R.Portfolios, foreign)
				if foreign.R == nil {
					foreign.R = &portfolioR{}
				}
				foreign.R.Config = local
				break
			}
		}
	}

	return nil
}

// AddBankAccountConfigs adds the given related objects to the existing relationships
// of the config, optionally inserting them as new records.
// Appends related to o.R.BankAccountConfigs.
// Sets related.R.Config appropriately.
func (o *Config) AddBankAccountConfigs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BankAccountConfig) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConfigID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bank_account_config\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"config_id"}),
				strmangle.WhereClause("\"", "\"", 0, bankAccountConfigPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConfigID = o.ID
		}
	}

	if o.R == nil {
		o.R = &configR{
			BankAccountConfigs: related,
		}
	} else {
		o.R.BankAccountConfigs = append(o.R.BankAccountConfigs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bankAccountConfigR{
				Config: o,
			}
		} else {
			rel.R.Config = o
		}
	}
	return nil
}

// AddCommunicationConfigs adds the given related objects to the existing relationships
// of the config, optionally inserting them as new records.
// Appends related to o.R.CommunicationConfigs.
// Sets related.R.Config appropriately.
func (o *Config) AddCommunicationConfigs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CommunicationConfig) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConfigID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"communication_config\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"config_id"}),
				strmangle.WhereClause("\"", "\"", 0, communicationConfigPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConfigID = o.ID
		}
	}

	if o.R == nil {
		o.R = &configR{
			CommunicationConfigs: related,
		}
	} else {
		o.R.CommunicationConfigs = append(o.R.CommunicationConfigs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &communicationConfigR{
				Config: o,
			}
		} else {
			rel.R.Config = o
		}
	}
	return nil
}

// AddCommunicationConfigContacts adds the given related objects to the existing relationships
// of the config, optionally inserting them as new records.
// Appends related to o.R.CommunicationConfigContacts.
// Sets related.R.Config appropriately.
func (o *Config) AddCommunicationConfigContacts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CommunicationConfigContact) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConfigID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"communication_config_contact\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"config_id"}),
				strmangle.WhereClause("\"", "\"", 0, communicationConfigContactPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConfigID = o.ID
		}
	}

	if o.R == nil {
		o.R = &configR{
			CommunicationConfigContacts: related,
		}
	} else {
		o.R.CommunicationConfigContacts = append(o.R.CommunicationConfigContacts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &communicationConfigContactR{
				Config: o,
			}
		} else {
			rel.R.Config = o
		}
	}
	return nil
}

// AddExchangeConfigs adds the given related objects to the existing relationships
// of the config, optionally inserting them as new records.
// Appends related to o.R.ExchangeConfigs.
// Sets related.R.Config appropriately.
func (o *Config) AddExchangeConfigs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExchangeConfig) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConfigID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"exchange_config\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"config_id"}),
				strmangle.WhereClause("\"", "\"", 0, exchangeConfigPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConfigID = o.ID
		}
	}

	if o.R == nil {
		o.R = &configR{
			ExchangeConfigs: related,
		}
	} else {
		o.R.ExchangeConfigs = append(o.R.ExchangeConfigs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &exchangeConfigR{
				Config: o,
			}
		} else {
			rel.R.Config = o
		}
	}
	return nil
}

// AddForeignExchangeProviderConfigs adds the given related objects to the existing relationships
// of the config, optionally inserting them as new records.
// Appends related to o.R.ForeignExchangeProviderConfigs.
// Sets related.R.Config appropriately.
func (o *Config) AddForeignExchangeProviderConfigs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ForeignExchangeProviderConfig) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConfigID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"foreign_exchange_provider_config\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"config_id"}),
				strmangle.WhereClause("\"", "\"", 0, foreignExchangeProviderConfigPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConfigID = o.ID
		}
	}

	if o.R == nil {
		o.R = &configR{
			ForeignExchangeProviderConfigs: related,
		}
	} else {
		o.R.ForeignExchangeProviderConfigs = append(o.R.ForeignExchangeProviderConfigs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &foreignExchangeProviderConfigR{
				Config: o,
			}
		} else {
			rel.R.Config = o
		}
	}
	return nil
}

// AddPortfolios adds the given related objects to the existing relationships
// of the config, optionally inserting them as new records.
// Appends related to o.R.Portfolios.
// Sets related.R.Config appropriately.
func (o *Config) AddPortfolios(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Portfolio) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ConfigID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"portfolio\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"config_id"}),
				strmangle.WhereClause("\"", "\"", 0, portfolioPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ConfigID = o.ID
		}
	}

	if o.R == nil {
		o.R = &configR{
			Portfolios: related,
		}
	} else {
		o.R.Portfolios = append(o.R.Portfolios, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &portfolioR{
				Config: o,
			}
		} else {
			rel.R.Config = o
		}
	}
	return nil
}

// Configs retrieves all the records using an executor.
func Configs(mods ...qm.QueryMod) configQuery {
	mods = append(mods, qm.From("\"config\""))
	return configQuery{NewQuery(mods...)}
}

// FindConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConfig(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Config, error) {
	configObj := &Config{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"config\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, configObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from config")
	}

	return configObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Config) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no config provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(configColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	configInsertCacheMut.RLock()
	cache, cached := configInsertCache[key]
	configInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			configColumns,
			configColumnsWithDefault,
			configColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(configType, configMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(configType, configMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"config\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"config\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, configPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into config")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == configMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for config")
	}

CacheNoHooks:
	if !cached {
		configInsertCacheMut.Lock()
		configInsertCache[key] = cache
		configInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Config.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Config) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	configUpdateCacheMut.RLock()
	cache, cached := configUpdateCache[key]
	configUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			configColumns,
			configPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, configPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(configType, configMapping, append(wl, configPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for config")
	}

	if !cached {
		configUpdateCacheMut.Lock()
		configUpdateCache[key] = cache
		configUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q configQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for config")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, configPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in config slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all config")
	}
	return rowsAff, nil
}

// Delete deletes a single Config record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Config) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Config provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), configPrimaryKeyMapping)
	sql := "DELETE FROM \"config\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for config")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q configQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no configQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Config slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(configBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, configPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from config slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for config")
	}

	if len(configAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Config) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindConfig(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), configPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"config\".* FROM \"config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, configPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConfigSlice")
	}

	*o = slice

	return nil
}

// ConfigExists checks if the Config row exists.
func ConfigExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"config\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if config exists")
	}

	return exists, nil
}
