// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testTradeHistories(t *testing.T) {
	t.Parallel()

	query := TradeHistories(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testTradeHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = tradeHistory.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := TradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradeHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = TradeHistories(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := TradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradeHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TradeHistorySlice{tradeHistory}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := TradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testTradeHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := TradeHistoryExists(tx, tradeHistory.FulfilledOn)
	if err != nil {
		t.Errorf("Unable to check if TradeHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TradeHistoryExistsG to return true, but got false.")
	}
}
func testTradeHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	tradeHistoryFound, err := FindTradeHistory(tx, tradeHistory.FulfilledOn)
	if err != nil {
		t.Error(err)
	}

	if tradeHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}
func testTradeHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = TradeHistories(tx).Bind(tradeHistory); err != nil {
		t.Error(err)
	}
}

func testTradeHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := TradeHistories(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTradeHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeHistoryOne := &TradeHistory{}
	tradeHistoryTwo := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistoryOne, tradeHistoryDBTypes, false, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, tradeHistoryTwo, tradeHistoryDBTypes, false, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tradeHistoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := TradeHistories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTradeHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tradeHistoryOne := &TradeHistory{}
	tradeHistoryTwo := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistoryOne, tradeHistoryDBTypes, false, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, tradeHistoryTwo, tradeHistoryDBTypes, false, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = tradeHistoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func tradeHistoryBeforeInsertHook(e boil.Executor, o *TradeHistory) error {
	*o = TradeHistory{}
	return nil
}

func tradeHistoryAfterInsertHook(e boil.Executor, o *TradeHistory) error {
	*o = TradeHistory{}
	return nil
}

func tradeHistoryAfterSelectHook(e boil.Executor, o *TradeHistory) error {
	*o = TradeHistory{}
	return nil
}

func tradeHistoryBeforeUpdateHook(e boil.Executor, o *TradeHistory) error {
	*o = TradeHistory{}
	return nil
}

func tradeHistoryAfterUpdateHook(e boil.Executor, o *TradeHistory) error {
	*o = TradeHistory{}
	return nil
}

func tradeHistoryBeforeDeleteHook(e boil.Executor, o *TradeHistory) error {
	*o = TradeHistory{}
	return nil
}

func tradeHistoryAfterDeleteHook(e boil.Executor, o *TradeHistory) error {
	*o = TradeHistory{}
	return nil
}

func tradeHistoryBeforeUpsertHook(e boil.Executor, o *TradeHistory) error {
	*o = TradeHistory{}
	return nil
}

func tradeHistoryAfterUpsertHook(e boil.Executor, o *TradeHistory) error {
	*o = TradeHistory{}
	return nil
}

func testTradeHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &TradeHistory{}
	o := &TradeHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tradeHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TradeHistory object: %s", err)
	}

	AddTradeHistoryHook(boil.BeforeInsertHook, tradeHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tradeHistoryBeforeInsertHooks = []TradeHistoryHook{}

	AddTradeHistoryHook(boil.AfterInsertHook, tradeHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tradeHistoryAfterInsertHooks = []TradeHistoryHook{}

	AddTradeHistoryHook(boil.AfterSelectHook, tradeHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tradeHistoryAfterSelectHooks = []TradeHistoryHook{}

	AddTradeHistoryHook(boil.BeforeUpdateHook, tradeHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tradeHistoryBeforeUpdateHooks = []TradeHistoryHook{}

	AddTradeHistoryHook(boil.AfterUpdateHook, tradeHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tradeHistoryAfterUpdateHooks = []TradeHistoryHook{}

	AddTradeHistoryHook(boil.BeforeDeleteHook, tradeHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tradeHistoryBeforeDeleteHooks = []TradeHistoryHook{}

	AddTradeHistoryHook(boil.AfterDeleteHook, tradeHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tradeHistoryAfterDeleteHooks = []TradeHistoryHook{}

	AddTradeHistoryHook(boil.BeforeUpsertHook, tradeHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tradeHistoryBeforeUpsertHooks = []TradeHistoryHook{}

	AddTradeHistoryHook(boil.AfterUpsertHook, tradeHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tradeHistoryAfterUpsertHooks = []TradeHistoryHook{}
}
func testTradeHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTradeHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx, tradeHistoryColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := TradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTradeHistoryToOneGCTUserUsingGCTUser(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local TradeHistory
	var foreign GCTUser

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tradeHistoryDBTypes, false, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, gctUserDBTypes, false, gctUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GCTUser struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.GCTUserID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.GCTUser(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TradeHistorySlice{&local}
	if err = local.L.LoadGCTUser(tx, false, (*[]*TradeHistory)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.GCTUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.GCTUser = nil
	if err = local.L.LoadGCTUser(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.GCTUser == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTradeHistoryToOneSetOpGCTUserUsingGCTUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a TradeHistory
	var b, c GCTUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeHistoryDBTypes, false, strmangle.SetComplement(tradeHistoryPrimaryKeyColumns, tradeHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, gctUserDBTypes, false, strmangle.SetComplement(gctUserPrimaryKeyColumns, gctUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, gctUserDBTypes, false, strmangle.SetComplement(gctUserPrimaryKeyColumns, gctUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GCTUser{&b, &c} {
		err = a.SetGCTUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.GCTUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TradeHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GCTUserID != x.ID {
			t.Error("foreign key was wrong value", a.GCTUserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GCTUserID))
		reflect.Indirect(reflect.ValueOf(&a.GCTUserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GCTUserID != x.ID {
			t.Error("foreign key was wrong value", a.GCTUserID, x.ID)
		}
	}
}
func testTradeHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = tradeHistory.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTradeHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TradeHistorySlice{tradeHistory}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testTradeHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := TradeHistories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tradeHistoryDBTypes = map[string]string{`Amount`: `real`, `CurrencyPair`: `text`, `ExchangeName`: `text`, `FulfilledOn`: `timestamp without time zone`, `GCTUserID`: `integer`, `OrderType`: `text`, `Rate`: `real`}
	_                   = bytes.MinRead
)

func testTradeHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if len(tradeHistoryColumns) == len(tradeHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	if err = tradeHistory.Update(tx); err != nil {
		t.Error(err)
	}
}

func testTradeHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tradeHistoryColumns) == len(tradeHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	tradeHistory := &TradeHistory{}
	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, tradeHistory, tradeHistoryDBTypes, true, tradeHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tradeHistoryColumns, tradeHistoryPrimaryKeyColumns) {
		fields = tradeHistoryColumns
	} else {
		fields = strmangle.SetComplement(
			tradeHistoryColumns,
			tradeHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(tradeHistory))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := TradeHistorySlice{tradeHistory}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testTradeHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(tradeHistoryColumns) == len(tradeHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	tradeHistory := TradeHistory{}
	if err = randomize.Struct(seed, &tradeHistory, tradeHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = tradeHistory.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert TradeHistory: %s", err)
	}

	count, err := TradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &tradeHistory, tradeHistoryDBTypes, false, tradeHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TradeHistory struct: %s", err)
	}

	if err = tradeHistory.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert TradeHistory: %s", err)
	}

	count, err = TradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
