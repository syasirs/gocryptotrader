// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// GCTUser is an object representing the database table.
type GCTUser struct {
	ID         int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name       string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Password   string    `boil:"password" json:"password" toml:"password" yaml:"password"`
	InsertedAt time.Time `boil:"inserted_at" json:"inserted_at" toml:"inserted_at" yaml:"inserted_at"`
	AmendedAt  time.Time `boil:"amended_at" json:"amended_at" toml:"amended_at" yaml:"amended_at"`

	R *gctUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gctUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GCTUserColumns = struct {
	ID         string
	Name       string
	Password   string
	InsertedAt string
	AmendedAt  string
}{
	ID:         "id",
	Name:       "name",
	Password:   "password",
	InsertedAt: "inserted_at",
	AmendedAt:  "amended_at",
}

// GCTUserRels is where relationship names are stored.
var GCTUserRels = struct {
	GCTConfigs string
}{
	GCTConfigs: "GCTConfigs",
}

// gctUserR is where relationships are stored.
type gctUserR struct {
	GCTConfigs GCTConfigSlice
}

// NewStruct creates a new relationship struct
func (*gctUserR) NewStruct() *gctUserR {
	return &gctUserR{}
}

// gctUserL is where Load methods for each relationship are stored.
type gctUserL struct{}

var (
	gctUserColumns               = []string{"id", "name", "password", "inserted_at", "amended_at"}
	gctUserColumnsWithoutDefault = []string{}
	gctUserColumnsWithDefault    = []string{"id", "name", "password", "inserted_at", "amended_at"}
	gctUserPrimaryKeyColumns     = []string{"id"}
)

type (
	// GCTUserSlice is an alias for a slice of pointers to GCTUser.
	// This should generally be used opposed to []GCTUser.
	GCTUserSlice []*GCTUser

	gctUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gctUserType                 = reflect.TypeOf(&GCTUser{})
	gctUserMapping              = queries.MakeStructMapping(gctUserType)
	gctUserPrimaryKeyMapping, _ = queries.BindMapping(gctUserType, gctUserMapping, gctUserPrimaryKeyColumns)
	gctUserInsertCacheMut       sync.RWMutex
	gctUserInsertCache          = make(map[string]insertCache)
	gctUserUpdateCacheMut       sync.RWMutex
	gctUserUpdateCache          = make(map[string]updateCache)
	gctUserUpsertCacheMut       sync.RWMutex
	gctUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

// One returns a single gctUser record from the query.
func (q gctUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GCTUser, error) {
	o := &GCTUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for gct_user")
	}

	return o, nil
}

// All returns all GCTUser records from the query.
func (q gctUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (GCTUserSlice, error) {
	var o []*GCTUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GCTUser slice")
	}

	return o, nil
}

// Count returns the count of all GCTUser records in the query.
func (q gctUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count gct_user rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gctUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if gct_user exists")
	}

	return count > 0, nil
}

// GCTConfigs retrieves all the gct_config's GCTConfigs with an executor.
func (o *GCTUser) GCTConfigs(mods ...qm.QueryMod) gctConfigQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"gct_config\".\"gct_user_id\"=?", o.ID),
	)

	query := GCTConfigs(queryMods...)
	queries.SetFrom(query.Query, "\"gct_config\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"gct_config\".*"})
	}

	return query
}

// LoadGCTConfigs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (gctUserL) LoadGCTConfigs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGCTUser interface{}, mods queries.Applicator) error {
	var slice []*GCTUser
	var object *GCTUser

	if singular {
		object = maybeGCTUser.(*GCTUser)
	} else {
		slice = *maybeGCTUser.(*[]*GCTUser)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &gctUserR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gctUserR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`gct_config`), qm.WhereIn(`gct_user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load gct_config")
	}

	var resultSlice []*GCTConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice gct_config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on gct_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for gct_config")
	}

	if singular {
		object.R.GCTConfigs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &gctConfigR{}
			}
			foreign.R.GCTUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GCTUserID {
				local.R.GCTConfigs = append(local.R.GCTConfigs, foreign)
				if foreign.R == nil {
					foreign.R = &gctConfigR{}
				}
				foreign.R.GCTUser = local
				break
			}
		}
	}

	return nil
}

// AddGCTConfigs adds the given related objects to the existing relationships
// of the gct_user, optionally inserting them as new records.
// Appends related to o.R.GCTConfigs.
// Sets related.R.GCTUser appropriately.
func (o *GCTUser) AddGCTConfigs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*GCTConfig) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GCTUserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"gct_config\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"gct_user_id"}),
				strmangle.WhereClause("\"", "\"", 0, gctConfigPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GCTUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gctUserR{
			GCTConfigs: related,
		}
	} else {
		o.R.GCTConfigs = append(o.R.GCTConfigs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gctConfigR{
				GCTUser: o,
			}
		} else {
			rel.R.GCTUser = o
		}
	}
	return nil
}

// GCTUsers retrieves all the records using an executor.
func GCTUsers(mods ...qm.QueryMod) gctUserQuery {
	mods = append(mods, qm.From("\"gct_user\""))
	return gctUserQuery{NewQuery(mods...)}
}

// FindGCTUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGCTUser(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*GCTUser, error) {
	gctUserObj := &GCTUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"gct_user\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, gctUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from gct_user")
	}

	return gctUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GCTUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gct_user provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(gctUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gctUserInsertCacheMut.RLock()
	cache, cached := gctUserInsertCache[key]
	gctUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gctUserColumns,
			gctUserColumnsWithDefault,
			gctUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gctUserType, gctUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gctUserType, gctUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"gct_user\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"gct_user\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"gct_user\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, gctUserPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into gct_user")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == gctUserMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for gct_user")
	}

CacheNoHooks:
	if !cached {
		gctUserInsertCacheMut.Lock()
		gctUserInsertCache[key] = cache
		gctUserInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the GCTUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GCTUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	gctUserUpdateCacheMut.RLock()
	cache, cached := gctUserUpdateCache[key]
	gctUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gctUserColumns,
			gctUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update gct_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"gct_user\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, gctUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gctUserType, gctUserMapping, append(wl, gctUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update gct_user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for gct_user")
	}

	if !cached {
		gctUserUpdateCacheMut.Lock()
		gctUserUpdateCache[key] = cache
		gctUserUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q gctUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for gct_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for gct_user")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GCTUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gctUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"gct_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gctUserPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gctUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gctUser")
	}
	return rowsAff, nil
}

// Delete deletes a single GCTUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GCTUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GCTUser provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gctUserPrimaryKeyMapping)
	sql := "DELETE FROM \"gct_user\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from gct_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for gct_user")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gctUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gctUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gct_user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gct_user")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GCTUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GCTUser slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gctUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"gct_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gctUserPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gctUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gct_user")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GCTUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGCTUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GCTUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GCTUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gctUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"gct_user\".* FROM \"gct_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, gctUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GCTUserSlice")
	}

	*o = slice

	return nil
}

// GCTUserExists checks if the GCTUser row exists.
func GCTUserExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"gct_user\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if gct_user exists")
	}

	return exists, nil
}
