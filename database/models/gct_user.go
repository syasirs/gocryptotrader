// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// GCTUser is an object representing the database table.
type GCTUser struct {
	ID       int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Password string `boil:"password" json:"password" toml:"password" yaml:"password"`

	R *gctUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gctUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GCTUserColumns = struct {
	ID       string
	Name     string
	Password string
}{
	ID:       "id",
	Name:     "name",
	Password: "password",
}

// gctUserR is where relationships are stored.
type gctUserR struct {
	Exchanges                  ExchangeSlice
	AddressAddressInformations AddressInformationSlice
	TradeHistories             TradeHistorySlice
}

// gctUserL is where Load methods for each relationship are stored.
type gctUserL struct{}

var (
	gctUserColumns               = []string{"id", "name", "password"}
	gctUserColumnsWithoutDefault = []string{"id", "name", "password"}
	gctUserColumnsWithDefault    = []string{}
	gctUserPrimaryKeyColumns     = []string{"id"}
)

type (
	// GCTUserSlice is an alias for a slice of pointers to GCTUser.
	// This should generally be used opposed to []GCTUser.
	GCTUserSlice []*GCTUser
	// GCTUserHook is the signature for custom GCTUser hook methods
	GCTUserHook func(boil.Executor, *GCTUser) error

	gctUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gctUserType                 = reflect.TypeOf(&GCTUser{})
	gctUserMapping              = queries.MakeStructMapping(gctUserType)
	gctUserPrimaryKeyMapping, _ = queries.BindMapping(gctUserType, gctUserMapping, gctUserPrimaryKeyColumns)
	gctUserInsertCacheMut       sync.RWMutex
	gctUserInsertCache          = make(map[string]insertCache)
	gctUserUpdateCacheMut       sync.RWMutex
	gctUserUpdateCache          = make(map[string]updateCache)
	gctUserUpsertCacheMut       sync.RWMutex
	gctUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var gctUserBeforeInsertHooks []GCTUserHook
var gctUserBeforeUpdateHooks []GCTUserHook
var gctUserBeforeDeleteHooks []GCTUserHook
var gctUserBeforeUpsertHooks []GCTUserHook

var gctUserAfterInsertHooks []GCTUserHook
var gctUserAfterSelectHooks []GCTUserHook
var gctUserAfterUpdateHooks []GCTUserHook
var gctUserAfterDeleteHooks []GCTUserHook
var gctUserAfterUpsertHooks []GCTUserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GCTUser) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range gctUserBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GCTUser) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range gctUserBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GCTUser) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range gctUserBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GCTUser) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range gctUserBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GCTUser) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range gctUserAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GCTUser) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range gctUserAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GCTUser) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range gctUserAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GCTUser) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range gctUserAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GCTUser) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range gctUserAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGCTUserHook registers your hook function for all future operations.
func AddGCTUserHook(hookPoint boil.HookPoint, gctUserHook GCTUserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		gctUserBeforeInsertHooks = append(gctUserBeforeInsertHooks, gctUserHook)
	case boil.BeforeUpdateHook:
		gctUserBeforeUpdateHooks = append(gctUserBeforeUpdateHooks, gctUserHook)
	case boil.BeforeDeleteHook:
		gctUserBeforeDeleteHooks = append(gctUserBeforeDeleteHooks, gctUserHook)
	case boil.BeforeUpsertHook:
		gctUserBeforeUpsertHooks = append(gctUserBeforeUpsertHooks, gctUserHook)
	case boil.AfterInsertHook:
		gctUserAfterInsertHooks = append(gctUserAfterInsertHooks, gctUserHook)
	case boil.AfterSelectHook:
		gctUserAfterSelectHooks = append(gctUserAfterSelectHooks, gctUserHook)
	case boil.AfterUpdateHook:
		gctUserAfterUpdateHooks = append(gctUserAfterUpdateHooks, gctUserHook)
	case boil.AfterDeleteHook:
		gctUserAfterDeleteHooks = append(gctUserAfterDeleteHooks, gctUserHook)
	case boil.AfterUpsertHook:
		gctUserAfterUpsertHooks = append(gctUserAfterUpsertHooks, gctUserHook)
	}
}

// OneP returns a single gctUser record from the query, and panics on error.
func (q gctUserQuery) OneP() *GCTUser {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single gctUser record from the query.
func (q gctUserQuery) One() (*GCTUser, error) {
	o := &GCTUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for gct_user")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all GCTUser records from the query, and panics on error.
func (q gctUserQuery) AllP() GCTUserSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all GCTUser records from the query.
func (q gctUserQuery) All() (GCTUserSlice, error) {
	var o []*GCTUser

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GCTUser slice")
	}

	if len(gctUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all GCTUser records in the query, and panics on error.
func (q gctUserQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all GCTUser records in the query.
func (q gctUserQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count gct_user rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q gctUserQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q gctUserQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if gct_user exists")
	}

	return count > 0, nil
}

// ExchangesG retrieves all the exchange's exchange.
func (o *GCTUser) ExchangesG(mods ...qm.QueryMod) exchangeQuery {
	return o.Exchanges(boil.GetDB(), mods...)
}

// Exchanges retrieves all the exchange's exchange with an executor.
func (o *GCTUser) Exchanges(exec boil.Executor, mods ...qm.QueryMod) exchangeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"exchange\".\"gct_user_id\"=?", o.ID),
	)

	query := Exchanges(exec, queryMods...)
	queries.SetFrom(query.Query, "\"exchange\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"exchange\".*"})
	}

	return query
}

// AddressAddressInformationsG retrieves all the address_information's address information via id column.
func (o *GCTUser) AddressAddressInformationsG(mods ...qm.QueryMod) addressInformationQuery {
	return o.AddressAddressInformations(boil.GetDB(), mods...)
}

// AddressAddressInformations retrieves all the address_information's address information with an executor via id column.
func (o *GCTUser) AddressAddressInformations(exec boil.Executor, mods ...qm.QueryMod) addressInformationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"portfolio\" on \"address_information\".\"id\" = \"portfolio\".\"address_id\""),
		qm.Where("\"portfolio\".\"gct_user_id\"=?", o.ID),
	)

	query := AddressInformations(exec, queryMods...)
	queries.SetFrom(query.Query, "\"address_information\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"address_information\".*"})
	}

	return query
}

// TradeHistoriesG retrieves all the trade_history's trade history.
func (o *GCTUser) TradeHistoriesG(mods ...qm.QueryMod) tradeHistoryQuery {
	return o.TradeHistories(boil.GetDB(), mods...)
}

// TradeHistories retrieves all the trade_history's trade history with an executor.
func (o *GCTUser) TradeHistories(exec boil.Executor, mods ...qm.QueryMod) tradeHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"trade_history\".\"gct_user_id\"=?", o.ID),
	)

	query := TradeHistories(exec, queryMods...)
	queries.SetFrom(query.Query, "\"trade_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"trade_history\".*"})
	}

	return query
}

// LoadExchanges allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (gctUserL) LoadExchanges(e boil.Executor, singular bool, maybeGCTUser interface{}) error {
	var slice []*GCTUser
	var object *GCTUser

	count := 1
	if singular {
		object = maybeGCTUser.(*GCTUser)
	} else {
		slice = *maybeGCTUser.(*[]*GCTUser)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &gctUserR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &gctUserR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"exchange\" where \"gct_user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load exchange")
	}
	defer results.Close()

	var resultSlice []*Exchange
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice exchange")
	}

	if len(exchangeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Exchanges = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GCTUserID {
				local.R.Exchanges = append(local.R.Exchanges, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAddressAddressInformations allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (gctUserL) LoadAddressAddressInformations(e boil.Executor, singular bool, maybeGCTUser interface{}) error {
	var slice []*GCTUser
	var object *GCTUser

	count := 1
	if singular {
		object = maybeGCTUser.(*GCTUser)
	} else {
		slice = *maybeGCTUser.(*[]*GCTUser)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &gctUserR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &gctUserR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select \"a\".*, \"b\".\"gct_user_id\" from \"address_information\" as \"a\" inner join \"portfolio\" as \"b\" on \"a\".\"id\" = \"b\".\"address_id\" where \"b\".\"gct_user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load address_information")
	}
	defer results.Close()

	var resultSlice []*AddressInformation

	var localJoinCols []int
	for results.Next() {
		one := new(AddressInformation)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Address, &one.CoinType, &one.Balance, &one.Description, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice address_information")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice address_information")
	}

	if len(addressInformationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AddressAddressInformations = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.AddressAddressInformations = append(local.R.AddressAddressInformations, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTradeHistories allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (gctUserL) LoadTradeHistories(e boil.Executor, singular bool, maybeGCTUser interface{}) error {
	var slice []*GCTUser
	var object *GCTUser

	count := 1
	if singular {
		object = maybeGCTUser.(*GCTUser)
	} else {
		slice = *maybeGCTUser.(*[]*GCTUser)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &gctUserR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &gctUserR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"trade_history\" where \"gct_user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load trade_history")
	}
	defer results.Close()

	var resultSlice []*TradeHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice trade_history")
	}

	if len(tradeHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TradeHistories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GCTUserID {
				local.R.TradeHistories = append(local.R.TradeHistories, foreign)
				break
			}
		}
	}

	return nil
}

// AddExchangesG adds the given related objects to the existing relationships
// of the gct_user, optionally inserting them as new records.
// Appends related to o.R.Exchanges.
// Sets related.R.GCTUser appropriately.
// Uses the global database handle.
func (o *GCTUser) AddExchangesG(insert bool, related ...*Exchange) error {
	return o.AddExchanges(boil.GetDB(), insert, related...)
}

// AddExchangesP adds the given related objects to the existing relationships
// of the gct_user, optionally inserting them as new records.
// Appends related to o.R.Exchanges.
// Sets related.R.GCTUser appropriately.
// Panics on error.
func (o *GCTUser) AddExchangesP(exec boil.Executor, insert bool, related ...*Exchange) {
	if err := o.AddExchanges(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddExchangesGP adds the given related objects to the existing relationships
// of the gct_user, optionally inserting them as new records.
// Appends related to o.R.Exchanges.
// Sets related.R.GCTUser appropriately.
// Uses the global database handle and panics on error.
func (o *GCTUser) AddExchangesGP(insert bool, related ...*Exchange) {
	if err := o.AddExchanges(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddExchanges adds the given related objects to the existing relationships
// of the gct_user, optionally inserting them as new records.
// Appends related to o.R.Exchanges.
// Sets related.R.GCTUser appropriately.
func (o *GCTUser) AddExchanges(exec boil.Executor, insert bool, related ...*Exchange) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GCTUserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"exchange\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"gct_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, exchangePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GCTUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gctUserR{
			Exchanges: related,
		}
	} else {
		o.R.Exchanges = append(o.R.Exchanges, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &exchangeR{
				GCTUser: o,
			}
		} else {
			rel.R.GCTUser = o
		}
	}
	return nil
}

// AddAddressAddressInformationsG adds the given related objects to the existing relationships
// of the gct_user, optionally inserting them as new records.
// Appends related to o.R.AddressAddressInformations.
// Sets related.R.GCTUsers appropriately.
// Uses the global database handle.
func (o *GCTUser) AddAddressAddressInformationsG(insert bool, related ...*AddressInformation) error {
	return o.AddAddressAddressInformations(boil.GetDB(), insert, related...)
}

// AddAddressAddressInformationsP adds the given related objects to the existing relationships
// of the gct_user, optionally inserting them as new records.
// Appends related to o.R.AddressAddressInformations.
// Sets related.R.GCTUsers appropriately.
// Panics on error.
func (o *GCTUser) AddAddressAddressInformationsP(exec boil.Executor, insert bool, related ...*AddressInformation) {
	if err := o.AddAddressAddressInformations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAddressAddressInformationsGP adds the given related objects to the existing relationships
// of the gct_user, optionally inserting them as new records.
// Appends related to o.R.AddressAddressInformations.
// Sets related.R.GCTUsers appropriately.
// Uses the global database handle and panics on error.
func (o *GCTUser) AddAddressAddressInformationsGP(insert bool, related ...*AddressInformation) {
	if err := o.AddAddressAddressInformations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAddressAddressInformations adds the given related objects to the existing relationships
// of the gct_user, optionally inserting them as new records.
// Appends related to o.R.AddressAddressInformations.
// Sets related.R.GCTUsers appropriately.
func (o *GCTUser) AddAddressAddressInformations(exec boil.Executor, insert bool, related ...*AddressInformation) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"portfolio\" (\"gct_user_id\", \"address_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &gctUserR{
			AddressAddressInformations: related,
		}
	} else {
		o.R.AddressAddressInformations = append(o.R.AddressAddressInformations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &addressInformationR{
				GCTUsers: GCTUserSlice{o},
			}
		} else {
			rel.R.GCTUsers = append(rel.R.GCTUsers, o)
		}
	}
	return nil
}

// SetAddressAddressInformationsG removes all previously related items of the
// gct_user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.GCTUsers's AddressAddressInformations accordingly.
// Replaces o.R.AddressAddressInformations with related.
// Sets related.R.GCTUsers's AddressAddressInformations accordingly.
// Uses the global database handle.
func (o *GCTUser) SetAddressAddressInformationsG(insert bool, related ...*AddressInformation) error {
	return o.SetAddressAddressInformations(boil.GetDB(), insert, related...)
}

// SetAddressAddressInformationsP removes all previously related items of the
// gct_user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.GCTUsers's AddressAddressInformations accordingly.
// Replaces o.R.AddressAddressInformations with related.
// Sets related.R.GCTUsers's AddressAddressInformations accordingly.
// Panics on error.
func (o *GCTUser) SetAddressAddressInformationsP(exec boil.Executor, insert bool, related ...*AddressInformation) {
	if err := o.SetAddressAddressInformations(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddressAddressInformationsGP removes all previously related items of the
// gct_user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.GCTUsers's AddressAddressInformations accordingly.
// Replaces o.R.AddressAddressInformations with related.
// Sets related.R.GCTUsers's AddressAddressInformations accordingly.
// Uses the global database handle and panics on error.
func (o *GCTUser) SetAddressAddressInformationsGP(insert bool, related ...*AddressInformation) {
	if err := o.SetAddressAddressInformations(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddressAddressInformations removes all previously related items of the
// gct_user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.GCTUsers's AddressAddressInformations accordingly.
// Replaces o.R.AddressAddressInformations with related.
// Sets related.R.GCTUsers's AddressAddressInformations accordingly.
func (o *GCTUser) SetAddressAddressInformations(exec boil.Executor, insert bool, related ...*AddressInformation) error {
	query := "delete from \"portfolio\" where \"gct_user_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeAddressAddressInformationsFromGCTUsersSlice(o, related)
	if o.R != nil {
		o.R.AddressAddressInformations = nil
	}
	return o.AddAddressAddressInformations(exec, insert, related...)
}

// RemoveAddressAddressInformationsG relationships from objects passed in.
// Removes related items from R.AddressAddressInformations (uses pointer comparison, removal does not keep order)
// Sets related.R.GCTUsers.
// Uses the global database handle.
func (o *GCTUser) RemoveAddressAddressInformationsG(related ...*AddressInformation) error {
	return o.RemoveAddressAddressInformations(boil.GetDB(), related...)
}

// RemoveAddressAddressInformationsP relationships from objects passed in.
// Removes related items from R.AddressAddressInformations (uses pointer comparison, removal does not keep order)
// Sets related.R.GCTUsers.
// Panics on error.
func (o *GCTUser) RemoveAddressAddressInformationsP(exec boil.Executor, related ...*AddressInformation) {
	if err := o.RemoveAddressAddressInformations(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAddressAddressInformationsGP relationships from objects passed in.
// Removes related items from R.AddressAddressInformations (uses pointer comparison, removal does not keep order)
// Sets related.R.GCTUsers.
// Uses the global database handle and panics on error.
func (o *GCTUser) RemoveAddressAddressInformationsGP(related ...*AddressInformation) {
	if err := o.RemoveAddressAddressInformations(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAddressAddressInformations relationships from objects passed in.
// Removes related items from R.AddressAddressInformations (uses pointer comparison, removal does not keep order)
// Sets related.R.GCTUsers.
func (o *GCTUser) RemoveAddressAddressInformations(exec boil.Executor, related ...*AddressInformation) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"portfolio\" where \"gct_user_id\" = $1 and \"address_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeAddressAddressInformationsFromGCTUsersSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AddressAddressInformations {
			if rel != ri {
				continue
			}

			ln := len(o.R.AddressAddressInformations)
			if ln > 1 && i < ln-1 {
				o.R.AddressAddressInformations[i] = o.R.AddressAddressInformations[ln-1]
			}
			o.R.AddressAddressInformations = o.R.AddressAddressInformations[:ln-1]
			break
		}
	}

	return nil
}

func removeAddressAddressInformationsFromGCTUsersSlice(o *GCTUser, related []*AddressInformation) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.GCTUsers {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.GCTUsers)
			if ln > 1 && i < ln-1 {
				rel.R.GCTUsers[i] = rel.R.GCTUsers[ln-1]
			}
			rel.R.GCTUsers = rel.R.GCTUsers[:ln-1]
			break
		}
	}
}

// AddTradeHistoriesG adds the given related objects to the existing relationships
// of the gct_user, optionally inserting them as new records.
// Appends related to o.R.TradeHistories.
// Sets related.R.GCTUser appropriately.
// Uses the global database handle.
func (o *GCTUser) AddTradeHistoriesG(insert bool, related ...*TradeHistory) error {
	return o.AddTradeHistories(boil.GetDB(), insert, related...)
}

// AddTradeHistoriesP adds the given related objects to the existing relationships
// of the gct_user, optionally inserting them as new records.
// Appends related to o.R.TradeHistories.
// Sets related.R.GCTUser appropriately.
// Panics on error.
func (o *GCTUser) AddTradeHistoriesP(exec boil.Executor, insert bool, related ...*TradeHistory) {
	if err := o.AddTradeHistories(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTradeHistoriesGP adds the given related objects to the existing relationships
// of the gct_user, optionally inserting them as new records.
// Appends related to o.R.TradeHistories.
// Sets related.R.GCTUser appropriately.
// Uses the global database handle and panics on error.
func (o *GCTUser) AddTradeHistoriesGP(insert bool, related ...*TradeHistory) {
	if err := o.AddTradeHistories(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTradeHistories adds the given related objects to the existing relationships
// of the gct_user, optionally inserting them as new records.
// Appends related to o.R.TradeHistories.
// Sets related.R.GCTUser appropriately.
func (o *GCTUser) AddTradeHistories(exec boil.Executor, insert bool, related ...*TradeHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GCTUserID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"trade_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"gct_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, tradeHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.FulfilledOn}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GCTUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &gctUserR{
			TradeHistories: related,
		}
	} else {
		o.R.TradeHistories = append(o.R.TradeHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tradeHistoryR{
				GCTUser: o,
			}
		} else {
			rel.R.GCTUser = o
		}
	}
	return nil
}

// GCTUsersG retrieves all records.
func GCTUsersG(mods ...qm.QueryMod) gctUserQuery {
	return GCTUsers(boil.GetDB(), mods...)
}

// GCTUsers retrieves all the records using an executor.
func GCTUsers(exec boil.Executor, mods ...qm.QueryMod) gctUserQuery {
	mods = append(mods, qm.From("\"gct_user\""))
	return gctUserQuery{NewQuery(exec, mods...)}
}

// FindGCTUserG retrieves a single record by ID.
func FindGCTUserG(id int, selectCols ...string) (*GCTUser, error) {
	return FindGCTUser(boil.GetDB(), id, selectCols...)
}

// FindGCTUserGP retrieves a single record by ID, and panics on error.
func FindGCTUserGP(id int, selectCols ...string) *GCTUser {
	retobj, err := FindGCTUser(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindGCTUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGCTUser(exec boil.Executor, id int, selectCols ...string) (*GCTUser, error) {
	gctUserObj := &GCTUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"gct_user\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(gctUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from gct_user")
	}

	return gctUserObj, nil
}

// FindGCTUserP retrieves a single record by ID with an executor, and panics on error.
func FindGCTUserP(exec boil.Executor, id int, selectCols ...string) *GCTUser {
	retobj, err := FindGCTUser(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *GCTUser) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *GCTUser) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *GCTUser) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *GCTUser) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no gct_user provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gctUserColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	gctUserInsertCacheMut.RLock()
	cache, cached := gctUserInsertCache[key]
	gctUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			gctUserColumns,
			gctUserColumnsWithDefault,
			gctUserColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(gctUserType, gctUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gctUserType, gctUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"gct_user\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"gct_user\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into gct_user")
	}

	if !cached {
		gctUserInsertCacheMut.Lock()
		gctUserInsertCache[key] = cache
		gctUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single GCTUser record. See Update for
// whitelist behavior description.
func (o *GCTUser) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single GCTUser record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *GCTUser) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the GCTUser, and panics on error.
// See Update for whitelist behavior description.
func (o *GCTUser) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the GCTUser.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *GCTUser) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	gctUserUpdateCacheMut.RLock()
	cache, cached := gctUserUpdateCache[key]
	gctUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			gctUserColumns,
			gctUserPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update gct_user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"gct_user\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gctUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gctUserType, gctUserMapping, append(wl, gctUserPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update gct_user row")
	}

	if !cached {
		gctUserUpdateCacheMut.Lock()
		gctUserUpdateCache[key] = cache
		gctUserUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q gctUserQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q gctUserQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for gct_user")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GCTUserSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o GCTUserSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o GCTUserSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GCTUserSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gctUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"gct_user\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gctUserPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in gctUser slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *GCTUser) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *GCTUser) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *GCTUser) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *GCTUser) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no gct_user provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gctUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gctUserUpsertCacheMut.RLock()
	cache, cached := gctUserUpsertCache[key]
	gctUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			gctUserColumns,
			gctUserColumnsWithDefault,
			gctUserColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			gctUserColumns,
			gctUserPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert gct_user, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(gctUserPrimaryKeyColumns))
			copy(conflict, gctUserPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"gct_user\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(gctUserType, gctUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gctUserType, gctUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert gct_user")
	}

	if !cached {
		gctUserUpsertCacheMut.Lock()
		gctUserUpsertCache[key] = cache
		gctUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single GCTUser record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *GCTUser) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single GCTUser record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *GCTUser) DeleteG() error {
	if o == nil {
		return errors.New("models: no GCTUser provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single GCTUser record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *GCTUser) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single GCTUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GCTUser) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no GCTUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gctUserPrimaryKeyMapping)
	sql := "DELETE FROM \"gct_user\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from gct_user")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q gctUserQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q gctUserQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no gctUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from gct_user")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o GCTUserSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o GCTUserSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no GCTUser slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o GCTUserSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GCTUserSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no GCTUser slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(gctUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gctUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"gct_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gctUserPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from gctUser slice")
	}

	if len(gctUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *GCTUser) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *GCTUser) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *GCTUser) ReloadG() error {
	if o == nil {
		return errors.New("models: no GCTUser provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GCTUser) Reload(exec boil.Executor) error {
	ret, err := FindGCTUser(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *GCTUserSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *GCTUserSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GCTUserSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty GCTUserSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GCTUserSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	gctUsers := GCTUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gctUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"gct_user\".* FROM \"gct_user\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gctUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&gctUsers)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GCTUserSlice")
	}

	*o = gctUsers

	return nil
}

// GCTUserExists checks if the GCTUser row exists.
func GCTUserExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"gct_user\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if gct_user exists")
	}

	return exists, nil
}

// GCTUserExistsG checks if the GCTUser row exists.
func GCTUserExistsG(id int) (bool, error) {
	return GCTUserExists(boil.GetDB(), id)
}

// GCTUserExistsGP checks if the GCTUser row exists. Panics on error.
func GCTUserExistsGP(id int) bool {
	e, err := GCTUserExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// GCTUserExistsP checks if the GCTUser row exists. Panics on error.
func GCTUserExistsP(exec boil.Executor, id int) bool {
	e, err := GCTUserExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
