// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// CurrencyPairFormat is an object representing the database table.
type CurrencyPairFormat struct {
	CurrencyPairFormatID int64  `boil:"currency_pair_format_id" json:"currency_pair_format_id" toml:"currency_pair_format_id" yaml:"currency_pair_format_id"`
	ExchangeID           int64  `boil:"exchange_id" json:"exchange_id" toml:"exchange_id" yaml:"exchange_id"`
	ConfigCurrency       bool   `boil:"config_currency" json:"config_currency" toml:"config_currency" yaml:"config_currency"`
	RequestCurrency      bool   `boil:"request_currency" json:"request_currency" toml:"request_currency" yaml:"request_currency"`
	Name                 string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Uppercase            bool   `boil:"uppercase" json:"uppercase" toml:"uppercase" yaml:"uppercase"`
	Delimiter            string `boil:"delimiter" json:"delimiter" toml:"delimiter" yaml:"delimiter"`
	Separator            string `boil:"separator" json:"separator" toml:"separator" yaml:"separator"`
	Index                string `boil:"index" json:"index" toml:"index" yaml:"index"`

	R *currencyPairFormatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L currencyPairFormatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurrencyPairFormatColumns = struct {
	CurrencyPairFormatID string
	ExchangeID           string
	ConfigCurrency       string
	RequestCurrency      string
	Name                 string
	Uppercase            string
	Delimiter            string
	Separator            string
	Index                string
}{
	CurrencyPairFormatID: "currency_pair_format_id",
	ExchangeID:           "exchange_id",
	ConfigCurrency:       "config_currency",
	RequestCurrency:      "request_currency",
	Name:                 "name",
	Uppercase:            "uppercase",
	Delimiter:            "delimiter",
	Separator:            "separator",
	Index:                "index",
}

// currencyPairFormatR is where relationships are stored.
type currencyPairFormatR struct {
	Exchange *Exchange
}

// currencyPairFormatL is where Load methods for each relationship are stored.
type currencyPairFormatL struct{}

var (
	currencyPairFormatColumns               = []string{"currency_pair_format_id", "exchange_id", "config_currency", "request_currency", "name", "uppercase", "delimiter", "separator", "index"}
	currencyPairFormatColumnsWithoutDefault = []string{"currency_pair_format_id", "exchange_id", "config_currency", "request_currency", "name", "uppercase", "delimiter", "separator", "index"}
	currencyPairFormatColumnsWithDefault    = []string{}
	currencyPairFormatPrimaryKeyColumns     = []string{"currency_pair_format_id"}
)

type (
	// CurrencyPairFormatSlice is an alias for a slice of pointers to CurrencyPairFormat.
	// This should generally be used opposed to []CurrencyPairFormat.
	CurrencyPairFormatSlice []*CurrencyPairFormat

	currencyPairFormatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currencyPairFormatType                 = reflect.TypeOf(&CurrencyPairFormat{})
	currencyPairFormatMapping              = queries.MakeStructMapping(currencyPairFormatType)
	currencyPairFormatPrimaryKeyMapping, _ = queries.BindMapping(currencyPairFormatType, currencyPairFormatMapping, currencyPairFormatPrimaryKeyColumns)
	currencyPairFormatInsertCacheMut       sync.RWMutex
	currencyPairFormatInsertCache          = make(map[string]insertCache)
	currencyPairFormatUpdateCacheMut       sync.RWMutex
	currencyPairFormatUpdateCache          = make(map[string]updateCache)
	currencyPairFormatUpsertCacheMut       sync.RWMutex
	currencyPairFormatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single currencyPairFormat record from the query, and panics on error.
func (q currencyPairFormatQuery) OneP() *CurrencyPairFormat {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single currencyPairFormat record from the query.
func (q currencyPairFormatQuery) One() (*CurrencyPairFormat, error) {
	o := &CurrencyPairFormat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for currency_pair_format")
	}

	return o, nil
}

// AllP returns all CurrencyPairFormat records from the query, and panics on error.
func (q currencyPairFormatQuery) AllP() CurrencyPairFormatSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all CurrencyPairFormat records from the query.
func (q currencyPairFormatQuery) All() (CurrencyPairFormatSlice, error) {
	var o []*CurrencyPairFormat

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CurrencyPairFormat slice")
	}

	return o, nil
}

// CountP returns the count of all CurrencyPairFormat records in the query, and panics on error.
func (q currencyPairFormatQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all CurrencyPairFormat records in the query.
func (q currencyPairFormatQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count currency_pair_format rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q currencyPairFormatQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q currencyPairFormatQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if currency_pair_format exists")
	}

	return count > 0, nil
}

// ExchangeG pointed to by the foreign key.
func (o *CurrencyPairFormat) ExchangeG(mods ...qm.QueryMod) exchangeQuery {
	return o.Exchange(boil.GetDB(), mods...)
}

// Exchange pointed to by the foreign key.
func (o *CurrencyPairFormat) Exchange(exec boil.Executor, mods ...qm.QueryMod) exchangeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("exchange_id=?", o.ExchangeID),
	}

	queryMods = append(queryMods, mods...)

	query := Exchanges(exec, queryMods...)
	queries.SetFrom(query.Query, "\"exchanges\"")

	return query
} // LoadExchange allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (currencyPairFormatL) LoadExchange(e boil.Executor, singular bool, maybeCurrencyPairFormat interface{}) error {
	var slice []*CurrencyPairFormat
	var object *CurrencyPairFormat

	count := 1
	if singular {
		object = maybeCurrencyPairFormat.(*CurrencyPairFormat)
	} else {
		slice = *maybeCurrencyPairFormat.(*[]*CurrencyPairFormat)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &currencyPairFormatR{}
		}
		args[0] = object.ExchangeID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &currencyPairFormatR{}
			}
			args[i] = obj.ExchangeID
		}
	}

	query := fmt.Sprintf(
		"select * from \"exchanges\" where \"exchange_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Exchange")
	}
	defer results.Close()

	var resultSlice []*Exchange
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Exchange")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Exchange = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExchangeID == foreign.ExchangeID {
				local.R.Exchange = foreign
				break
			}
		}
	}

	return nil
}

// SetExchangeG of the currency_pair_format to the related item.
// Sets o.R.Exchange to related.
// Adds o to related.R.CurrencyPairFormats.
// Uses the global database handle.
func (o *CurrencyPairFormat) SetExchangeG(insert bool, related *Exchange) error {
	return o.SetExchange(boil.GetDB(), insert, related)
}

// SetExchangeP of the currency_pair_format to the related item.
// Sets o.R.Exchange to related.
// Adds o to related.R.CurrencyPairFormats.
// Panics on error.
func (o *CurrencyPairFormat) SetExchangeP(exec boil.Executor, insert bool, related *Exchange) {
	if err := o.SetExchange(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetExchangeGP of the currency_pair_format to the related item.
// Sets o.R.Exchange to related.
// Adds o to related.R.CurrencyPairFormats.
// Uses the global database handle and panics on error.
func (o *CurrencyPairFormat) SetExchangeGP(insert bool, related *Exchange) {
	if err := o.SetExchange(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetExchange of the currency_pair_format to the related item.
// Sets o.R.Exchange to related.
// Adds o to related.R.CurrencyPairFormats.
func (o *CurrencyPairFormat) SetExchange(exec boil.Executor, insert bool, related *Exchange) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"currency_pair_format\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"exchange_id"}),
		strmangle.WhereClause("\"", "\"", 2, currencyPairFormatPrimaryKeyColumns),
	)
	values := []interface{}{related.ExchangeID, o.CurrencyPairFormatID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExchangeID = related.ExchangeID

	if o.R == nil {
		o.R = &currencyPairFormatR{
			Exchange: related,
		}
	} else {
		o.R.Exchange = related
	}

	if related.R == nil {
		related.R = &exchangeR{
			CurrencyPairFormats: CurrencyPairFormatSlice{o},
		}
	} else {
		related.R.CurrencyPairFormats = append(related.R.CurrencyPairFormats, o)
	}

	return nil
}

// CurrencyPairFormatsG retrieves all records.
func CurrencyPairFormatsG(mods ...qm.QueryMod) currencyPairFormatQuery {
	return CurrencyPairFormats(boil.GetDB(), mods...)
}

// CurrencyPairFormats retrieves all the records using an executor.
func CurrencyPairFormats(exec boil.Executor, mods ...qm.QueryMod) currencyPairFormatQuery {
	mods = append(mods, qm.From("\"currency_pair_format\""))
	return currencyPairFormatQuery{NewQuery(exec, mods...)}
}

// FindCurrencyPairFormatG retrieves a single record by ID.
func FindCurrencyPairFormatG(currencyPairFormatID int64, selectCols ...string) (*CurrencyPairFormat, error) {
	return FindCurrencyPairFormat(boil.GetDB(), currencyPairFormatID, selectCols...)
}

// FindCurrencyPairFormatGP retrieves a single record by ID, and panics on error.
func FindCurrencyPairFormatGP(currencyPairFormatID int64, selectCols ...string) *CurrencyPairFormat {
	retobj, err := FindCurrencyPairFormat(boil.GetDB(), currencyPairFormatID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindCurrencyPairFormat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurrencyPairFormat(exec boil.Executor, currencyPairFormatID int64, selectCols ...string) (*CurrencyPairFormat, error) {
	currencyPairFormatObj := &CurrencyPairFormat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"currency_pair_format\" where \"currency_pair_format_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, currencyPairFormatID)

	err := q.Bind(currencyPairFormatObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from currency_pair_format")
	}

	return currencyPairFormatObj, nil
}

// FindCurrencyPairFormatP retrieves a single record by ID with an executor, and panics on error.
func FindCurrencyPairFormatP(exec boil.Executor, currencyPairFormatID int64, selectCols ...string) *CurrencyPairFormat {
	retobj, err := FindCurrencyPairFormat(exec, currencyPairFormatID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CurrencyPairFormat) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *CurrencyPairFormat) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *CurrencyPairFormat) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *CurrencyPairFormat) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no currency_pair_format provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(currencyPairFormatColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	currencyPairFormatInsertCacheMut.RLock()
	cache, cached := currencyPairFormatInsertCache[key]
	currencyPairFormatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			currencyPairFormatColumns,
			currencyPairFormatColumnsWithDefault,
			currencyPairFormatColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(currencyPairFormatType, currencyPairFormatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(currencyPairFormatType, currencyPairFormatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"currency_pair_format\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"currency_pair_format\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into currency_pair_format")
	}

	if !cached {
		currencyPairFormatInsertCacheMut.Lock()
		currencyPairFormatInsertCache[key] = cache
		currencyPairFormatInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single CurrencyPairFormat record. See Update for
// whitelist behavior description.
func (o *CurrencyPairFormat) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single CurrencyPairFormat record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *CurrencyPairFormat) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the CurrencyPairFormat, and panics on error.
// See Update for whitelist behavior description.
func (o *CurrencyPairFormat) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the CurrencyPairFormat.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *CurrencyPairFormat) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	currencyPairFormatUpdateCacheMut.RLock()
	cache, cached := currencyPairFormatUpdateCache[key]
	currencyPairFormatUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			currencyPairFormatColumns,
			currencyPairFormatPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update currency_pair_format, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"currency_pair_format\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, currencyPairFormatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(currencyPairFormatType, currencyPairFormatMapping, append(wl, currencyPairFormatPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update currency_pair_format row")
	}

	if !cached {
		currencyPairFormatUpdateCacheMut.Lock()
		currencyPairFormatUpdateCache[key] = cache
		currencyPairFormatUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q currencyPairFormatQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q currencyPairFormatQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for currency_pair_format")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CurrencyPairFormatSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o CurrencyPairFormatSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o CurrencyPairFormatSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurrencyPairFormatSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPairFormatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"currency_pair_format\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, currencyPairFormatPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in currencyPairFormat slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CurrencyPairFormat) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *CurrencyPairFormat) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *CurrencyPairFormat) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *CurrencyPairFormat) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no currency_pair_format provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(currencyPairFormatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	currencyPairFormatUpsertCacheMut.RLock()
	cache, cached := currencyPairFormatUpsertCache[key]
	currencyPairFormatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			currencyPairFormatColumns,
			currencyPairFormatColumnsWithDefault,
			currencyPairFormatColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			currencyPairFormatColumns,
			currencyPairFormatPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert currency_pair_format, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(currencyPairFormatPrimaryKeyColumns))
			copy(conflict, currencyPairFormatPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"currency_pair_format\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(currencyPairFormatType, currencyPairFormatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(currencyPairFormatType, currencyPairFormatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert currency_pair_format")
	}

	if !cached {
		currencyPairFormatUpsertCacheMut.Lock()
		currencyPairFormatUpsertCache[key] = cache
		currencyPairFormatUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single CurrencyPairFormat record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CurrencyPairFormat) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single CurrencyPairFormat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CurrencyPairFormat) DeleteG() error {
	if o == nil {
		return errors.New("models: no CurrencyPairFormat provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single CurrencyPairFormat record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *CurrencyPairFormat) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single CurrencyPairFormat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CurrencyPairFormat) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no CurrencyPairFormat provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), currencyPairFormatPrimaryKeyMapping)
	sql := "DELETE FROM \"currency_pair_format\" WHERE \"currency_pair_format_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from currency_pair_format")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q currencyPairFormatQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q currencyPairFormatQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no currencyPairFormatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from currency_pair_format")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o CurrencyPairFormatSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o CurrencyPairFormatSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no CurrencyPairFormat slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o CurrencyPairFormatSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurrencyPairFormatSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no CurrencyPairFormat slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPairFormatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"currency_pair_format\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currencyPairFormatPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from currencyPairFormat slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *CurrencyPairFormat) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *CurrencyPairFormat) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CurrencyPairFormat) ReloadG() error {
	if o == nil {
		return errors.New("models: no CurrencyPairFormat provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CurrencyPairFormat) Reload(exec boil.Executor) error {
	ret, err := FindCurrencyPairFormat(exec, o.CurrencyPairFormatID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CurrencyPairFormatSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CurrencyPairFormatSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrencyPairFormatSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty CurrencyPairFormatSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrencyPairFormatSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	currencyPairFormats := CurrencyPairFormatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currencyPairFormatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"currency_pair_format\".* FROM \"currency_pair_format\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currencyPairFormatPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&currencyPairFormats)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CurrencyPairFormatSlice")
	}

	*o = currencyPairFormats

	return nil
}

// CurrencyPairFormatExists checks if the CurrencyPairFormat row exists.
func CurrencyPairFormatExists(exec boil.Executor, currencyPairFormatID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"currency_pair_format\" where \"currency_pair_format_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, currencyPairFormatID)
	}

	row := exec.QueryRow(sql, currencyPairFormatID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if currency_pair_format exists")
	}

	return exists, nil
}

// CurrencyPairFormatExistsG checks if the CurrencyPairFormat row exists.
func CurrencyPairFormatExistsG(currencyPairFormatID int64) (bool, error) {
	return CurrencyPairFormatExists(boil.GetDB(), currencyPairFormatID)
}

// CurrencyPairFormatExistsGP checks if the CurrencyPairFormat row exists. Panics on error.
func CurrencyPairFormatExistsGP(currencyPairFormatID int64) bool {
	e, err := CurrencyPairFormatExists(boil.GetDB(), currencyPairFormatID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// CurrencyPairFormatExistsP checks if the CurrencyPairFormat row exists. Panics on error.
func CurrencyPairFormatExistsP(exec boil.Executor, currencyPairFormatID int64) bool {
	e, err := CurrencyPairFormatExists(exec, currencyPairFormatID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
