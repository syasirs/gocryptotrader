// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Webserver is an object representing the database table.
type Webserver struct {
	WebserverID                  int64  `boil:"webserver_id" json:"webserver_id" toml:"webserver_id" yaml:"webserver_id"`
	ConfigID                     int64  `boil:"config_id" json:"config_id" toml:"config_id" yaml:"config_id"`
	Enabled                      bool   `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	AdminUsername                string `boil:"admin_username" json:"admin_username" toml:"admin_username" yaml:"admin_username"`
	AdminPassword                string `boil:"admin_password" json:"admin_password" toml:"admin_password" yaml:"admin_password"`
	ListenAddress                string `boil:"listen_address" json:"listen_address" toml:"listen_address" yaml:"listen_address"`
	WebsocketConnectionLimit     int    `boil:"websocket_connection_limit" json:"websocket_connection_limit" toml:"websocket_connection_limit" yaml:"websocket_connection_limit"`
	WebsocketAllowInsecureOrigin bool   `boil:"websocket_allow_insecure_origin" json:"websocket_allow_insecure_origin" toml:"websocket_allow_insecure_origin" yaml:"websocket_allow_insecure_origin"`

	R *webserverR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L webserverL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WebserverColumns = struct {
	WebserverID                  string
	ConfigID                     string
	Enabled                      string
	AdminUsername                string
	AdminPassword                string
	ListenAddress                string
	WebsocketConnectionLimit     string
	WebsocketAllowInsecureOrigin string
}{
	WebserverID:                  "webserver_id",
	ConfigID:                     "config_id",
	Enabled:                      "enabled",
	AdminUsername:                "admin_username",
	AdminPassword:                "admin_password",
	ListenAddress:                "listen_address",
	WebsocketConnectionLimit:     "websocket_connection_limit",
	WebsocketAllowInsecureOrigin: "websocket_allow_insecure_origin",
}

// webserverR is where relationships are stored.
type webserverR struct {
}

// webserverL is where Load methods for each relationship are stored.
type webserverL struct{}

var (
	webserverColumns               = []string{"webserver_id", "config_id", "enabled", "admin_username", "admin_password", "listen_address", "websocket_connection_limit", "websocket_allow_insecure_origin"}
	webserverColumnsWithoutDefault = []string{"webserver_id", "config_id", "enabled", "admin_username", "admin_password", "listen_address", "websocket_connection_limit", "websocket_allow_insecure_origin"}
	webserverColumnsWithDefault    = []string{}
	webserverPrimaryKeyColumns     = []string{"webserver_id"}
)

type (
	// WebserverSlice is an alias for a slice of pointers to Webserver.
	// This should generally be used opposed to []Webserver.
	WebserverSlice []*Webserver

	webserverQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	webserverType                 = reflect.TypeOf(&Webserver{})
	webserverMapping              = queries.MakeStructMapping(webserverType)
	webserverPrimaryKeyMapping, _ = queries.BindMapping(webserverType, webserverMapping, webserverPrimaryKeyColumns)
	webserverInsertCacheMut       sync.RWMutex
	webserverInsertCache          = make(map[string]insertCache)
	webserverUpdateCacheMut       sync.RWMutex
	webserverUpdateCache          = make(map[string]updateCache)
	webserverUpsertCacheMut       sync.RWMutex
	webserverUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single webserver record from the query, and panics on error.
func (q webserverQuery) OneP() *Webserver {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single webserver record from the query.
func (q webserverQuery) One() (*Webserver, error) {
	o := &Webserver{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for webserver")
	}

	return o, nil
}

// AllP returns all Webserver records from the query, and panics on error.
func (q webserverQuery) AllP() WebserverSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Webserver records from the query.
func (q webserverQuery) All() (WebserverSlice, error) {
	var o []*Webserver

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Webserver slice")
	}

	return o, nil
}

// CountP returns the count of all Webserver records in the query, and panics on error.
func (q webserverQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Webserver records in the query.
func (q webserverQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count webserver rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q webserverQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q webserverQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if webserver exists")
	}

	return count > 0, nil
}

// WebserversG retrieves all records.
func WebserversG(mods ...qm.QueryMod) webserverQuery {
	return Webservers(boil.GetDB(), mods...)
}

// Webservers retrieves all the records using an executor.
func Webservers(exec boil.Executor, mods ...qm.QueryMod) webserverQuery {
	mods = append(mods, qm.From("\"webserver\""))
	return webserverQuery{NewQuery(exec, mods...)}
}

// FindWebserverG retrieves a single record by ID.
func FindWebserverG(webserverID int64, selectCols ...string) (*Webserver, error) {
	return FindWebserver(boil.GetDB(), webserverID, selectCols...)
}

// FindWebserverGP retrieves a single record by ID, and panics on error.
func FindWebserverGP(webserverID int64, selectCols ...string) *Webserver {
	retobj, err := FindWebserver(boil.GetDB(), webserverID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindWebserver retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWebserver(exec boil.Executor, webserverID int64, selectCols ...string) (*Webserver, error) {
	webserverObj := &Webserver{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"webserver\" where \"webserver_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, webserverID)

	err := q.Bind(webserverObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from webserver")
	}

	return webserverObj, nil
}

// FindWebserverP retrieves a single record by ID with an executor, and panics on error.
func FindWebserverP(exec boil.Executor, webserverID int64, selectCols ...string) *Webserver {
	retobj, err := FindWebserver(exec, webserverID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Webserver) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Webserver) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Webserver) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Webserver) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no webserver provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(webserverColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	webserverInsertCacheMut.RLock()
	cache, cached := webserverInsertCache[key]
	webserverInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			webserverColumns,
			webserverColumnsWithDefault,
			webserverColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(webserverType, webserverMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(webserverType, webserverMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"webserver\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"webserver\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into webserver")
	}

	if !cached {
		webserverInsertCacheMut.Lock()
		webserverInsertCache[key] = cache
		webserverInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Webserver record. See Update for
// whitelist behavior description.
func (o *Webserver) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Webserver record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Webserver) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Webserver, and panics on error.
// See Update for whitelist behavior description.
func (o *Webserver) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Webserver.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Webserver) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	webserverUpdateCacheMut.RLock()
	cache, cached := webserverUpdateCache[key]
	webserverUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			webserverColumns,
			webserverPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update webserver, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"webserver\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, webserverPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(webserverType, webserverMapping, append(wl, webserverPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update webserver row")
	}

	if !cached {
		webserverUpdateCacheMut.Lock()
		webserverUpdateCache[key] = cache
		webserverUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q webserverQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q webserverQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for webserver")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o WebserverSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o WebserverSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o WebserverSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WebserverSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), webserverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"webserver\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, webserverPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in webserver slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Webserver) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Webserver) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Webserver) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Webserver) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no webserver provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(webserverColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	webserverUpsertCacheMut.RLock()
	cache, cached := webserverUpsertCache[key]
	webserverUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			webserverColumns,
			webserverColumnsWithDefault,
			webserverColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			webserverColumns,
			webserverPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert webserver, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(webserverPrimaryKeyColumns))
			copy(conflict, webserverPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"webserver\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(webserverType, webserverMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(webserverType, webserverMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert webserver")
	}

	if !cached {
		webserverUpsertCacheMut.Lock()
		webserverUpsertCache[key] = cache
		webserverUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single Webserver record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Webserver) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Webserver record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Webserver) DeleteG() error {
	if o == nil {
		return errors.New("models: no Webserver provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Webserver record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Webserver) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Webserver record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Webserver) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Webserver provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), webserverPrimaryKeyMapping)
	sql := "DELETE FROM \"webserver\" WHERE \"webserver_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from webserver")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q webserverQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q webserverQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no webserverQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from webserver")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o WebserverSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o WebserverSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Webserver slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o WebserverSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WebserverSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Webserver slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), webserverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"webserver\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, webserverPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from webserver slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Webserver) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Webserver) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Webserver) ReloadG() error {
	if o == nil {
		return errors.New("models: no Webserver provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Webserver) Reload(exec boil.Executor) error {
	ret, err := FindWebserver(exec, o.WebserverID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *WebserverSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *WebserverSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WebserverSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty WebserverSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WebserverSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	webservers := WebserverSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), webserverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"webserver\".* FROM \"webserver\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, webserverPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&webservers)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WebserverSlice")
	}

	*o = webservers

	return nil
}

// WebserverExists checks if the Webserver row exists.
func WebserverExists(exec boil.Executor, webserverID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"webserver\" where \"webserver_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, webserverID)
	}

	row := exec.QueryRow(sql, webserverID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if webserver exists")
	}

	return exists, nil
}

// WebserverExistsG checks if the Webserver row exists.
func WebserverExistsG(webserverID int64) (bool, error) {
	return WebserverExists(boil.GetDB(), webserverID)
}

// WebserverExistsGP checks if the Webserver row exists. Panics on error.
func WebserverExistsGP(webserverID int64) bool {
	e, err := WebserverExists(boil.GetDB(), webserverID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// WebserverExistsP checks if the Webserver row exists. Panics on error.
func WebserverExistsP(exec boil.Executor, webserverID int64) bool {
	e, err := WebserverExists(exec, webserverID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
