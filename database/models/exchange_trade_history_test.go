// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testExchangeTradeHistories(t *testing.T) {
	t.Parallel()

	query := ExchangeTradeHistories(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testExchangeTradeHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = exchangeTradeHistory.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := ExchangeTradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExchangeTradeHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ExchangeTradeHistories(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := ExchangeTradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExchangeTradeHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ExchangeTradeHistorySlice{exchangeTradeHistory}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := ExchangeTradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testExchangeTradeHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ExchangeTradeHistoryExists(tx, exchangeTradeHistory.ExchangeTradeHistoryID)
	if err != nil {
		t.Errorf("Unable to check if ExchangeTradeHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExchangeTradeHistoryExistsG to return true, but got false.")
	}
}
func testExchangeTradeHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	exchangeTradeHistoryFound, err := FindExchangeTradeHistory(tx, exchangeTradeHistory.ExchangeTradeHistoryID)
	if err != nil {
		t.Error(err)
	}

	if exchangeTradeHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}
func testExchangeTradeHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = ExchangeTradeHistories(tx).Bind(exchangeTradeHistory); err != nil {
		t.Error(err)
	}
}

func testExchangeTradeHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := ExchangeTradeHistories(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExchangeTradeHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistoryOne := &ExchangeTradeHistory{}
	exchangeTradeHistoryTwo := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistoryOne, exchangeTradeHistoryDBTypes, false, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, exchangeTradeHistoryTwo, exchangeTradeHistoryDBTypes, false, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = exchangeTradeHistoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ExchangeTradeHistories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExchangeTradeHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	exchangeTradeHistoryOne := &ExchangeTradeHistory{}
	exchangeTradeHistoryTwo := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistoryOne, exchangeTradeHistoryDBTypes, false, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, exchangeTradeHistoryTwo, exchangeTradeHistoryDBTypes, false, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = exchangeTradeHistoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ExchangeTradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testExchangeTradeHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ExchangeTradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExchangeTradeHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx, exchangeTradeHistoryColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := ExchangeTradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExchangeTradeHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = exchangeTradeHistory.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testExchangeTradeHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ExchangeTradeHistorySlice{exchangeTradeHistory}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testExchangeTradeHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := ExchangeTradeHistories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	exchangeTradeHistoryDBTypes = map[string]string{`Amount`: `double precision`, `AssetType`: `text`, `ConfigID`: `bigint`, `CurrencyPair`: `text`, `ExchangeID`: `bigint`, `ExchangeTradeHistoryID`: `bigint`, `FulfilledOn`: `timestamp without time zone`, `OrderType`: `text`, `Rate`: `double precision`}
	_                           = bytes.MinRead
)

func testExchangeTradeHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if len(exchangeTradeHistoryColumns) == len(exchangeTradeHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ExchangeTradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	if err = exchangeTradeHistory.Update(tx); err != nil {
		t.Error(err)
	}
}

func testExchangeTradeHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(exchangeTradeHistoryColumns) == len(exchangeTradeHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	exchangeTradeHistory := &ExchangeTradeHistory{}
	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := ExchangeTradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, exchangeTradeHistory, exchangeTradeHistoryDBTypes, true, exchangeTradeHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(exchangeTradeHistoryColumns, exchangeTradeHistoryPrimaryKeyColumns) {
		fields = exchangeTradeHistoryColumns
	} else {
		fields = strmangle.SetComplement(
			exchangeTradeHistoryColumns,
			exchangeTradeHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(exchangeTradeHistory))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ExchangeTradeHistorySlice{exchangeTradeHistory}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testExchangeTradeHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(exchangeTradeHistoryColumns) == len(exchangeTradeHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	exchangeTradeHistory := ExchangeTradeHistory{}
	if err = randomize.Struct(seed, &exchangeTradeHistory, exchangeTradeHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeTradeHistory.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert ExchangeTradeHistory: %s", err)
	}

	count, err := ExchangeTradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &exchangeTradeHistory, exchangeTradeHistoryDBTypes, false, exchangeTradeHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ExchangeTradeHistory struct: %s", err)
	}

	if err = exchangeTradeHistory.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert ExchangeTradeHistory: %s", err)
	}

	count, err = ExchangeTradeHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
