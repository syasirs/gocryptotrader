// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testWebservers(t *testing.T) {
	t.Parallel()

	query := Webservers(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testWebserversDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = webserver.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Webservers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWebserversQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Webservers(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Webservers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWebserversSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := WebserverSlice{webserver}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Webservers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testWebserversExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := WebserverExists(tx, webserver.WebserverID)
	if err != nil {
		t.Errorf("Unable to check if Webserver exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WebserverExistsG to return true, but got false.")
	}
}
func testWebserversFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx); err != nil {
		t.Error(err)
	}

	webserverFound, err := FindWebserver(tx, webserver.WebserverID)
	if err != nil {
		t.Error(err)
	}

	if webserverFound == nil {
		t.Error("want a record, got nil")
	}
}
func testWebserversBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Webservers(tx).Bind(webserver); err != nil {
		t.Error(err)
	}
}

func testWebserversOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Webservers(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWebserversAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webserverOne := &Webserver{}
	webserverTwo := &Webserver{}
	if err = randomize.Struct(seed, webserverOne, webserverDBTypes, false, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}
	if err = randomize.Struct(seed, webserverTwo, webserverDBTypes, false, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserverOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = webserverTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Webservers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWebserversCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	webserverOne := &Webserver{}
	webserverTwo := &Webserver{}
	if err = randomize.Struct(seed, webserverOne, webserverDBTypes, false, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}
	if err = randomize.Struct(seed, webserverTwo, webserverDBTypes, false, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserverOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = webserverTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Webservers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testWebserversInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Webservers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWebserversInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx, webserverColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Webservers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWebserversReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = webserver.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testWebserversReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := WebserverSlice{webserver}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testWebserversSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Webservers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	webserverDBTypes = map[string]string{`AdminPassword`: `text`, `AdminUsername`: `text`, `ConfigID`: `bigint`, `Enabled`: `boolean`, `ListenAddress`: `text`, `WebserverID`: `bigint`, `WebsocketAllowInsecureOrigin`: `boolean`, `WebsocketConnectionLimit`: `integer`}
	_                = bytes.MinRead
)

func testWebserversUpdate(t *testing.T) {
	t.Parallel()

	if len(webserverColumns) == len(webserverPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Webservers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	if err = webserver.Update(tx); err != nil {
		t.Error(err)
	}
}

func testWebserversSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(webserverColumns) == len(webserverPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	webserver := &Webserver{}
	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Webservers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, webserver, webserverDBTypes, true, webserverPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(webserverColumns, webserverPrimaryKeyColumns) {
		fields = webserverColumns
	} else {
		fields = strmangle.SetComplement(
			webserverColumns,
			webserverPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(webserver))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := WebserverSlice{webserver}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testWebserversUpsert(t *testing.T) {
	t.Parallel()

	if len(webserverColumns) == len(webserverPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	webserver := Webserver{}
	if err = randomize.Struct(seed, &webserver, webserverDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = webserver.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Webserver: %s", err)
	}

	count, err := Webservers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &webserver, webserverDBTypes, false, webserverPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Webserver struct: %s", err)
	}

	if err = webserver.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Webserver: %s", err)
	}

	count, err = Webservers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
