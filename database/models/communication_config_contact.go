// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// CommunicationConfigContact is an object representing the database table.
type CommunicationConfigContact struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Email       null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	PhoneNumber null.String `boil:"phone_number" json:"phone_number,omitempty" toml:"phone_number" yaml:"phone_number,omitempty"`
	Enabled     bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	ConfigID    int64       `boil:"config_id" json:"config_id" toml:"config_id" yaml:"config_id"`

	R *communicationConfigContactR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L communicationConfigContactL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CommunicationConfigContactColumns = struct {
	ID          string
	Name        string
	Email       string
	PhoneNumber string
	Enabled     string
	ConfigID    string
}{
	ID:          "id",
	Name:        "name",
	Email:       "email",
	PhoneNumber: "phone_number",
	Enabled:     "enabled",
	ConfigID:    "config_id",
}

// CommunicationConfigContactRels is where relationship names are stored.
var CommunicationConfigContactRels = struct {
	Config string
}{
	Config: "Config",
}

// communicationConfigContactR is where relationships are stored.
type communicationConfigContactR struct {
	Config *Config
}

// NewStruct creates a new relationship struct
func (*communicationConfigContactR) NewStruct() *communicationConfigContactR {
	return &communicationConfigContactR{}
}

// communicationConfigContactL is where Load methods for each relationship are stored.
type communicationConfigContactL struct{}

var (
	communicationConfigContactColumns               = []string{"id", "name", "email", "phone_number", "enabled", "config_id"}
	communicationConfigContactColumnsWithoutDefault = []string{}
	communicationConfigContactColumnsWithDefault    = []string{"id", "name", "email", "phone_number", "enabled", "config_id"}
	communicationConfigContactPrimaryKeyColumns     = []string{"id"}
)

type (
	// CommunicationConfigContactSlice is an alias for a slice of pointers to CommunicationConfigContact.
	// This should generally be used opposed to []CommunicationConfigContact.
	CommunicationConfigContactSlice []*CommunicationConfigContact
	// CommunicationConfigContactHook is the signature for custom CommunicationConfigContact hook methods
	CommunicationConfigContactHook func(context.Context, boil.ContextExecutor, *CommunicationConfigContact) error

	communicationConfigContactQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	communicationConfigContactType                 = reflect.TypeOf(&CommunicationConfigContact{})
	communicationConfigContactMapping              = queries.MakeStructMapping(communicationConfigContactType)
	communicationConfigContactPrimaryKeyMapping, _ = queries.BindMapping(communicationConfigContactType, communicationConfigContactMapping, communicationConfigContactPrimaryKeyColumns)
	communicationConfigContactInsertCacheMut       sync.RWMutex
	communicationConfigContactInsertCache          = make(map[string]insertCache)
	communicationConfigContactUpdateCacheMut       sync.RWMutex
	communicationConfigContactUpdateCache          = make(map[string]updateCache)
	communicationConfigContactUpsertCacheMut       sync.RWMutex
	communicationConfigContactUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var communicationConfigContactBeforeInsertHooks []CommunicationConfigContactHook
var communicationConfigContactBeforeUpdateHooks []CommunicationConfigContactHook
var communicationConfigContactBeforeDeleteHooks []CommunicationConfigContactHook
var communicationConfigContactBeforeUpsertHooks []CommunicationConfigContactHook

var communicationConfigContactAfterInsertHooks []CommunicationConfigContactHook
var communicationConfigContactAfterSelectHooks []CommunicationConfigContactHook
var communicationConfigContactAfterUpdateHooks []CommunicationConfigContactHook
var communicationConfigContactAfterDeleteHooks []CommunicationConfigContactHook
var communicationConfigContactAfterUpsertHooks []CommunicationConfigContactHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CommunicationConfigContact) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range communicationConfigContactBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CommunicationConfigContact) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range communicationConfigContactBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CommunicationConfigContact) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range communicationConfigContactBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CommunicationConfigContact) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range communicationConfigContactBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CommunicationConfigContact) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range communicationConfigContactAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CommunicationConfigContact) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range communicationConfigContactAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CommunicationConfigContact) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range communicationConfigContactAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CommunicationConfigContact) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range communicationConfigContactAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CommunicationConfigContact) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range communicationConfigContactAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCommunicationConfigContactHook registers your hook function for all future operations.
func AddCommunicationConfigContactHook(hookPoint boil.HookPoint, communicationConfigContactHook CommunicationConfigContactHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		communicationConfigContactBeforeInsertHooks = append(communicationConfigContactBeforeInsertHooks, communicationConfigContactHook)
	case boil.BeforeUpdateHook:
		communicationConfigContactBeforeUpdateHooks = append(communicationConfigContactBeforeUpdateHooks, communicationConfigContactHook)
	case boil.BeforeDeleteHook:
		communicationConfigContactBeforeDeleteHooks = append(communicationConfigContactBeforeDeleteHooks, communicationConfigContactHook)
	case boil.BeforeUpsertHook:
		communicationConfigContactBeforeUpsertHooks = append(communicationConfigContactBeforeUpsertHooks, communicationConfigContactHook)
	case boil.AfterInsertHook:
		communicationConfigContactAfterInsertHooks = append(communicationConfigContactAfterInsertHooks, communicationConfigContactHook)
	case boil.AfterSelectHook:
		communicationConfigContactAfterSelectHooks = append(communicationConfigContactAfterSelectHooks, communicationConfigContactHook)
	case boil.AfterUpdateHook:
		communicationConfigContactAfterUpdateHooks = append(communicationConfigContactAfterUpdateHooks, communicationConfigContactHook)
	case boil.AfterDeleteHook:
		communicationConfigContactAfterDeleteHooks = append(communicationConfigContactAfterDeleteHooks, communicationConfigContactHook)
	case boil.AfterUpsertHook:
		communicationConfigContactAfterUpsertHooks = append(communicationConfigContactAfterUpsertHooks, communicationConfigContactHook)
	}
}

// One returns a single communicationConfigContact record from the query.
func (q communicationConfigContactQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CommunicationConfigContact, error) {
	o := &CommunicationConfigContact{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for communication_config_contact")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CommunicationConfigContact records from the query.
func (q communicationConfigContactQuery) All(ctx context.Context, exec boil.ContextExecutor) (CommunicationConfigContactSlice, error) {
	var o []*CommunicationConfigContact

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CommunicationConfigContact slice")
	}

	if len(communicationConfigContactAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CommunicationConfigContact records in the query.
func (q communicationConfigContactQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count communication_config_contact rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q communicationConfigContactQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if communication_config_contact exists")
	}

	return count > 0, nil
}

// Config pointed to by the foreign key.
func (o *CommunicationConfigContact) Config(mods ...qm.QueryMod) configQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ConfigID),
	}

	queryMods = append(queryMods, mods...)

	query := Configs(queryMods...)
	queries.SetFrom(query.Query, "\"config\"")

	return query
}

// LoadConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (communicationConfigContactL) LoadConfig(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCommunicationConfigContact interface{}, mods queries.Applicator) error {
	var slice []*CommunicationConfigContact
	var object *CommunicationConfigContact

	if singular {
		object = maybeCommunicationConfigContact.(*CommunicationConfigContact)
	} else {
		slice = *maybeCommunicationConfigContact.(*[]*CommunicationConfigContact)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &communicationConfigContactR{}
		}
		args = append(args, object.ConfigID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &communicationConfigContactR{}
			}

			for _, a := range args {
				if a == obj.ConfigID {
					continue Outer
				}
			}

			args = append(args, obj.ConfigID)
		}
	}

	query := NewQuery(qm.From(`config`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Config")
	}

	var resultSlice []*Config
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config")
	}

	if len(communicationConfigContactAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Config = foreign
		if foreign.R == nil {
			foreign.R = &configR{}
		}
		foreign.R.CommunicationConfigContacts = append(foreign.R.CommunicationConfigContacts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ConfigID == foreign.ID {
				local.R.Config = foreign
				if foreign.R == nil {
					foreign.R = &configR{}
				}
				foreign.R.CommunicationConfigContacts = append(foreign.R.CommunicationConfigContacts, local)
				break
			}
		}
	}

	return nil
}

// SetConfig of the communicationConfigContact to the related item.
// Sets o.R.Config to related.
// Adds o to related.R.CommunicationConfigContacts.
func (o *CommunicationConfigContact) SetConfig(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Config) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"communication_config_contact\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"config_id"}),
		strmangle.WhereClause("\"", "\"", 0, communicationConfigContactPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ConfigID = related.ID
	if o.R == nil {
		o.R = &communicationConfigContactR{
			Config: related,
		}
	} else {
		o.R.Config = related
	}

	if related.R == nil {
		related.R = &configR{
			CommunicationConfigContacts: CommunicationConfigContactSlice{o},
		}
	} else {
		related.R.CommunicationConfigContacts = append(related.R.CommunicationConfigContacts, o)
	}

	return nil
}

// CommunicationConfigContacts retrieves all the records using an executor.
func CommunicationConfigContacts(mods ...qm.QueryMod) communicationConfigContactQuery {
	mods = append(mods, qm.From("\"communication_config_contact\""))
	return communicationConfigContactQuery{NewQuery(mods...)}
}

// FindCommunicationConfigContact retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCommunicationConfigContact(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CommunicationConfigContact, error) {
	communicationConfigContactObj := &CommunicationConfigContact{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"communication_config_contact\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, communicationConfigContactObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from communication_config_contact")
	}

	return communicationConfigContactObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CommunicationConfigContact) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no communication_config_contact provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(communicationConfigContactColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	communicationConfigContactInsertCacheMut.RLock()
	cache, cached := communicationConfigContactInsertCache[key]
	communicationConfigContactInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			communicationConfigContactColumns,
			communicationConfigContactColumnsWithDefault,
			communicationConfigContactColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(communicationConfigContactType, communicationConfigContactMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(communicationConfigContactType, communicationConfigContactMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"communication_config_contact\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"communication_config_contact\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"communication_config_contact\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, communicationConfigContactPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into communication_config_contact")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == communicationConfigContactMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for communication_config_contact")
	}

CacheNoHooks:
	if !cached {
		communicationConfigContactInsertCacheMut.Lock()
		communicationConfigContactInsertCache[key] = cache
		communicationConfigContactInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CommunicationConfigContact.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CommunicationConfigContact) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	communicationConfigContactUpdateCacheMut.RLock()
	cache, cached := communicationConfigContactUpdateCache[key]
	communicationConfigContactUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			communicationConfigContactColumns,
			communicationConfigContactPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update communication_config_contact, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"communication_config_contact\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, communicationConfigContactPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(communicationConfigContactType, communicationConfigContactMapping, append(wl, communicationConfigContactPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update communication_config_contact row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for communication_config_contact")
	}

	if !cached {
		communicationConfigContactUpdateCacheMut.Lock()
		communicationConfigContactUpdateCache[key] = cache
		communicationConfigContactUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q communicationConfigContactQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for communication_config_contact")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for communication_config_contact")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommunicationConfigContactSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), communicationConfigContactPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"communication_config_contact\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, communicationConfigContactPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in communicationConfigContact slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all communicationConfigContact")
	}
	return rowsAff, nil
}

// Delete deletes a single CommunicationConfigContact record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CommunicationConfigContact) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CommunicationConfigContact provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), communicationConfigContactPrimaryKeyMapping)
	sql := "DELETE FROM \"communication_config_contact\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from communication_config_contact")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for communication_config_contact")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q communicationConfigContactQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no communicationConfigContactQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from communication_config_contact")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for communication_config_contact")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommunicationConfigContactSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CommunicationConfigContact slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(communicationConfigContactBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), communicationConfigContactPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"communication_config_contact\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, communicationConfigContactPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from communicationConfigContact slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for communication_config_contact")
	}

	if len(communicationConfigContactAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CommunicationConfigContact) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCommunicationConfigContact(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommunicationConfigContactSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CommunicationConfigContactSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), communicationConfigContactPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"communication_config_contact\".* FROM \"communication_config_contact\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, communicationConfigContactPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CommunicationConfigContactSlice")
	}

	*o = slice

	return nil
}

// CommunicationConfigContactExists checks if the CommunicationConfigContact row exists.
func CommunicationConfigContactExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"communication_config_contact\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if communication_config_contact exists")
	}

	return exists, nil
}
