// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ForeignExchangeProviderConfig is an object representing the database table.
type ForeignExchangeProviderConfig struct {
	ID                int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name              string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Enabled           bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	Verbose           bool        `boil:"verbose" json:"verbose" toml:"verbose" yaml:"verbose"`
	RestPollingDelay  int64       `boil:"rest_polling_delay" json:"rest_polling_delay" toml:"rest_polling_delay" yaml:"rest_polling_delay"`
	APIKey            null.String `boil:"api_key" json:"api_key,omitempty" toml:"api_key" yaml:"api_key,omitempty"`
	APIKeyLevel       null.Int64  `boil:"api_key_level" json:"api_key_level,omitempty" toml:"api_key_level" yaml:"api_key_level,omitempty"`
	IsPrimaryProvider bool        `boil:"is_primary_provider" json:"is_primary_provider" toml:"is_primary_provider" yaml:"is_primary_provider"`
	ConfigID          int64       `boil:"config_id" json:"config_id" toml:"config_id" yaml:"config_id"`

	R *foreignExchangeProviderConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L foreignExchangeProviderConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ForeignExchangeProviderConfigColumns = struct {
	ID                string
	Name              string
	Enabled           string
	Verbose           string
	RestPollingDelay  string
	APIKey            string
	APIKeyLevel       string
	IsPrimaryProvider string
	ConfigID          string
}{
	ID:                "id",
	Name:              "name",
	Enabled:           "enabled",
	Verbose:           "verbose",
	RestPollingDelay:  "rest_polling_delay",
	APIKey:            "api_key",
	APIKeyLevel:       "api_key_level",
	IsPrimaryProvider: "is_primary_provider",
	ConfigID:          "config_id",
}

// ForeignExchangeProviderConfigRels is where relationship names are stored.
var ForeignExchangeProviderConfigRels = struct {
	Config string
}{
	Config: "Config",
}

// foreignExchangeProviderConfigR is where relationships are stored.
type foreignExchangeProviderConfigR struct {
	Config *Config
}

// NewStruct creates a new relationship struct
func (*foreignExchangeProviderConfigR) NewStruct() *foreignExchangeProviderConfigR {
	return &foreignExchangeProviderConfigR{}
}

// foreignExchangeProviderConfigL is where Load methods for each relationship are stored.
type foreignExchangeProviderConfigL struct{}

var (
	foreignExchangeProviderConfigColumns               = []string{"id", "name", "enabled", "verbose", "rest_polling_delay", "api_key", "api_key_level", "is_primary_provider", "config_id"}
	foreignExchangeProviderConfigColumnsWithoutDefault = []string{}
	foreignExchangeProviderConfigColumnsWithDefault    = []string{"id", "name", "enabled", "verbose", "rest_polling_delay", "api_key", "api_key_level", "is_primary_provider", "config_id"}
	foreignExchangeProviderConfigPrimaryKeyColumns     = []string{"id"}
)

type (
	// ForeignExchangeProviderConfigSlice is an alias for a slice of pointers to ForeignExchangeProviderConfig.
	// This should generally be used opposed to []ForeignExchangeProviderConfig.
	ForeignExchangeProviderConfigSlice []*ForeignExchangeProviderConfig
	// ForeignExchangeProviderConfigHook is the signature for custom ForeignExchangeProviderConfig hook methods
	ForeignExchangeProviderConfigHook func(context.Context, boil.ContextExecutor, *ForeignExchangeProviderConfig) error

	foreignExchangeProviderConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	foreignExchangeProviderConfigType                 = reflect.TypeOf(&ForeignExchangeProviderConfig{})
	foreignExchangeProviderConfigMapping              = queries.MakeStructMapping(foreignExchangeProviderConfigType)
	foreignExchangeProviderConfigPrimaryKeyMapping, _ = queries.BindMapping(foreignExchangeProviderConfigType, foreignExchangeProviderConfigMapping, foreignExchangeProviderConfigPrimaryKeyColumns)
	foreignExchangeProviderConfigInsertCacheMut       sync.RWMutex
	foreignExchangeProviderConfigInsertCache          = make(map[string]insertCache)
	foreignExchangeProviderConfigUpdateCacheMut       sync.RWMutex
	foreignExchangeProviderConfigUpdateCache          = make(map[string]updateCache)
	foreignExchangeProviderConfigUpsertCacheMut       sync.RWMutex
	foreignExchangeProviderConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var foreignExchangeProviderConfigBeforeInsertHooks []ForeignExchangeProviderConfigHook
var foreignExchangeProviderConfigBeforeUpdateHooks []ForeignExchangeProviderConfigHook
var foreignExchangeProviderConfigBeforeDeleteHooks []ForeignExchangeProviderConfigHook
var foreignExchangeProviderConfigBeforeUpsertHooks []ForeignExchangeProviderConfigHook

var foreignExchangeProviderConfigAfterInsertHooks []ForeignExchangeProviderConfigHook
var foreignExchangeProviderConfigAfterSelectHooks []ForeignExchangeProviderConfigHook
var foreignExchangeProviderConfigAfterUpdateHooks []ForeignExchangeProviderConfigHook
var foreignExchangeProviderConfigAfterDeleteHooks []ForeignExchangeProviderConfigHook
var foreignExchangeProviderConfigAfterUpsertHooks []ForeignExchangeProviderConfigHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ForeignExchangeProviderConfig) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range foreignExchangeProviderConfigBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ForeignExchangeProviderConfig) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range foreignExchangeProviderConfigBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ForeignExchangeProviderConfig) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range foreignExchangeProviderConfigBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ForeignExchangeProviderConfig) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range foreignExchangeProviderConfigBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ForeignExchangeProviderConfig) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range foreignExchangeProviderConfigAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ForeignExchangeProviderConfig) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range foreignExchangeProviderConfigAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ForeignExchangeProviderConfig) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range foreignExchangeProviderConfigAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ForeignExchangeProviderConfig) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range foreignExchangeProviderConfigAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ForeignExchangeProviderConfig) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range foreignExchangeProviderConfigAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddForeignExchangeProviderConfigHook registers your hook function for all future operations.
func AddForeignExchangeProviderConfigHook(hookPoint boil.HookPoint, foreignExchangeProviderConfigHook ForeignExchangeProviderConfigHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		foreignExchangeProviderConfigBeforeInsertHooks = append(foreignExchangeProviderConfigBeforeInsertHooks, foreignExchangeProviderConfigHook)
	case boil.BeforeUpdateHook:
		foreignExchangeProviderConfigBeforeUpdateHooks = append(foreignExchangeProviderConfigBeforeUpdateHooks, foreignExchangeProviderConfigHook)
	case boil.BeforeDeleteHook:
		foreignExchangeProviderConfigBeforeDeleteHooks = append(foreignExchangeProviderConfigBeforeDeleteHooks, foreignExchangeProviderConfigHook)
	case boil.BeforeUpsertHook:
		foreignExchangeProviderConfigBeforeUpsertHooks = append(foreignExchangeProviderConfigBeforeUpsertHooks, foreignExchangeProviderConfigHook)
	case boil.AfterInsertHook:
		foreignExchangeProviderConfigAfterInsertHooks = append(foreignExchangeProviderConfigAfterInsertHooks, foreignExchangeProviderConfigHook)
	case boil.AfterSelectHook:
		foreignExchangeProviderConfigAfterSelectHooks = append(foreignExchangeProviderConfigAfterSelectHooks, foreignExchangeProviderConfigHook)
	case boil.AfterUpdateHook:
		foreignExchangeProviderConfigAfterUpdateHooks = append(foreignExchangeProviderConfigAfterUpdateHooks, foreignExchangeProviderConfigHook)
	case boil.AfterDeleteHook:
		foreignExchangeProviderConfigAfterDeleteHooks = append(foreignExchangeProviderConfigAfterDeleteHooks, foreignExchangeProviderConfigHook)
	case boil.AfterUpsertHook:
		foreignExchangeProviderConfigAfterUpsertHooks = append(foreignExchangeProviderConfigAfterUpsertHooks, foreignExchangeProviderConfigHook)
	}
}

// One returns a single foreignExchangeProviderConfig record from the query.
func (q foreignExchangeProviderConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ForeignExchangeProviderConfig, error) {
	o := &ForeignExchangeProviderConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for foreign_exchange_provider_config")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ForeignExchangeProviderConfig records from the query.
func (q foreignExchangeProviderConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (ForeignExchangeProviderConfigSlice, error) {
	var o []*ForeignExchangeProviderConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ForeignExchangeProviderConfig slice")
	}

	if len(foreignExchangeProviderConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ForeignExchangeProviderConfig records in the query.
func (q foreignExchangeProviderConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count foreign_exchange_provider_config rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q foreignExchangeProviderConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if foreign_exchange_provider_config exists")
	}

	return count > 0, nil
}

// Config pointed to by the foreign key.
func (o *ForeignExchangeProviderConfig) Config(mods ...qm.QueryMod) configQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ConfigID),
	}

	queryMods = append(queryMods, mods...)

	query := Configs(queryMods...)
	queries.SetFrom(query.Query, "\"config\"")

	return query
}

// LoadConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (foreignExchangeProviderConfigL) LoadConfig(ctx context.Context, e boil.ContextExecutor, singular bool, maybeForeignExchangeProviderConfig interface{}, mods queries.Applicator) error {
	var slice []*ForeignExchangeProviderConfig
	var object *ForeignExchangeProviderConfig

	if singular {
		object = maybeForeignExchangeProviderConfig.(*ForeignExchangeProviderConfig)
	} else {
		slice = *maybeForeignExchangeProviderConfig.(*[]*ForeignExchangeProviderConfig)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &foreignExchangeProviderConfigR{}
		}
		args = append(args, object.ConfigID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &foreignExchangeProviderConfigR{}
			}

			for _, a := range args {
				if a == obj.ConfigID {
					continue Outer
				}
			}

			args = append(args, obj.ConfigID)
		}
	}

	query := NewQuery(qm.From(`config`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Config")
	}

	var resultSlice []*Config
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config")
	}

	if len(foreignExchangeProviderConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Config = foreign
		if foreign.R == nil {
			foreign.R = &configR{}
		}
		foreign.R.ForeignExchangeProviderConfigs = append(foreign.R.ForeignExchangeProviderConfigs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ConfigID == foreign.ID {
				local.R.Config = foreign
				if foreign.R == nil {
					foreign.R = &configR{}
				}
				foreign.R.ForeignExchangeProviderConfigs = append(foreign.R.ForeignExchangeProviderConfigs, local)
				break
			}
		}
	}

	return nil
}

// SetConfig of the foreignExchangeProviderConfig to the related item.
// Sets o.R.Config to related.
// Adds o to related.R.ForeignExchangeProviderConfigs.
func (o *ForeignExchangeProviderConfig) SetConfig(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Config) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"foreign_exchange_provider_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"config_id"}),
		strmangle.WhereClause("\"", "\"", 0, foreignExchangeProviderConfigPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ConfigID = related.ID
	if o.R == nil {
		o.R = &foreignExchangeProviderConfigR{
			Config: related,
		}
	} else {
		o.R.Config = related
	}

	if related.R == nil {
		related.R = &configR{
			ForeignExchangeProviderConfigs: ForeignExchangeProviderConfigSlice{o},
		}
	} else {
		related.R.ForeignExchangeProviderConfigs = append(related.R.ForeignExchangeProviderConfigs, o)
	}

	return nil
}

// ForeignExchangeProviderConfigs retrieves all the records using an executor.
func ForeignExchangeProviderConfigs(mods ...qm.QueryMod) foreignExchangeProviderConfigQuery {
	mods = append(mods, qm.From("\"foreign_exchange_provider_config\""))
	return foreignExchangeProviderConfigQuery{NewQuery(mods...)}
}

// FindForeignExchangeProviderConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindForeignExchangeProviderConfig(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ForeignExchangeProviderConfig, error) {
	foreignExchangeProviderConfigObj := &ForeignExchangeProviderConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"foreign_exchange_provider_config\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, foreignExchangeProviderConfigObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from foreign_exchange_provider_config")
	}

	return foreignExchangeProviderConfigObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ForeignExchangeProviderConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no foreign_exchange_provider_config provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(foreignExchangeProviderConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	foreignExchangeProviderConfigInsertCacheMut.RLock()
	cache, cached := foreignExchangeProviderConfigInsertCache[key]
	foreignExchangeProviderConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			foreignExchangeProviderConfigColumns,
			foreignExchangeProviderConfigColumnsWithDefault,
			foreignExchangeProviderConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(foreignExchangeProviderConfigType, foreignExchangeProviderConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(foreignExchangeProviderConfigType, foreignExchangeProviderConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"foreign_exchange_provider_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"foreign_exchange_provider_config\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"foreign_exchange_provider_config\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, foreignExchangeProviderConfigPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into foreign_exchange_provider_config")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == foreignExchangeProviderConfigMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for foreign_exchange_provider_config")
	}

CacheNoHooks:
	if !cached {
		foreignExchangeProviderConfigInsertCacheMut.Lock()
		foreignExchangeProviderConfigInsertCache[key] = cache
		foreignExchangeProviderConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ForeignExchangeProviderConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ForeignExchangeProviderConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	foreignExchangeProviderConfigUpdateCacheMut.RLock()
	cache, cached := foreignExchangeProviderConfigUpdateCache[key]
	foreignExchangeProviderConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			foreignExchangeProviderConfigColumns,
			foreignExchangeProviderConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update foreign_exchange_provider_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"foreign_exchange_provider_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, foreignExchangeProviderConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(foreignExchangeProviderConfigType, foreignExchangeProviderConfigMapping, append(wl, foreignExchangeProviderConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update foreign_exchange_provider_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for foreign_exchange_provider_config")
	}

	if !cached {
		foreignExchangeProviderConfigUpdateCacheMut.Lock()
		foreignExchangeProviderConfigUpdateCache[key] = cache
		foreignExchangeProviderConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q foreignExchangeProviderConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for foreign_exchange_provider_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for foreign_exchange_provider_config")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ForeignExchangeProviderConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), foreignExchangeProviderConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"foreign_exchange_provider_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, foreignExchangeProviderConfigPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in foreignExchangeProviderConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all foreignExchangeProviderConfig")
	}
	return rowsAff, nil
}

// Delete deletes a single ForeignExchangeProviderConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ForeignExchangeProviderConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ForeignExchangeProviderConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), foreignExchangeProviderConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"foreign_exchange_provider_config\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from foreign_exchange_provider_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for foreign_exchange_provider_config")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q foreignExchangeProviderConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no foreignExchangeProviderConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from foreign_exchange_provider_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for foreign_exchange_provider_config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ForeignExchangeProviderConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ForeignExchangeProviderConfig slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(foreignExchangeProviderConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), foreignExchangeProviderConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"foreign_exchange_provider_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, foreignExchangeProviderConfigPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from foreignExchangeProviderConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for foreign_exchange_provider_config")
	}

	if len(foreignExchangeProviderConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ForeignExchangeProviderConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindForeignExchangeProviderConfig(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ForeignExchangeProviderConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ForeignExchangeProviderConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), foreignExchangeProviderConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"foreign_exchange_provider_config\".* FROM \"foreign_exchange_provider_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, foreignExchangeProviderConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ForeignExchangeProviderConfigSlice")
	}

	*o = slice

	return nil
}

// ForeignExchangeProviderConfigExists checks if the ForeignExchangeProviderConfig row exists.
func ForeignExchangeProviderConfigExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"foreign_exchange_provider_config\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if foreign_exchange_provider_config exists")
	}

	return exists, nil
}
