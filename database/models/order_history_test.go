// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testOrderHistories(t *testing.T) {
	t.Parallel()

	query := OrderHistories(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testOrderHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = orderHistory.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := OrderHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = OrderHistories(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := OrderHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOrderHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OrderHistorySlice{orderHistory}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := OrderHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testOrderHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := OrderHistoryExists(tx, orderHistory.OrderHistoryID)
	if err != nil {
		t.Errorf("Unable to check if OrderHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OrderHistoryExistsG to return true, but got false.")
	}
}
func testOrderHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	orderHistoryFound, err := FindOrderHistory(tx, orderHistory.OrderHistoryID)
	if err != nil {
		t.Error(err)
	}

	if orderHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}
func testOrderHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = OrderHistories(tx).Bind(orderHistory); err != nil {
		t.Error(err)
	}
}

func testOrderHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := OrderHistories(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOrderHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderHistoryOne := &OrderHistory{}
	orderHistoryTwo := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistoryOne, orderHistoryDBTypes, false, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, orderHistoryTwo, orderHistoryDBTypes, false, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = orderHistoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := OrderHistories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOrderHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	orderHistoryOne := &OrderHistory{}
	orderHistoryTwo := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistoryOne, orderHistoryDBTypes, false, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, orderHistoryTwo, orderHistoryDBTypes, false, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = orderHistoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := OrderHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testOrderHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := OrderHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx, orderHistoryColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := OrderHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOrderHistoryToOneConfigUsingConfig(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local OrderHistory
	var foreign Config

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, orderHistoryDBTypes, false, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, configDBTypes, false, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.ConfigID = foreign.ConfigID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Config(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ConfigID != foreign.ConfigID {
		t.Errorf("want: %v, got %v", foreign.ConfigID, check.ConfigID)
	}

	slice := OrderHistorySlice{&local}
	if err = local.L.LoadConfig(tx, false, (*[]*OrderHistory)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Config == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Config = nil
	if err = local.L.LoadConfig(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Config == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testOrderHistoryToOneSetOpConfigUsingConfig(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a OrderHistory
	var b, c Config

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, orderHistoryDBTypes, false, strmangle.SetComplement(orderHistoryPrimaryKeyColumns, orderHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, configDBTypes, false, strmangle.SetComplement(configPrimaryKeyColumns, configColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, configDBTypes, false, strmangle.SetComplement(configPrimaryKeyColumns, configColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Config{&b, &c} {
		err = a.SetConfig(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Config != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrderHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ConfigID != x.ConfigID {
			t.Error("foreign key was wrong value", a.ConfigID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ConfigID))
		reflect.Indirect(reflect.ValueOf(&a.ConfigID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ConfigID != x.ConfigID {
			t.Error("foreign key was wrong value", a.ConfigID, x.ConfigID)
		}
	}
}
func testOrderHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = orderHistory.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testOrderHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := OrderHistorySlice{orderHistory}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testOrderHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := OrderHistories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	orderHistoryDBTypes = map[string]string{`Amount`: `double precision`, `AssetType`: `text`, `ConfigID`: `bigint`, `CurrencyPair`: `text`, `ExchangeID`: `text`, `FulfilledOn`: `timestamp without time zone`, `OrderHistoryID`: `bigint`, `OrderType`: `text`, `Rate`: `double precision`}
	_                   = bytes.MinRead
)

func testOrderHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if len(orderHistoryColumns) == len(orderHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := OrderHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	if err = orderHistory.Update(tx); err != nil {
		t.Error(err)
	}
}

func testOrderHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(orderHistoryColumns) == len(orderHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	orderHistory := &OrderHistory{}
	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := OrderHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, orderHistory, orderHistoryDBTypes, true, orderHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(orderHistoryColumns, orderHistoryPrimaryKeyColumns) {
		fields = orderHistoryColumns
	} else {
		fields = strmangle.SetComplement(
			orderHistoryColumns,
			orderHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(orderHistory))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := OrderHistorySlice{orderHistory}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testOrderHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(orderHistoryColumns) == len(orderHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	orderHistory := OrderHistory{}
	if err = randomize.Struct(seed, &orderHistory, orderHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = orderHistory.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert OrderHistory: %s", err)
	}

	count, err := OrderHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &orderHistory, orderHistoryDBTypes, false, orderHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize OrderHistory struct: %s", err)
	}

	if err = orderHistory.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert OrderHistory: %s", err)
	}

	count, err = OrderHistories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
