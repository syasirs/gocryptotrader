// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Exchange is an object representing the database table.
type Exchange struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	GCTUserID int         `boil:"gct_user_id" json:"gct_user_id" toml:"gct_user_id" yaml:"gct_user_id"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Enabled   bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	APIKey    null.String `boil:"api_key" json:"api_key,omitempty" toml:"api_key" yaml:"api_key,omitempty"`
	APISecret null.String `boil:"api_secret" json:"api_secret,omitempty" toml:"api_secret" yaml:"api_secret,omitempty"`

	R *exchangeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L exchangeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExchangeColumns = struct {
	ID        string
	GCTUserID string
	Name      string
	Enabled   string
	APIKey    string
	APISecret string
}{
	ID:        "id",
	GCTUserID: "gct_user_id",
	Name:      "name",
	Enabled:   "enabled",
	APIKey:    "api_key",
	APISecret: "api_secret",
}

// exchangeR is where relationships are stored.
type exchangeR struct {
	GCTUser *GCTUser
	Tickers TickerSlice
}

// exchangeL is where Load methods for each relationship are stored.
type exchangeL struct{}

var (
	exchangeColumns               = []string{"id", "gct_user_id", "name", "enabled", "api_key", "api_secret"}
	exchangeColumnsWithoutDefault = []string{"id", "gct_user_id", "name", "enabled", "api_key", "api_secret"}
	exchangeColumnsWithDefault    = []string{}
	exchangePrimaryKeyColumns     = []string{"id"}
)

type (
	// ExchangeSlice is an alias for a slice of pointers to Exchange.
	// This should generally be used opposed to []Exchange.
	ExchangeSlice []*Exchange
	// ExchangeHook is the signature for custom Exchange hook methods
	ExchangeHook func(boil.Executor, *Exchange) error

	exchangeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	exchangeType                 = reflect.TypeOf(&Exchange{})
	exchangeMapping              = queries.MakeStructMapping(exchangeType)
	exchangePrimaryKeyMapping, _ = queries.BindMapping(exchangeType, exchangeMapping, exchangePrimaryKeyColumns)
	exchangeInsertCacheMut       sync.RWMutex
	exchangeInsertCache          = make(map[string]insertCache)
	exchangeUpdateCacheMut       sync.RWMutex
	exchangeUpdateCache          = make(map[string]updateCache)
	exchangeUpsertCacheMut       sync.RWMutex
	exchangeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var exchangeBeforeInsertHooks []ExchangeHook
var exchangeBeforeUpdateHooks []ExchangeHook
var exchangeBeforeDeleteHooks []ExchangeHook
var exchangeBeforeUpsertHooks []ExchangeHook

var exchangeAfterInsertHooks []ExchangeHook
var exchangeAfterSelectHooks []ExchangeHook
var exchangeAfterUpdateHooks []ExchangeHook
var exchangeAfterDeleteHooks []ExchangeHook
var exchangeAfterUpsertHooks []ExchangeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Exchange) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Exchange) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Exchange) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Exchange) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Exchange) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Exchange) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Exchange) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Exchange) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Exchange) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range exchangeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExchangeHook registers your hook function for all future operations.
func AddExchangeHook(hookPoint boil.HookPoint, exchangeHook ExchangeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		exchangeBeforeInsertHooks = append(exchangeBeforeInsertHooks, exchangeHook)
	case boil.BeforeUpdateHook:
		exchangeBeforeUpdateHooks = append(exchangeBeforeUpdateHooks, exchangeHook)
	case boil.BeforeDeleteHook:
		exchangeBeforeDeleteHooks = append(exchangeBeforeDeleteHooks, exchangeHook)
	case boil.BeforeUpsertHook:
		exchangeBeforeUpsertHooks = append(exchangeBeforeUpsertHooks, exchangeHook)
	case boil.AfterInsertHook:
		exchangeAfterInsertHooks = append(exchangeAfterInsertHooks, exchangeHook)
	case boil.AfterSelectHook:
		exchangeAfterSelectHooks = append(exchangeAfterSelectHooks, exchangeHook)
	case boil.AfterUpdateHook:
		exchangeAfterUpdateHooks = append(exchangeAfterUpdateHooks, exchangeHook)
	case boil.AfterDeleteHook:
		exchangeAfterDeleteHooks = append(exchangeAfterDeleteHooks, exchangeHook)
	case boil.AfterUpsertHook:
		exchangeAfterUpsertHooks = append(exchangeAfterUpsertHooks, exchangeHook)
	}
}

// OneP returns a single exchange record from the query, and panics on error.
func (q exchangeQuery) OneP() *Exchange {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single exchange record from the query.
func (q exchangeQuery) One() (*Exchange, error) {
	o := &Exchange{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for exchange")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Exchange records from the query, and panics on error.
func (q exchangeQuery) AllP() ExchangeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Exchange records from the query.
func (q exchangeQuery) All() (ExchangeSlice, error) {
	var o []*Exchange

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Exchange slice")
	}

	if len(exchangeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Exchange records in the query, and panics on error.
func (q exchangeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Exchange records in the query.
func (q exchangeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count exchange rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q exchangeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q exchangeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if exchange exists")
	}

	return count > 0, nil
}

// GCTUserG pointed to by the foreign key.
func (o *Exchange) GCTUserG(mods ...qm.QueryMod) gctUserQuery {
	return o.GCTUser(boil.GetDB(), mods...)
}

// GCTUser pointed to by the foreign key.
func (o *Exchange) GCTUser(exec boil.Executor, mods ...qm.QueryMod) gctUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.GCTUserID),
	}

	queryMods = append(queryMods, mods...)

	query := GCTUsers(exec, queryMods...)
	queries.SetFrom(query.Query, "\"gct_user\"")

	return query
}

// TickersG retrieves all the ticker's ticker.
func (o *Exchange) TickersG(mods ...qm.QueryMod) tickerQuery {
	return o.Tickers(boil.GetDB(), mods...)
}

// Tickers retrieves all the ticker's ticker with an executor.
func (o *Exchange) Tickers(exec boil.Executor, mods ...qm.QueryMod) tickerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ticker\".\"exchange_id\"=?", o.ID),
	)

	query := Tickers(exec, queryMods...)
	queries.SetFrom(query.Query, "\"ticker\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ticker\".*"})
	}

	return query
}

// LoadGCTUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (exchangeL) LoadGCTUser(e boil.Executor, singular bool, maybeExchange interface{}) error {
	var slice []*Exchange
	var object *Exchange

	count := 1
	if singular {
		object = maybeExchange.(*Exchange)
	} else {
		slice = *maybeExchange.(*[]*Exchange)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &exchangeR{}
		}
		args[0] = object.GCTUserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &exchangeR{}
			}
			args[i] = obj.GCTUserID
		}
	}

	query := fmt.Sprintf(
		"select * from \"gct_user\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GCTUser")
	}
	defer results.Close()

	var resultSlice []*GCTUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GCTUser")
	}

	if len(exchangeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.GCTUser = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GCTUserID == foreign.ID {
				local.R.GCTUser = foreign
				break
			}
		}
	}

	return nil
}

// LoadTickers allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (exchangeL) LoadTickers(e boil.Executor, singular bool, maybeExchange interface{}) error {
	var slice []*Exchange
	var object *Exchange

	count := 1
	if singular {
		object = maybeExchange.(*Exchange)
	} else {
		slice = *maybeExchange.(*[]*Exchange)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &exchangeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &exchangeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"ticker\" where \"exchange_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ticker")
	}
	defer results.Close()

	var resultSlice []*Ticker
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ticker")
	}

	if len(tickerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tickers = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ExchangeID {
				local.R.Tickers = append(local.R.Tickers, foreign)
				break
			}
		}
	}

	return nil
}

// SetGCTUserG of the exchange to the related item.
// Sets o.R.GCTUser to related.
// Adds o to related.R.Exchanges.
// Uses the global database handle.
func (o *Exchange) SetGCTUserG(insert bool, related *GCTUser) error {
	return o.SetGCTUser(boil.GetDB(), insert, related)
}

// SetGCTUserP of the exchange to the related item.
// Sets o.R.GCTUser to related.
// Adds o to related.R.Exchanges.
// Panics on error.
func (o *Exchange) SetGCTUserP(exec boil.Executor, insert bool, related *GCTUser) {
	if err := o.SetGCTUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGCTUserGP of the exchange to the related item.
// Sets o.R.GCTUser to related.
// Adds o to related.R.Exchanges.
// Uses the global database handle and panics on error.
func (o *Exchange) SetGCTUserGP(insert bool, related *GCTUser) {
	if err := o.SetGCTUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGCTUser of the exchange to the related item.
// Sets o.R.GCTUser to related.
// Adds o to related.R.Exchanges.
func (o *Exchange) SetGCTUser(exec boil.Executor, insert bool, related *GCTUser) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"exchange\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"gct_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, exchangePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GCTUserID = related.ID

	if o.R == nil {
		o.R = &exchangeR{
			GCTUser: related,
		}
	} else {
		o.R.GCTUser = related
	}

	if related.R == nil {
		related.R = &gctUserR{
			Exchanges: ExchangeSlice{o},
		}
	} else {
		related.R.Exchanges = append(related.R.Exchanges, o)
	}

	return nil
}

// AddTickersG adds the given related objects to the existing relationships
// of the exchange, optionally inserting them as new records.
// Appends related to o.R.Tickers.
// Sets related.R.Exchange appropriately.
// Uses the global database handle.
func (o *Exchange) AddTickersG(insert bool, related ...*Ticker) error {
	return o.AddTickers(boil.GetDB(), insert, related...)
}

// AddTickersP adds the given related objects to the existing relationships
// of the exchange, optionally inserting them as new records.
// Appends related to o.R.Tickers.
// Sets related.R.Exchange appropriately.
// Panics on error.
func (o *Exchange) AddTickersP(exec boil.Executor, insert bool, related ...*Ticker) {
	if err := o.AddTickers(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTickersGP adds the given related objects to the existing relationships
// of the exchange, optionally inserting them as new records.
// Appends related to o.R.Tickers.
// Sets related.R.Exchange appropriately.
// Uses the global database handle and panics on error.
func (o *Exchange) AddTickersGP(insert bool, related ...*Ticker) {
	if err := o.AddTickers(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTickers adds the given related objects to the existing relationships
// of the exchange, optionally inserting them as new records.
// Appends related to o.R.Tickers.
// Sets related.R.Exchange appropriately.
func (o *Exchange) AddTickers(exec boil.Executor, insert bool, related ...*Ticker) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ExchangeID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ticker\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"exchange_id"}),
				strmangle.WhereClause("\"", "\"", 2, tickerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ExchangeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &exchangeR{
			Tickers: related,
		}
	} else {
		o.R.Tickers = append(o.R.Tickers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tickerR{
				Exchange: o,
			}
		} else {
			rel.R.Exchange = o
		}
	}
	return nil
}

// ExchangesG retrieves all records.
func ExchangesG(mods ...qm.QueryMod) exchangeQuery {
	return Exchanges(boil.GetDB(), mods...)
}

// Exchanges retrieves all the records using an executor.
func Exchanges(exec boil.Executor, mods ...qm.QueryMod) exchangeQuery {
	mods = append(mods, qm.From("\"exchange\""))
	return exchangeQuery{NewQuery(exec, mods...)}
}

// FindExchangeG retrieves a single record by ID.
func FindExchangeG(id int, selectCols ...string) (*Exchange, error) {
	return FindExchange(boil.GetDB(), id, selectCols...)
}

// FindExchangeGP retrieves a single record by ID, and panics on error.
func FindExchangeGP(id int, selectCols ...string) *Exchange {
	retobj, err := FindExchange(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindExchange retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExchange(exec boil.Executor, id int, selectCols ...string) (*Exchange, error) {
	exchangeObj := &Exchange{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"exchange\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(exchangeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from exchange")
	}

	return exchangeObj, nil
}

// FindExchangeP retrieves a single record by ID with an executor, and panics on error.
func FindExchangeP(exec boil.Executor, id int, selectCols ...string) *Exchange {
	retobj, err := FindExchange(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Exchange) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Exchange) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Exchange) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Exchange) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no exchange provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exchangeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	exchangeInsertCacheMut.RLock()
	cache, cached := exchangeInsertCache[key]
	exchangeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			exchangeColumns,
			exchangeColumnsWithDefault,
			exchangeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(exchangeType, exchangeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(exchangeType, exchangeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"exchange\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"exchange\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into exchange")
	}

	if !cached {
		exchangeInsertCacheMut.Lock()
		exchangeInsertCache[key] = cache
		exchangeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Exchange record. See Update for
// whitelist behavior description.
func (o *Exchange) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Exchange record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Exchange) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Exchange, and panics on error.
// See Update for whitelist behavior description.
func (o *Exchange) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Exchange.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Exchange) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	exchangeUpdateCacheMut.RLock()
	cache, cached := exchangeUpdateCache[key]
	exchangeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			exchangeColumns,
			exchangePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update exchange, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"exchange\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, exchangePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(exchangeType, exchangeMapping, append(wl, exchangePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update exchange row")
	}

	if !cached {
		exchangeUpdateCacheMut.Lock()
		exchangeUpdateCache[key] = cache
		exchangeUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q exchangeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q exchangeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for exchange")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ExchangeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ExchangeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ExchangeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExchangeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"exchange\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, exchangePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in exchange slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Exchange) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Exchange) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Exchange) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Exchange) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no exchange provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exchangeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	exchangeUpsertCacheMut.RLock()
	cache, cached := exchangeUpsertCache[key]
	exchangeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			exchangeColumns,
			exchangeColumnsWithDefault,
			exchangeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			exchangeColumns,
			exchangePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert exchange, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(exchangePrimaryKeyColumns))
			copy(conflict, exchangePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"exchange\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(exchangeType, exchangeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(exchangeType, exchangeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert exchange")
	}

	if !cached {
		exchangeUpsertCacheMut.Lock()
		exchangeUpsertCache[key] = cache
		exchangeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Exchange record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Exchange) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Exchange record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Exchange) DeleteG() error {
	if o == nil {
		return errors.New("models: no Exchange provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Exchange record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Exchange) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Exchange record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Exchange) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Exchange provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), exchangePrimaryKeyMapping)
	sql := "DELETE FROM \"exchange\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from exchange")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q exchangeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q exchangeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no exchangeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from exchange")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ExchangeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ExchangeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Exchange slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ExchangeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExchangeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Exchange slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(exchangeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"exchange\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, exchangePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from exchange slice")
	}

	if len(exchangeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Exchange) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Exchange) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Exchange) ReloadG() error {
	if o == nil {
		return errors.New("models: no Exchange provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Exchange) Reload(exec boil.Executor) error {
	ret, err := FindExchange(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ExchangeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ExchangeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExchangeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ExchangeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExchangeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	exchanges := ExchangeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"exchange\".* FROM \"exchange\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, exchangePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&exchanges)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExchangeSlice")
	}

	*o = exchanges

	return nil
}

// ExchangeExists checks if the Exchange row exists.
func ExchangeExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"exchange\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if exchange exists")
	}

	return exists, nil
}

// ExchangeExistsG checks if the Exchange row exists.
func ExchangeExistsG(id int) (bool, error) {
	return ExchangeExists(boil.GetDB(), id)
}

// ExchangeExistsGP checks if the Exchange row exists. Panics on error.
func ExchangeExistsGP(id int) bool {
	e, err := ExchangeExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExchangeExistsP checks if the Exchange row exists. Panics on error.
func ExchangeExistsP(exec boil.Executor, id int) bool {
	e, err := ExchangeExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
