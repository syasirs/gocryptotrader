// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testExchanges(t *testing.T) {
	t.Parallel()

	query := Exchanges(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testExchangesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = exchange.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Exchanges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExchangesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Exchanges(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Exchanges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testExchangesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ExchangeSlice{exchange}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Exchanges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testExchangesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ExchangeExists(tx, exchange.ExchangeID)
	if err != nil {
		t.Errorf("Unable to check if Exchange exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ExchangeExistsG to return true, but got false.")
	}
}
func testExchangesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx); err != nil {
		t.Error(err)
	}

	exchangeFound, err := FindExchange(tx, exchange.ExchangeID)
	if err != nil {
		t.Error(err)
	}

	if exchangeFound == nil {
		t.Error("want a record, got nil")
	}
}
func testExchangesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Exchanges(tx).Bind(exchange); err != nil {
		t.Error(err)
	}
}

func testExchangesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Exchanges(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testExchangesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchangeOne := &Exchange{}
	exchangeTwo := &Exchange{}
	if err = randomize.Struct(seed, exchangeOne, exchangeDBTypes, false, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}
	if err = randomize.Struct(seed, exchangeTwo, exchangeDBTypes, false, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = exchangeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Exchanges(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testExchangesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	exchangeOne := &Exchange{}
	exchangeTwo := &Exchange{}
	if err = randomize.Struct(seed, exchangeOne, exchangeDBTypes, false, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}
	if err = randomize.Struct(seed, exchangeTwo, exchangeDBTypes, false, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchangeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = exchangeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Exchanges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testExchangesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Exchanges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExchangesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx, exchangeColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Exchanges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testExchangeToManyCurrencyPairFormats(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Exchange
	var b, c CurrencyPairFormat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, currencyPairFormatDBTypes, false, currencyPairFormatColumnsWithDefault...)
	randomize.Struct(seed, &c, currencyPairFormatDBTypes, false, currencyPairFormatColumnsWithDefault...)

	b.ExchangeID = a.ExchangeID
	c.ExchangeID = a.ExchangeID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	currencyPairFormat, err := a.CurrencyPairFormats(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range currencyPairFormat {
		if v.ExchangeID == b.ExchangeID {
			bFound = true
		}
		if v.ExchangeID == c.ExchangeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ExchangeSlice{&a}
	if err = a.L.LoadCurrencyPairFormats(tx, false, (*[]*Exchange)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CurrencyPairFormats); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CurrencyPairFormats = nil
	if err = a.L.LoadCurrencyPairFormats(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CurrencyPairFormats); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", currencyPairFormat)
	}
}

func testExchangeToManyAddOpCurrencyPairFormats(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Exchange
	var b, c, d, e CurrencyPairFormat

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, exchangeDBTypes, false, strmangle.SetComplement(exchangePrimaryKeyColumns, exchangeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CurrencyPairFormat{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, currencyPairFormatDBTypes, false, strmangle.SetComplement(currencyPairFormatPrimaryKeyColumns, currencyPairFormatColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CurrencyPairFormat{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCurrencyPairFormats(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ExchangeID != first.ExchangeID {
			t.Error("foreign key was wrong value", a.ExchangeID, first.ExchangeID)
		}
		if a.ExchangeID != second.ExchangeID {
			t.Error("foreign key was wrong value", a.ExchangeID, second.ExchangeID)
		}

		if first.R.Exchange != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Exchange != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CurrencyPairFormats[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CurrencyPairFormats[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CurrencyPairFormats(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testExchangesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = exchange.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testExchangesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ExchangeSlice{exchange}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testExchangesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Exchanges(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	exchangeDBTypes = map[string]string{`APIKey`: `text`, `APISecret`: `text`, `AssetTypes`: `text`, `AuthenticatedAPISupport`: `boolean`, `AvailablePairs`: `text`, `BaseCurrencies`: `text`, `ClientID`: `text`, `ConfigID`: `bigint`, `Enabled`: `boolean`, `EnabledPairs`: `text`, `ExchangeID`: `bigint`, `ExchangeName`: `text`, `HTTPTimeout`: `bigint`, `IsVerbose`: `boolean`, `PairsLastUpdated`: `timestamp with time zone`, `RestPollingDelay`: `bigint`, `SupportedAutoPairUpdates`: `boolean`, `UseSandbox`: `boolean`, `Websocket`: `boolean`}
	_               = bytes.MinRead
)

func testExchangesUpdate(t *testing.T) {
	t.Parallel()

	if len(exchangeColumns) == len(exchangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Exchanges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	if err = exchange.Update(tx); err != nil {
		t.Error(err)
	}
}

func testExchangesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(exchangeColumns) == len(exchangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	exchange := &Exchange{}
	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Exchanges(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, exchange, exchangeDBTypes, true, exchangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(exchangeColumns, exchangePrimaryKeyColumns) {
		fields = exchangeColumns
	} else {
		fields = strmangle.SetComplement(
			exchangeColumns,
			exchangePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(exchange))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ExchangeSlice{exchange}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testExchangesUpsert(t *testing.T) {
	t.Parallel()

	if len(exchangeColumns) == len(exchangePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	exchange := Exchange{}
	if err = randomize.Struct(seed, &exchange, exchangeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = exchange.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Exchange: %s", err)
	}

	count, err := Exchanges(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &exchange, exchangeDBTypes, false, exchangePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	if err = exchange.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Exchange: %s", err)
	}

	count, err = Exchanges(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
