// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Portfolio is an object representing the database table.
type Portfolio struct {
	ID       int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	ConfigID int64 `boil:"config_id" json:"config_id" toml:"config_id" yaml:"config_id"`

	R *portfolioR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L portfolioL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PortfolioColumns = struct {
	ID       string
	ConfigID string
}{
	ID:       "id",
	ConfigID: "config_id",
}

// PortfolioRels is where relationship names are stored.
var PortfolioRels = struct {
	Config                           string
	CryptocurrencyPortfolioAddresses string
	ExchangePortfolioOrderHistories  string
}{
	Config: "Config",
	CryptocurrencyPortfolioAddresses: "CryptocurrencyPortfolioAddresses",
	ExchangePortfolioOrderHistories:  "ExchangePortfolioOrderHistories",
}

// portfolioR is where relationships are stored.
type portfolioR struct {
	Config                           *Config
	CryptocurrencyPortfolioAddresses CryptocurrencyPortfolioAddressSlice
	ExchangePortfolioOrderHistories  ExchangePortfolioOrderHistorySlice
}

// NewStruct creates a new relationship struct
func (*portfolioR) NewStruct() *portfolioR {
	return &portfolioR{}
}

// portfolioL is where Load methods for each relationship are stored.
type portfolioL struct{}

var (
	portfolioColumns               = []string{"id", "config_id"}
	portfolioColumnsWithoutDefault = []string{}
	portfolioColumnsWithDefault    = []string{"id", "config_id"}
	portfolioPrimaryKeyColumns     = []string{"id"}
)

type (
	// PortfolioSlice is an alias for a slice of pointers to Portfolio.
	// This should generally be used opposed to []Portfolio.
	PortfolioSlice []*Portfolio
	// PortfolioHook is the signature for custom Portfolio hook methods
	PortfolioHook func(context.Context, boil.ContextExecutor, *Portfolio) error

	portfolioQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	portfolioType                 = reflect.TypeOf(&Portfolio{})
	portfolioMapping              = queries.MakeStructMapping(portfolioType)
	portfolioPrimaryKeyMapping, _ = queries.BindMapping(portfolioType, portfolioMapping, portfolioPrimaryKeyColumns)
	portfolioInsertCacheMut       sync.RWMutex
	portfolioInsertCache          = make(map[string]insertCache)
	portfolioUpdateCacheMut       sync.RWMutex
	portfolioUpdateCache          = make(map[string]updateCache)
	portfolioUpsertCacheMut       sync.RWMutex
	portfolioUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var portfolioBeforeInsertHooks []PortfolioHook
var portfolioBeforeUpdateHooks []PortfolioHook
var portfolioBeforeDeleteHooks []PortfolioHook
var portfolioBeforeUpsertHooks []PortfolioHook

var portfolioAfterInsertHooks []PortfolioHook
var portfolioAfterSelectHooks []PortfolioHook
var portfolioAfterUpdateHooks []PortfolioHook
var portfolioAfterDeleteHooks []PortfolioHook
var portfolioAfterUpsertHooks []PortfolioHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Portfolio) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range portfolioBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Portfolio) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range portfolioBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Portfolio) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range portfolioBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Portfolio) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range portfolioBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Portfolio) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range portfolioAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Portfolio) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range portfolioAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Portfolio) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range portfolioAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Portfolio) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range portfolioAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Portfolio) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range portfolioAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPortfolioHook registers your hook function for all future operations.
func AddPortfolioHook(hookPoint boil.HookPoint, portfolioHook PortfolioHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		portfolioBeforeInsertHooks = append(portfolioBeforeInsertHooks, portfolioHook)
	case boil.BeforeUpdateHook:
		portfolioBeforeUpdateHooks = append(portfolioBeforeUpdateHooks, portfolioHook)
	case boil.BeforeDeleteHook:
		portfolioBeforeDeleteHooks = append(portfolioBeforeDeleteHooks, portfolioHook)
	case boil.BeforeUpsertHook:
		portfolioBeforeUpsertHooks = append(portfolioBeforeUpsertHooks, portfolioHook)
	case boil.AfterInsertHook:
		portfolioAfterInsertHooks = append(portfolioAfterInsertHooks, portfolioHook)
	case boil.AfterSelectHook:
		portfolioAfterSelectHooks = append(portfolioAfterSelectHooks, portfolioHook)
	case boil.AfterUpdateHook:
		portfolioAfterUpdateHooks = append(portfolioAfterUpdateHooks, portfolioHook)
	case boil.AfterDeleteHook:
		portfolioAfterDeleteHooks = append(portfolioAfterDeleteHooks, portfolioHook)
	case boil.AfterUpsertHook:
		portfolioAfterUpsertHooks = append(portfolioAfterUpsertHooks, portfolioHook)
	}
}

// One returns a single portfolio record from the query.
func (q portfolioQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Portfolio, error) {
	o := &Portfolio{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for portfolio")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Portfolio records from the query.
func (q portfolioQuery) All(ctx context.Context, exec boil.ContextExecutor) (PortfolioSlice, error) {
	var o []*Portfolio

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Portfolio slice")
	}

	if len(portfolioAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Portfolio records in the query.
func (q portfolioQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count portfolio rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q portfolioQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if portfolio exists")
	}

	return count > 0, nil
}

// Config pointed to by the foreign key.
func (o *Portfolio) Config(mods ...qm.QueryMod) configQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ConfigID),
	}

	queryMods = append(queryMods, mods...)

	query := Configs(queryMods...)
	queries.SetFrom(query.Query, "\"config\"")

	return query
}

// CryptocurrencyPortfolioAddresses retrieves all the cryptocurrency_portfolio_address's CryptocurrencyPortfolioAddresses with an executor.
func (o *Portfolio) CryptocurrencyPortfolioAddresses(mods ...qm.QueryMod) cryptocurrencyPortfolioAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cryptocurrency_portfolio_address\".\"portfolio_id\"=?", o.ID),
	)

	query := CryptocurrencyPortfolioAddresses(queryMods...)
	queries.SetFrom(query.Query, "\"cryptocurrency_portfolio_address\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cryptocurrency_portfolio_address\".*"})
	}

	return query
}

// ExchangePortfolioOrderHistories retrieves all the exchange_portfolio_order_history's ExchangePortfolioOrderHistories with an executor.
func (o *Portfolio) ExchangePortfolioOrderHistories(mods ...qm.QueryMod) exchangePortfolioOrderHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"exchange_portfolio_order_history\".\"portfolio_id\"=?", o.ID),
	)

	query := ExchangePortfolioOrderHistories(queryMods...)
	queries.SetFrom(query.Query, "\"exchange_portfolio_order_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"exchange_portfolio_order_history\".*"})
	}

	return query
}

// LoadConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (portfolioL) LoadConfig(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortfolio interface{}, mods queries.Applicator) error {
	var slice []*Portfolio
	var object *Portfolio

	if singular {
		object = maybePortfolio.(*Portfolio)
	} else {
		slice = *maybePortfolio.(*[]*Portfolio)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portfolioR{}
		}
		args = append(args, object.ConfigID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portfolioR{}
			}

			for _, a := range args {
				if a == obj.ConfigID {
					continue Outer
				}
			}

			args = append(args, obj.ConfigID)
		}
	}

	query := NewQuery(qm.From(`config`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Config")
	}

	var resultSlice []*Config
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config")
	}

	if len(portfolioAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Config = foreign
		if foreign.R == nil {
			foreign.R = &configR{}
		}
		foreign.R.Portfolios = append(foreign.R.Portfolios, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ConfigID == foreign.ID {
				local.R.Config = foreign
				if foreign.R == nil {
					foreign.R = &configR{}
				}
				foreign.R.Portfolios = append(foreign.R.Portfolios, local)
				break
			}
		}
	}

	return nil
}

// LoadCryptocurrencyPortfolioAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (portfolioL) LoadCryptocurrencyPortfolioAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortfolio interface{}, mods queries.Applicator) error {
	var slice []*Portfolio
	var object *Portfolio

	if singular {
		object = maybePortfolio.(*Portfolio)
	} else {
		slice = *maybePortfolio.(*[]*Portfolio)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portfolioR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portfolioR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`cryptocurrency_portfolio_address`), qm.WhereIn(`portfolio_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cryptocurrency_portfolio_address")
	}

	var resultSlice []*CryptocurrencyPortfolioAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cryptocurrency_portfolio_address")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cryptocurrency_portfolio_address")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cryptocurrency_portfolio_address")
	}

	if len(cryptocurrencyPortfolioAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CryptocurrencyPortfolioAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cryptocurrencyPortfolioAddressR{}
			}
			foreign.R.Portfolio = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PortfolioID {
				local.R.CryptocurrencyPortfolioAddresses = append(local.R.CryptocurrencyPortfolioAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &cryptocurrencyPortfolioAddressR{}
				}
				foreign.R.Portfolio = local
				break
			}
		}
	}

	return nil
}

// LoadExchangePortfolioOrderHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (portfolioL) LoadExchangePortfolioOrderHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybePortfolio interface{}, mods queries.Applicator) error {
	var slice []*Portfolio
	var object *Portfolio

	if singular {
		object = maybePortfolio.(*Portfolio)
	} else {
		slice = *maybePortfolio.(*[]*Portfolio)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &portfolioR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &portfolioR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`exchange_portfolio_order_history`), qm.WhereIn(`portfolio_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load exchange_portfolio_order_history")
	}

	var resultSlice []*ExchangePortfolioOrderHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice exchange_portfolio_order_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on exchange_portfolio_order_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exchange_portfolio_order_history")
	}

	if len(exchangePortfolioOrderHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ExchangePortfolioOrderHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &exchangePortfolioOrderHistoryR{}
			}
			foreign.R.Portfolio = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PortfolioID {
				local.R.ExchangePortfolioOrderHistories = append(local.R.ExchangePortfolioOrderHistories, foreign)
				if foreign.R == nil {
					foreign.R = &exchangePortfolioOrderHistoryR{}
				}
				foreign.R.Portfolio = local
				break
			}
		}
	}

	return nil
}

// SetConfig of the portfolio to the related item.
// Sets o.R.Config to related.
// Adds o to related.R.Portfolios.
func (o *Portfolio) SetConfig(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Config) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"portfolio\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"config_id"}),
		strmangle.WhereClause("\"", "\"", 0, portfolioPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ConfigID = related.ID
	if o.R == nil {
		o.R = &portfolioR{
			Config: related,
		}
	} else {
		o.R.Config = related
	}

	if related.R == nil {
		related.R = &configR{
			Portfolios: PortfolioSlice{o},
		}
	} else {
		related.R.Portfolios = append(related.R.Portfolios, o)
	}

	return nil
}

// AddCryptocurrencyPortfolioAddresses adds the given related objects to the existing relationships
// of the portfolio, optionally inserting them as new records.
// Appends related to o.R.CryptocurrencyPortfolioAddresses.
// Sets related.R.Portfolio appropriately.
func (o *Portfolio) AddCryptocurrencyPortfolioAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CryptocurrencyPortfolioAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PortfolioID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cryptocurrency_portfolio_address\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"portfolio_id"}),
				strmangle.WhereClause("\"", "\"", 0, cryptocurrencyPortfolioAddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PortfolioID = o.ID
		}
	}

	if o.R == nil {
		o.R = &portfolioR{
			CryptocurrencyPortfolioAddresses: related,
		}
	} else {
		o.R.CryptocurrencyPortfolioAddresses = append(o.R.CryptocurrencyPortfolioAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cryptocurrencyPortfolioAddressR{
				Portfolio: o,
			}
		} else {
			rel.R.Portfolio = o
		}
	}
	return nil
}

// AddExchangePortfolioOrderHistories adds the given related objects to the existing relationships
// of the portfolio, optionally inserting them as new records.
// Appends related to o.R.ExchangePortfolioOrderHistories.
// Sets related.R.Portfolio appropriately.
func (o *Portfolio) AddExchangePortfolioOrderHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExchangePortfolioOrderHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PortfolioID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"exchange_portfolio_order_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"portfolio_id"}),
				strmangle.WhereClause("\"", "\"", 0, exchangePortfolioOrderHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PortfolioID = o.ID
		}
	}

	if o.R == nil {
		o.R = &portfolioR{
			ExchangePortfolioOrderHistories: related,
		}
	} else {
		o.R.ExchangePortfolioOrderHistories = append(o.R.ExchangePortfolioOrderHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &exchangePortfolioOrderHistoryR{
				Portfolio: o,
			}
		} else {
			rel.R.Portfolio = o
		}
	}
	return nil
}

// Portfolios retrieves all the records using an executor.
func Portfolios(mods ...qm.QueryMod) portfolioQuery {
	mods = append(mods, qm.From("\"portfolio\""))
	return portfolioQuery{NewQuery(mods...)}
}

// FindPortfolio retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPortfolio(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Portfolio, error) {
	portfolioObj := &Portfolio{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"portfolio\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, portfolioObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from portfolio")
	}

	return portfolioObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Portfolio) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no portfolio provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(portfolioColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	portfolioInsertCacheMut.RLock()
	cache, cached := portfolioInsertCache[key]
	portfolioInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			portfolioColumns,
			portfolioColumnsWithDefault,
			portfolioColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(portfolioType, portfolioMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(portfolioType, portfolioMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"portfolio\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"portfolio\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"portfolio\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, portfolioPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into portfolio")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == portfolioMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for portfolio")
	}

CacheNoHooks:
	if !cached {
		portfolioInsertCacheMut.Lock()
		portfolioInsertCache[key] = cache
		portfolioInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Portfolio.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Portfolio) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	portfolioUpdateCacheMut.RLock()
	cache, cached := portfolioUpdateCache[key]
	portfolioUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			portfolioColumns,
			portfolioPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update portfolio, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"portfolio\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, portfolioPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(portfolioType, portfolioMapping, append(wl, portfolioPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update portfolio row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for portfolio")
	}

	if !cached {
		portfolioUpdateCacheMut.Lock()
		portfolioUpdateCache[key] = cache
		portfolioUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q portfolioQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for portfolio")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for portfolio")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PortfolioSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portfolioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"portfolio\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portfolioPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in portfolio slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all portfolio")
	}
	return rowsAff, nil
}

// Delete deletes a single Portfolio record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Portfolio) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Portfolio provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), portfolioPrimaryKeyMapping)
	sql := "DELETE FROM \"portfolio\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from portfolio")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for portfolio")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q portfolioQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no portfolioQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from portfolio")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for portfolio")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PortfolioSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Portfolio slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(portfolioBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portfolioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"portfolio\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portfolioPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from portfolio slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for portfolio")
	}

	if len(portfolioAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Portfolio) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPortfolio(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PortfolioSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PortfolioSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), portfolioPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"portfolio\".* FROM \"portfolio\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, portfolioPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PortfolioSlice")
	}

	*o = slice

	return nil
}

// PortfolioExists checks if the Portfolio row exists.
func PortfolioExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"portfolio\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if portfolio exists")
	}

	return exists, nil
}
