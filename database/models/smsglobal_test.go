// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSmsglobals(t *testing.T) {
	t.Parallel()

	query := Smsglobals(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSmsglobalsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = smsglobal.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Smsglobals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSmsglobalsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Smsglobals(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Smsglobals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSmsglobalsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SmsglobalSlice{smsglobal}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Smsglobals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSmsglobalsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SmsglobalExists(tx, smsglobal.SmsglobalID)
	if err != nil {
		t.Errorf("Unable to check if Smsglobal exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SmsglobalExistsG to return true, but got false.")
	}
}
func testSmsglobalsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx); err != nil {
		t.Error(err)
	}

	smsglobalFound, err := FindSmsglobal(tx, smsglobal.SmsglobalID)
	if err != nil {
		t.Error(err)
	}

	if smsglobalFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSmsglobalsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Smsglobals(tx).Bind(smsglobal); err != nil {
		t.Error(err)
	}
}

func testSmsglobalsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Smsglobals(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSmsglobalsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalOne := &Smsglobal{}
	smsglobalTwo := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobalOne, smsglobalDBTypes, false, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}
	if err = randomize.Struct(seed, smsglobalTwo, smsglobalDBTypes, false, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = smsglobalTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Smsglobals(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSmsglobalsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	smsglobalOne := &Smsglobal{}
	smsglobalTwo := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobalOne, smsglobalDBTypes, false, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}
	if err = randomize.Struct(seed, smsglobalTwo, smsglobalDBTypes, false, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = smsglobalTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Smsglobals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testSmsglobalsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Smsglobals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSmsglobalsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx, smsglobalColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Smsglobals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSmsglobalsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = smsglobal.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSmsglobalsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SmsglobalSlice{smsglobal}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSmsglobalsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Smsglobals(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	smsglobalDBTypes = map[string]string{`ConfigID`: `bigint`, `Enabled`: `boolean`, `Password`: `text`, `SmsglobalID`: `bigint`, `Username`: `text`}
	_                = bytes.MinRead
)

func testSmsglobalsUpdate(t *testing.T) {
	t.Parallel()

	if len(smsglobalColumns) == len(smsglobalPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Smsglobals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	if err = smsglobal.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSmsglobalsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(smsglobalColumns) == len(smsglobalPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	smsglobal := &Smsglobal{}
	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Smsglobals(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, smsglobal, smsglobalDBTypes, true, smsglobalPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(smsglobalColumns, smsglobalPrimaryKeyColumns) {
		fields = smsglobalColumns
	} else {
		fields = strmangle.SetComplement(
			smsglobalColumns,
			smsglobalPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(smsglobal))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SmsglobalSlice{smsglobal}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSmsglobalsUpsert(t *testing.T) {
	t.Parallel()

	if len(smsglobalColumns) == len(smsglobalPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	smsglobal := Smsglobal{}
	if err = randomize.Struct(seed, &smsglobal, smsglobalDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobal.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Smsglobal: %s", err)
	}

	count, err := Smsglobals(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &smsglobal, smsglobalDBTypes, false, smsglobalPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Smsglobal struct: %s", err)
	}

	if err = smsglobal.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Smsglobal: %s", err)
	}

	count, err = Smsglobals(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
