// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testCurrencyPairFormats(t *testing.T) {
	t.Parallel()

	query := CurrencyPairFormats(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testCurrencyPairFormatsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = currencyPairFormat.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := CurrencyPairFormats(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCurrencyPairFormatsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = CurrencyPairFormats(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := CurrencyPairFormats(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCurrencyPairFormatsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CurrencyPairFormatSlice{currencyPairFormat}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := CurrencyPairFormats(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testCurrencyPairFormatsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := CurrencyPairFormatExists(tx, currencyPairFormat.CurrencyPairFormatID)
	if err != nil {
		t.Errorf("Unable to check if CurrencyPairFormat exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CurrencyPairFormatExistsG to return true, but got false.")
	}
}
func testCurrencyPairFormatsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx); err != nil {
		t.Error(err)
	}

	currencyPairFormatFound, err := FindCurrencyPairFormat(tx, currencyPairFormat.CurrencyPairFormatID)
	if err != nil {
		t.Error(err)
	}

	if currencyPairFormatFound == nil {
		t.Error("want a record, got nil")
	}
}
func testCurrencyPairFormatsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = CurrencyPairFormats(tx).Bind(currencyPairFormat); err != nil {
		t.Error(err)
	}
}

func testCurrencyPairFormatsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := CurrencyPairFormats(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCurrencyPairFormatsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyPairFormatOne := &CurrencyPairFormat{}
	currencyPairFormatTwo := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormatOne, currencyPairFormatDBTypes, false, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}
	if err = randomize.Struct(seed, currencyPairFormatTwo, currencyPairFormatDBTypes, false, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormatOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = currencyPairFormatTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := CurrencyPairFormats(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCurrencyPairFormatsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	currencyPairFormatOne := &CurrencyPairFormat{}
	currencyPairFormatTwo := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormatOne, currencyPairFormatDBTypes, false, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}
	if err = randomize.Struct(seed, currencyPairFormatTwo, currencyPairFormatDBTypes, false, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormatOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = currencyPairFormatTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CurrencyPairFormats(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testCurrencyPairFormatsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CurrencyPairFormats(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCurrencyPairFormatsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx, currencyPairFormatColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := CurrencyPairFormats(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCurrencyPairFormatToOneExchangeUsingExchange(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local CurrencyPairFormat
	var foreign Exchange

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, currencyPairFormatDBTypes, false, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, exchangeDBTypes, false, exchangeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Exchange struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.ExchangeID = foreign.ExchangeID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Exchange(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ExchangeID != foreign.ExchangeID {
		t.Errorf("want: %v, got %v", foreign.ExchangeID, check.ExchangeID)
	}

	slice := CurrencyPairFormatSlice{&local}
	if err = local.L.LoadExchange(tx, false, (*[]*CurrencyPairFormat)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Exchange == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Exchange = nil
	if err = local.L.LoadExchange(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Exchange == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCurrencyPairFormatToOneSetOpExchangeUsingExchange(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a CurrencyPairFormat
	var b, c Exchange

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, currencyPairFormatDBTypes, false, strmangle.SetComplement(currencyPairFormatPrimaryKeyColumns, currencyPairFormatColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, exchangeDBTypes, false, strmangle.SetComplement(exchangePrimaryKeyColumns, exchangeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, exchangeDBTypes, false, strmangle.SetComplement(exchangePrimaryKeyColumns, exchangeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Exchange{&b, &c} {
		err = a.SetExchange(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Exchange != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CurrencyPairFormats[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ExchangeID != x.ExchangeID {
			t.Error("foreign key was wrong value", a.ExchangeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ExchangeID))
		reflect.Indirect(reflect.ValueOf(&a.ExchangeID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ExchangeID != x.ExchangeID {
			t.Error("foreign key was wrong value", a.ExchangeID, x.ExchangeID)
		}
	}
}
func testCurrencyPairFormatsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = currencyPairFormat.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCurrencyPairFormatsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CurrencyPairFormatSlice{currencyPairFormat}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testCurrencyPairFormatsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := CurrencyPairFormats(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	currencyPairFormatDBTypes = map[string]string{`ConfigCurrency`: `boolean`, `CurrencyPairFormatID`: `bigint`, `Delimiter`: `text`, `ExchangeID`: `bigint`, `Index`: `text`, `Name`: `text`, `RequestCurrency`: `boolean`, `Separator`: `text`, `Uppercase`: `boolean`}
	_                         = bytes.MinRead
)

func testCurrencyPairFormatsUpdate(t *testing.T) {
	t.Parallel()

	if len(currencyPairFormatColumns) == len(currencyPairFormatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CurrencyPairFormats(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	if err = currencyPairFormat.Update(tx); err != nil {
		t.Error(err)
	}
}

func testCurrencyPairFormatsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(currencyPairFormatColumns) == len(currencyPairFormatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	currencyPairFormat := &CurrencyPairFormat{}
	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := CurrencyPairFormats(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, currencyPairFormat, currencyPairFormatDBTypes, true, currencyPairFormatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(currencyPairFormatColumns, currencyPairFormatPrimaryKeyColumns) {
		fields = currencyPairFormatColumns
	} else {
		fields = strmangle.SetComplement(
			currencyPairFormatColumns,
			currencyPairFormatPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(currencyPairFormat))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := CurrencyPairFormatSlice{currencyPairFormat}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testCurrencyPairFormatsUpsert(t *testing.T) {
	t.Parallel()

	if len(currencyPairFormatColumns) == len(currencyPairFormatPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	currencyPairFormat := CurrencyPairFormat{}
	if err = randomize.Struct(seed, &currencyPairFormat, currencyPairFormatDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = currencyPairFormat.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert CurrencyPairFormat: %s", err)
	}

	count, err := CurrencyPairFormats(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &currencyPairFormat, currencyPairFormatDBTypes, false, currencyPairFormatPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CurrencyPairFormat struct: %s", err)
	}

	if err = currencyPairFormat.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert CurrencyPairFormat: %s", err)
	}

	count, err = CurrencyPairFormats(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
