// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testSmsglobalContacts(t *testing.T) {
	t.Parallel()

	query := SmsglobalContacts(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSmsglobalContactsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = smsglobalContact.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := SmsglobalContacts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSmsglobalContactsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SmsglobalContacts(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := SmsglobalContacts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSmsglobalContactsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SmsglobalContactSlice{smsglobalContact}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := SmsglobalContacts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSmsglobalContactsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SmsglobalContactExists(tx, smsglobalContact.SmsglobalContactsID)
	if err != nil {
		t.Errorf("Unable to check if SmsglobalContact exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SmsglobalContactExistsG to return true, but got false.")
	}
}
func testSmsglobalContactsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx); err != nil {
		t.Error(err)
	}

	smsglobalContactFound, err := FindSmsglobalContact(tx, smsglobalContact.SmsglobalContactsID)
	if err != nil {
		t.Error(err)
	}

	if smsglobalContactFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSmsglobalContactsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = SmsglobalContacts(tx).Bind(smsglobalContact); err != nil {
		t.Error(err)
	}
}

func testSmsglobalContactsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := SmsglobalContacts(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSmsglobalContactsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalContactOne := &SmsglobalContact{}
	smsglobalContactTwo := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContactOne, smsglobalContactDBTypes, false, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}
	if err = randomize.Struct(seed, smsglobalContactTwo, smsglobalContactDBTypes, false, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContactOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = smsglobalContactTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SmsglobalContacts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSmsglobalContactsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	smsglobalContactOne := &SmsglobalContact{}
	smsglobalContactTwo := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContactOne, smsglobalContactDBTypes, false, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}
	if err = randomize.Struct(seed, smsglobalContactTwo, smsglobalContactDBTypes, false, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContactOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = smsglobalContactTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SmsglobalContacts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testSmsglobalContactsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SmsglobalContacts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSmsglobalContactsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx, smsglobalContactColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := SmsglobalContacts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSmsglobalContactsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = smsglobalContact.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSmsglobalContactsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SmsglobalContactSlice{smsglobalContact}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSmsglobalContactsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := SmsglobalContacts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	smsglobalContactDBTypes = map[string]string{`ConfigID`: `bigint`, `Enabled`: `boolean`, `Name`: `text`, `PhoneNumber`: `text`, `SmsglobalContactsID`: `bigint`}
	_                       = bytes.MinRead
)

func testSmsglobalContactsUpdate(t *testing.T) {
	t.Parallel()

	if len(smsglobalContactColumns) == len(smsglobalContactPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SmsglobalContacts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	if err = smsglobalContact.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSmsglobalContactsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(smsglobalContactColumns) == len(smsglobalContactPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	smsglobalContact := &SmsglobalContact{}
	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := SmsglobalContacts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, smsglobalContact, smsglobalContactDBTypes, true, smsglobalContactPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(smsglobalContactColumns, smsglobalContactPrimaryKeyColumns) {
		fields = smsglobalContactColumns
	} else {
		fields = strmangle.SetComplement(
			smsglobalContactColumns,
			smsglobalContactPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(smsglobalContact))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SmsglobalContactSlice{smsglobalContact}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSmsglobalContactsUpsert(t *testing.T) {
	t.Parallel()

	if len(smsglobalContactColumns) == len(smsglobalContactPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	smsglobalContact := SmsglobalContact{}
	if err = randomize.Struct(seed, &smsglobalContact, smsglobalContactDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = smsglobalContact.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert SmsglobalContact: %s", err)
	}

	count, err := SmsglobalContacts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &smsglobalContact, smsglobalContactDBTypes, false, smsglobalContactPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SmsglobalContact struct: %s", err)
	}

	if err = smsglobalContact.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert SmsglobalContact: %s", err)
	}

	count, err = SmsglobalContacts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
