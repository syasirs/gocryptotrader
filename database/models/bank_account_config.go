// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// BankAccountConfig is an object representing the database table.
type BankAccountConfig struct {
	ID                  int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	BankName            string      `boil:"bank_name" json:"bank_name" toml:"bank_name" yaml:"bank_name"`
	BankAddress         string      `boil:"bank_address" json:"bank_address" toml:"bank_address" yaml:"bank_address"`
	AccountName         string      `boil:"account_name" json:"account_name" toml:"account_name" yaml:"account_name"`
	AccountNumber       string      `boil:"account_number" json:"account_number" toml:"account_number" yaml:"account_number"`
	IsExchangeBank      bool        `boil:"is_exchange_bank" json:"is_exchange_bank" toml:"is_exchange_bank" yaml:"is_exchange_bank"`
	SwiftCode           null.String `boil:"swift_code" json:"swift_code,omitempty" toml:"swift_code" yaml:"swift_code,omitempty"`
	Iban                null.String `boil:"iban" json:"iban,omitempty" toml:"iban" yaml:"iban,omitempty"`
	BSBNumber           null.String `boil:"bsb_number" json:"bsb_number,omitempty" toml:"bsb_number" yaml:"bsb_number,omitempty"`
	SupportedCurrencies string      `boil:"supported_currencies" json:"supported_currencies" toml:"supported_currencies" yaml:"supported_currencies"`
	SupportedExchanges  null.String `boil:"supported_exchanges" json:"supported_exchanges,omitempty" toml:"supported_exchanges" yaml:"supported_exchanges,omitempty"`
	ConfigID            int64       `boil:"config_id" json:"config_id" toml:"config_id" yaml:"config_id"`

	R *bankAccountConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bankAccountConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BankAccountConfigColumns = struct {
	ID                  string
	BankName            string
	BankAddress         string
	AccountName         string
	AccountNumber       string
	IsExchangeBank      string
	SwiftCode           string
	Iban                string
	BSBNumber           string
	SupportedCurrencies string
	SupportedExchanges  string
	ConfigID            string
}{
	ID:                  "id",
	BankName:            "bank_name",
	BankAddress:         "bank_address",
	AccountName:         "account_name",
	AccountNumber:       "account_number",
	IsExchangeBank:      "is_exchange_bank",
	SwiftCode:           "swift_code",
	Iban:                "iban",
	BSBNumber:           "bsb_number",
	SupportedCurrencies: "supported_currencies",
	SupportedExchanges:  "supported_exchanges",
	ConfigID:            "config_id",
}

// BankAccountConfigRels is where relationship names are stored.
var BankAccountConfigRels = struct {
	Config string
}{
	Config: "Config",
}

// bankAccountConfigR is where relationships are stored.
type bankAccountConfigR struct {
	Config *Config
}

// NewStruct creates a new relationship struct
func (*bankAccountConfigR) NewStruct() *bankAccountConfigR {
	return &bankAccountConfigR{}
}

// bankAccountConfigL is where Load methods for each relationship are stored.
type bankAccountConfigL struct{}

var (
	bankAccountConfigColumns               = []string{"id", "bank_name", "bank_address", "account_name", "account_number", "is_exchange_bank", "swift_code", "iban", "bsb_number", "supported_currencies", "supported_exchanges", "config_id"}
	bankAccountConfigColumnsWithoutDefault = []string{}
	bankAccountConfigColumnsWithDefault    = []string{"id", "bank_name", "bank_address", "account_name", "account_number", "is_exchange_bank", "swift_code", "iban", "bsb_number", "supported_currencies", "supported_exchanges", "config_id"}
	bankAccountConfigPrimaryKeyColumns     = []string{"id"}
)

type (
	// BankAccountConfigSlice is an alias for a slice of pointers to BankAccountConfig.
	// This should generally be used opposed to []BankAccountConfig.
	BankAccountConfigSlice []*BankAccountConfig
	// BankAccountConfigHook is the signature for custom BankAccountConfig hook methods
	BankAccountConfigHook func(context.Context, boil.ContextExecutor, *BankAccountConfig) error

	bankAccountConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bankAccountConfigType                 = reflect.TypeOf(&BankAccountConfig{})
	bankAccountConfigMapping              = queries.MakeStructMapping(bankAccountConfigType)
	bankAccountConfigPrimaryKeyMapping, _ = queries.BindMapping(bankAccountConfigType, bankAccountConfigMapping, bankAccountConfigPrimaryKeyColumns)
	bankAccountConfigInsertCacheMut       sync.RWMutex
	bankAccountConfigInsertCache          = make(map[string]insertCache)
	bankAccountConfigUpdateCacheMut       sync.RWMutex
	bankAccountConfigUpdateCache          = make(map[string]updateCache)
	bankAccountConfigUpsertCacheMut       sync.RWMutex
	bankAccountConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var bankAccountConfigBeforeInsertHooks []BankAccountConfigHook
var bankAccountConfigBeforeUpdateHooks []BankAccountConfigHook
var bankAccountConfigBeforeDeleteHooks []BankAccountConfigHook
var bankAccountConfigBeforeUpsertHooks []BankAccountConfigHook

var bankAccountConfigAfterInsertHooks []BankAccountConfigHook
var bankAccountConfigAfterSelectHooks []BankAccountConfigHook
var bankAccountConfigAfterUpdateHooks []BankAccountConfigHook
var bankAccountConfigAfterDeleteHooks []BankAccountConfigHook
var bankAccountConfigAfterUpsertHooks []BankAccountConfigHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BankAccountConfig) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range bankAccountConfigBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BankAccountConfig) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range bankAccountConfigBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BankAccountConfig) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range bankAccountConfigBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BankAccountConfig) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range bankAccountConfigBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BankAccountConfig) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range bankAccountConfigAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BankAccountConfig) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range bankAccountConfigAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BankAccountConfig) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range bankAccountConfigAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BankAccountConfig) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range bankAccountConfigAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BankAccountConfig) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range bankAccountConfigAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBankAccountConfigHook registers your hook function for all future operations.
func AddBankAccountConfigHook(hookPoint boil.HookPoint, bankAccountConfigHook BankAccountConfigHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		bankAccountConfigBeforeInsertHooks = append(bankAccountConfigBeforeInsertHooks, bankAccountConfigHook)
	case boil.BeforeUpdateHook:
		bankAccountConfigBeforeUpdateHooks = append(bankAccountConfigBeforeUpdateHooks, bankAccountConfigHook)
	case boil.BeforeDeleteHook:
		bankAccountConfigBeforeDeleteHooks = append(bankAccountConfigBeforeDeleteHooks, bankAccountConfigHook)
	case boil.BeforeUpsertHook:
		bankAccountConfigBeforeUpsertHooks = append(bankAccountConfigBeforeUpsertHooks, bankAccountConfigHook)
	case boil.AfterInsertHook:
		bankAccountConfigAfterInsertHooks = append(bankAccountConfigAfterInsertHooks, bankAccountConfigHook)
	case boil.AfterSelectHook:
		bankAccountConfigAfterSelectHooks = append(bankAccountConfigAfterSelectHooks, bankAccountConfigHook)
	case boil.AfterUpdateHook:
		bankAccountConfigAfterUpdateHooks = append(bankAccountConfigAfterUpdateHooks, bankAccountConfigHook)
	case boil.AfterDeleteHook:
		bankAccountConfigAfterDeleteHooks = append(bankAccountConfigAfterDeleteHooks, bankAccountConfigHook)
	case boil.AfterUpsertHook:
		bankAccountConfigAfterUpsertHooks = append(bankAccountConfigAfterUpsertHooks, bankAccountConfigHook)
	}
}

// One returns a single bankAccountConfig record from the query.
func (q bankAccountConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BankAccountConfig, error) {
	o := &BankAccountConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bank_account_config")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BankAccountConfig records from the query.
func (q bankAccountConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (BankAccountConfigSlice, error) {
	var o []*BankAccountConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BankAccountConfig slice")
	}

	if len(bankAccountConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BankAccountConfig records in the query.
func (q bankAccountConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bank_account_config rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bankAccountConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bank_account_config exists")
	}

	return count > 0, nil
}

// Config pointed to by the foreign key.
func (o *BankAccountConfig) Config(mods ...qm.QueryMod) configQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ConfigID),
	}

	queryMods = append(queryMods, mods...)

	query := Configs(queryMods...)
	queries.SetFrom(query.Query, "\"config\"")

	return query
}

// LoadConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bankAccountConfigL) LoadConfig(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBankAccountConfig interface{}, mods queries.Applicator) error {
	var slice []*BankAccountConfig
	var object *BankAccountConfig

	if singular {
		object = maybeBankAccountConfig.(*BankAccountConfig)
	} else {
		slice = *maybeBankAccountConfig.(*[]*BankAccountConfig)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bankAccountConfigR{}
		}
		args = append(args, object.ConfigID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bankAccountConfigR{}
			}

			for _, a := range args {
				if a == obj.ConfigID {
					continue Outer
				}
			}

			args = append(args, obj.ConfigID)
		}
	}

	query := NewQuery(qm.From(`config`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Config")
	}

	var resultSlice []*Config
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config")
	}

	if len(bankAccountConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Config = foreign
		if foreign.R == nil {
			foreign.R = &configR{}
		}
		foreign.R.BankAccountConfigs = append(foreign.R.BankAccountConfigs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ConfigID == foreign.ID {
				local.R.Config = foreign
				if foreign.R == nil {
					foreign.R = &configR{}
				}
				foreign.R.BankAccountConfigs = append(foreign.R.BankAccountConfigs, local)
				break
			}
		}
	}

	return nil
}

// SetConfig of the bankAccountConfig to the related item.
// Sets o.R.Config to related.
// Adds o to related.R.BankAccountConfigs.
func (o *BankAccountConfig) SetConfig(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Config) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"bank_account_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"config_id"}),
		strmangle.WhereClause("\"", "\"", 0, bankAccountConfigPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ConfigID = related.ID
	if o.R == nil {
		o.R = &bankAccountConfigR{
			Config: related,
		}
	} else {
		o.R.Config = related
	}

	if related.R == nil {
		related.R = &configR{
			BankAccountConfigs: BankAccountConfigSlice{o},
		}
	} else {
		related.R.BankAccountConfigs = append(related.R.BankAccountConfigs, o)
	}

	return nil
}

// BankAccountConfigs retrieves all the records using an executor.
func BankAccountConfigs(mods ...qm.QueryMod) bankAccountConfigQuery {
	mods = append(mods, qm.From("\"bank_account_config\""))
	return bankAccountConfigQuery{NewQuery(mods...)}
}

// FindBankAccountConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBankAccountConfig(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*BankAccountConfig, error) {
	bankAccountConfigObj := &BankAccountConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bank_account_config\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bankAccountConfigObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bank_account_config")
	}

	return bankAccountConfigObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BankAccountConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bank_account_config provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bankAccountConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bankAccountConfigInsertCacheMut.RLock()
	cache, cached := bankAccountConfigInsertCache[key]
	bankAccountConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bankAccountConfigColumns,
			bankAccountConfigColumnsWithDefault,
			bankAccountConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bankAccountConfigType, bankAccountConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bankAccountConfigType, bankAccountConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bank_account_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bank_account_config\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"bank_account_config\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, bankAccountConfigPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bank_account_config")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == bankAccountConfigMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for bank_account_config")
	}

CacheNoHooks:
	if !cached {
		bankAccountConfigInsertCacheMut.Lock()
		bankAccountConfigInsertCache[key] = cache
		bankAccountConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BankAccountConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BankAccountConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bankAccountConfigUpdateCacheMut.RLock()
	cache, cached := bankAccountConfigUpdateCache[key]
	bankAccountConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bankAccountConfigColumns,
			bankAccountConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bank_account_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bank_account_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, bankAccountConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bankAccountConfigType, bankAccountConfigMapping, append(wl, bankAccountConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bank_account_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bank_account_config")
	}

	if !cached {
		bankAccountConfigUpdateCacheMut.Lock()
		bankAccountConfigUpdateCache[key] = cache
		bankAccountConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bankAccountConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bank_account_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bank_account_config")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BankAccountConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankAccountConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bank_account_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankAccountConfigPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bankAccountConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bankAccountConfig")
	}
	return rowsAff, nil
}

// Delete deletes a single BankAccountConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BankAccountConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BankAccountConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bankAccountConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"bank_account_config\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bank_account_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bank_account_config")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bankAccountConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bankAccountConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bank_account_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bank_account_config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BankAccountConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BankAccountConfig slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(bankAccountConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankAccountConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bank_account_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankAccountConfigPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bankAccountConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bank_account_config")
	}

	if len(bankAccountConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BankAccountConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBankAccountConfig(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BankAccountConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BankAccountConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankAccountConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bank_account_config\".* FROM \"bank_account_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bankAccountConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BankAccountConfigSlice")
	}

	*o = slice

	return nil
}

// BankAccountConfigExists checks if the BankAccountConfig row exists.
func BankAccountConfigExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bank_account_config\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bank_account_config exists")
	}

	return exists, nil
}
