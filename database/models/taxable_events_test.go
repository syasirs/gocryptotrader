// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testTaxableEvents(t *testing.T) {
	t.Parallel()

	query := TaxableEvents(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testTaxableEventsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = taxableEvent.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := TaxableEvents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaxableEventsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = TaxableEvents(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := TaxableEvents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTaxableEventsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TaxableEventSlice{taxableEvent}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := TaxableEvents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testTaxableEventsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := TaxableEventExists(tx, taxableEvent.TaxableEventsID)
	if err != nil {
		t.Errorf("Unable to check if TaxableEvent exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TaxableEventExistsG to return true, but got false.")
	}
}
func testTaxableEventsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx); err != nil {
		t.Error(err)
	}

	taxableEventFound, err := FindTaxableEvent(tx, taxableEvent.TaxableEventsID)
	if err != nil {
		t.Error(err)
	}

	if taxableEventFound == nil {
		t.Error("want a record, got nil")
	}
}
func testTaxableEventsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = TaxableEvents(tx).Bind(taxableEvent); err != nil {
		t.Error(err)
	}
}

func testTaxableEventsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := TaxableEvents(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTaxableEventsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxableEventOne := &TaxableEvent{}
	taxableEventTwo := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEventOne, taxableEventDBTypes, false, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, taxableEventTwo, taxableEventDBTypes, false, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEventOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = taxableEventTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := TaxableEvents(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTaxableEventsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	taxableEventOne := &TaxableEvent{}
	taxableEventTwo := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEventOne, taxableEventDBTypes, false, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}
	if err = randomize.Struct(seed, taxableEventTwo, taxableEventDBTypes, false, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEventOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = taxableEventTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TaxableEvents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testTaxableEventsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TaxableEvents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTaxableEventsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx, taxableEventColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := TaxableEvents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTaxableEventsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = taxableEvent.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTaxableEventsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := TaxableEventSlice{taxableEvent}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testTaxableEventsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := TaxableEvents(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	taxableEventDBTypes = map[string]string{`ConfigID`: `bigint`, `ConversionFrom`: `text`, `ConversionFromAmount`: `double precision`, `ConversionFromAmountEquivalantValue`: `double precision`, `ConversionGainLoss`: `double precision`, `ConversionTo`: `text`, `ConversionToAmount`: `double precision`, `ConversionToamountEquivalantValue`: `double precision`, `DateAndTime`: `timestamp with time zone`, `ExchangeName`: `text`, `TaxableEventsID`: `bigint`}
	_                   = bytes.MinRead
)

func testTaxableEventsUpdate(t *testing.T) {
	t.Parallel()

	if len(taxableEventColumns) == len(taxableEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TaxableEvents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	if err = taxableEvent.Update(tx); err != nil {
		t.Error(err)
	}
}

func testTaxableEventsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(taxableEventColumns) == len(taxableEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	taxableEvent := &TaxableEvent{}
	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := TaxableEvents(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, taxableEvent, taxableEventDBTypes, true, taxableEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(taxableEventColumns, taxableEventPrimaryKeyColumns) {
		fields = taxableEventColumns
	} else {
		fields = strmangle.SetComplement(
			taxableEventColumns,
			taxableEventPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(taxableEvent))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := TaxableEventSlice{taxableEvent}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testTaxableEventsUpsert(t *testing.T) {
	t.Parallel()

	if len(taxableEventColumns) == len(taxableEventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	taxableEvent := TaxableEvent{}
	if err = randomize.Struct(seed, &taxableEvent, taxableEventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = taxableEvent.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert TaxableEvent: %s", err)
	}

	count, err := TaxableEvents(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &taxableEvent, taxableEventDBTypes, false, taxableEventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TaxableEvent struct: %s", err)
	}

	if err = taxableEvent.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert TaxableEvent: %s", err)
	}

	count, err = TaxableEvents(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
