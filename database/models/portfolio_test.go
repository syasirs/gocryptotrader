// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testPortfolios(t *testing.T) {
	t.Parallel()

	query := Portfolios(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testPortfoliosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = portfolio.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Portfolios(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPortfoliosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Portfolios(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Portfolios(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPortfoliosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PortfolioSlice{portfolio}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Portfolios(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testPortfoliosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PortfolioExists(tx, portfolio.PortfolioID)
	if err != nil {
		t.Errorf("Unable to check if Portfolio exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PortfolioExistsG to return true, but got false.")
	}
}
func testPortfoliosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx); err != nil {
		t.Error(err)
	}

	portfolioFound, err := FindPortfolio(tx, portfolio.PortfolioID)
	if err != nil {
		t.Error(err)
	}

	if portfolioFound == nil {
		t.Error("want a record, got nil")
	}
}
func testPortfoliosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Portfolios(tx).Bind(portfolio); err != nil {
		t.Error(err)
	}
}

func testPortfoliosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Portfolios(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPortfoliosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portfolioOne := &Portfolio{}
	portfolioTwo := &Portfolio{}
	if err = randomize.Struct(seed, portfolioOne, portfolioDBTypes, false, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}
	if err = randomize.Struct(seed, portfolioTwo, portfolioDBTypes, false, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolioOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = portfolioTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Portfolios(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPortfoliosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	portfolioOne := &Portfolio{}
	portfolioTwo := &Portfolio{}
	if err = randomize.Struct(seed, portfolioOne, portfolioDBTypes, false, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}
	if err = randomize.Struct(seed, portfolioTwo, portfolioDBTypes, false, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolioOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = portfolioTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Portfolios(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testPortfoliosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Portfolios(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPortfoliosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx, portfolioColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Portfolios(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPortfoliosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = portfolio.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPortfoliosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PortfolioSlice{portfolio}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testPortfoliosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Portfolios(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	portfolioDBTypes = map[string]string{`Balance`: `double precision`, `CoinAddress`: `text`, `CoinType`: `text`, `ConfigID`: `bigint`, `Description`: `text`, `PortfolioID`: `bigint`}
	_                = bytes.MinRead
)

func testPortfoliosUpdate(t *testing.T) {
	t.Parallel()

	if len(portfolioColumns) == len(portfolioPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Portfolios(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	if err = portfolio.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPortfoliosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(portfolioColumns) == len(portfolioPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	portfolio := &Portfolio{}
	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Portfolios(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, portfolio, portfolioDBTypes, true, portfolioPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(portfolioColumns, portfolioPrimaryKeyColumns) {
		fields = portfolioColumns
	} else {
		fields = strmangle.SetComplement(
			portfolioColumns,
			portfolioPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(portfolio))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PortfolioSlice{portfolio}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testPortfoliosUpsert(t *testing.T) {
	t.Parallel()

	if len(portfolioColumns) == len(portfolioPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	portfolio := Portfolio{}
	if err = randomize.Struct(seed, &portfolio, portfolioDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = portfolio.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Portfolio: %s", err)
	}

	count, err := Portfolios(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &portfolio, portfolioDBTypes, false, portfolioPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Portfolio struct: %s", err)
	}

	if err = portfolio.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Portfolio: %s", err)
	}

	count, err = Portfolios(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
