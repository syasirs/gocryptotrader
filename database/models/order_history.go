// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// OrderHistory is an object representing the database table.
type OrderHistory struct {
	ID           int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	OrderID      string    `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	FulfilledOn  time.Time `boil:"fulfilled_on" json:"fulfilled_on" toml:"fulfilled_on" yaml:"fulfilled_on"`
	CurrencyPair string    `boil:"currency_pair" json:"currency_pair" toml:"currency_pair" yaml:"currency_pair"`
	AssetType    string    `boil:"asset_type" json:"asset_type" toml:"asset_type" yaml:"asset_type"`
	OrderType    string    `boil:"order_type" json:"order_type" toml:"order_type" yaml:"order_type"`
	Amount       float64   `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Rate         float64   `boil:"rate" json:"rate" toml:"rate" yaml:"rate"`
	ExchangeName string    `boil:"exchange_name" json:"exchange_name" toml:"exchange_name" yaml:"exchange_name"`
	InsertedAt   time.Time `boil:"inserted_at" json:"inserted_at" toml:"inserted_at" yaml:"inserted_at"`
	AmendedAt    time.Time `boil:"amended_at" json:"amended_at" toml:"amended_at" yaml:"amended_at"`

	R *orderHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L orderHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OrderHistoryColumns = struct {
	ID           string
	OrderID      string
	FulfilledOn  string
	CurrencyPair string
	AssetType    string
	OrderType    string
	Amount       string
	Rate         string
	ExchangeName string
	InsertedAt   string
	AmendedAt    string
}{
	ID:           "id",
	OrderID:      "order_id",
	FulfilledOn:  "fulfilled_on",
	CurrencyPair: "currency_pair",
	AssetType:    "asset_type",
	OrderType:    "order_type",
	Amount:       "amount",
	Rate:         "rate",
	ExchangeName: "exchange_name",
	InsertedAt:   "inserted_at",
	AmendedAt:    "amended_at",
}

// OrderHistoryRels is where relationship names are stored.
var OrderHistoryRels = struct {
}{}

// orderHistoryR is where relationships are stored.
type orderHistoryR struct {
}

// NewStruct creates a new relationship struct
func (*orderHistoryR) NewStruct() *orderHistoryR {
	return &orderHistoryR{}
}

// orderHistoryL is where Load methods for each relationship are stored.
type orderHistoryL struct{}

var (
	orderHistoryColumns               = []string{"id", "order_id", "fulfilled_on", "currency_pair", "asset_type", "order_type", "amount", "rate", "exchange_name", "inserted_at", "amended_at"}
	orderHistoryColumnsWithoutDefault = []string{}
	orderHistoryColumnsWithDefault    = []string{"id", "order_id", "fulfilled_on", "currency_pair", "asset_type", "order_type", "amount", "rate", "exchange_name", "inserted_at", "amended_at"}
	orderHistoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// OrderHistorySlice is an alias for a slice of pointers to OrderHistory.
	// This should generally be used opposed to []OrderHistory.
	OrderHistorySlice []*OrderHistory

	orderHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	orderHistoryType                 = reflect.TypeOf(&OrderHistory{})
	orderHistoryMapping              = queries.MakeStructMapping(orderHistoryType)
	orderHistoryPrimaryKeyMapping, _ = queries.BindMapping(orderHistoryType, orderHistoryMapping, orderHistoryPrimaryKeyColumns)
	orderHistoryInsertCacheMut       sync.RWMutex
	orderHistoryInsertCache          = make(map[string]insertCache)
	orderHistoryUpdateCacheMut       sync.RWMutex
	orderHistoryUpdateCache          = make(map[string]updateCache)
	orderHistoryUpsertCacheMut       sync.RWMutex
	orderHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

// One returns a single orderHistory record from the query.
func (q orderHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OrderHistory, error) {
	o := &OrderHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for order_history")
	}

	return o, nil
}

// All returns all OrderHistory records from the query.
func (q orderHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (OrderHistorySlice, error) {
	var o []*OrderHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OrderHistory slice")
	}

	return o, nil
}

// Count returns the count of all OrderHistory records in the query.
func (q orderHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count order_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q orderHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if order_history exists")
	}

	return count > 0, nil
}

// OrderHistories retrieves all the records using an executor.
func OrderHistories(mods ...qm.QueryMod) orderHistoryQuery {
	mods = append(mods, qm.From("\"order_history\""))
	return orderHistoryQuery{NewQuery(mods...)}
}

// FindOrderHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOrderHistory(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*OrderHistory, error) {
	orderHistoryObj := &OrderHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"order_history\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, orderHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from order_history")
	}

	return orderHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OrderHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no order_history provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(orderHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	orderHistoryInsertCacheMut.RLock()
	cache, cached := orderHistoryInsertCache[key]
	orderHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			orderHistoryColumns,
			orderHistoryColumnsWithDefault,
			orderHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(orderHistoryType, orderHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(orderHistoryType, orderHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"order_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"order_history\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"order_history\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, orderHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into order_history")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == orderHistoryMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for order_history")
	}

CacheNoHooks:
	if !cached {
		orderHistoryInsertCacheMut.Lock()
		orderHistoryInsertCache[key] = cache
		orderHistoryInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the OrderHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OrderHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	orderHistoryUpdateCacheMut.RLock()
	cache, cached := orderHistoryUpdateCache[key]
	orderHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			orderHistoryColumns,
			orderHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update order_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"order_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, orderHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(orderHistoryType, orderHistoryMapping, append(wl, orderHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update order_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for order_history")
	}

	if !cached {
		orderHistoryUpdateCacheMut.Lock()
		orderHistoryUpdateCache[key] = cache
		orderHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q orderHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for order_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for order_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OrderHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"order_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in orderHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all orderHistory")
	}
	return rowsAff, nil
}

// Delete deletes a single OrderHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OrderHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrderHistory provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), orderHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"order_history\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from order_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for order_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q orderHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no orderHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from order_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OrderHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OrderHistory slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"order_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from orderHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for order_history")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OrderHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOrderHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OrderHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OrderHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), orderHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"order_history\".* FROM \"order_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, orderHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OrderHistorySlice")
	}

	*o = slice

	return nil
}

// OrderHistoryExists checks if the OrderHistory row exists.
func OrderHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"order_history\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if order_history exists")
	}

	return exists, nil
}
