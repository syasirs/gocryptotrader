// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ExchangePortfolioOrderHistory is an object representing the database table.
type ExchangePortfolioOrderHistory struct {
	ID               int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	FulfilledOn      time.Time `boil:"fulfilled_on" json:"fulfilled_on" toml:"fulfilled_on" yaml:"fulfilled_on"`
	CurrencyPair     string    `boil:"currency_pair" json:"currency_pair" toml:"currency_pair" yaml:"currency_pair"`
	AssetType        string    `boil:"asset_type" json:"asset_type" toml:"asset_type" yaml:"asset_type"`
	OrderType        string    `boil:"order_type" json:"order_type" toml:"order_type" yaml:"order_type"`
	ContractType     string    `boil:"contract_type" json:"contract_type" toml:"contract_type" yaml:"contract_type"`
	Amount           float64   `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Rate             float64   `boil:"rate" json:"rate" toml:"rate" yaml:"rate"`
	ExchangeConfigID int64     `boil:"exchange_config_id" json:"exchange_config_id" toml:"exchange_config_id" yaml:"exchange_config_id"`
	PortfolioID      int64     `boil:"portfolio_id" json:"portfolio_id" toml:"portfolio_id" yaml:"portfolio_id"`

	R *exchangePortfolioOrderHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L exchangePortfolioOrderHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExchangePortfolioOrderHistoryColumns = struct {
	ID               string
	FulfilledOn      string
	CurrencyPair     string
	AssetType        string
	OrderType        string
	ContractType     string
	Amount           string
	Rate             string
	ExchangeConfigID string
	PortfolioID      string
}{
	ID:               "id",
	FulfilledOn:      "fulfilled_on",
	CurrencyPair:     "currency_pair",
	AssetType:        "asset_type",
	OrderType:        "order_type",
	ContractType:     "contract_type",
	Amount:           "amount",
	Rate:             "rate",
	ExchangeConfigID: "exchange_config_id",
	PortfolioID:      "portfolio_id",
}

// ExchangePortfolioOrderHistoryRels is where relationship names are stored.
var ExchangePortfolioOrderHistoryRels = struct {
	Portfolio string
}{
	Portfolio: "Portfolio",
}

// exchangePortfolioOrderHistoryR is where relationships are stored.
type exchangePortfolioOrderHistoryR struct {
	Portfolio *Portfolio
}

// NewStruct creates a new relationship struct
func (*exchangePortfolioOrderHistoryR) NewStruct() *exchangePortfolioOrderHistoryR {
	return &exchangePortfolioOrderHistoryR{}
}

// exchangePortfolioOrderHistoryL is where Load methods for each relationship are stored.
type exchangePortfolioOrderHistoryL struct{}

var (
	exchangePortfolioOrderHistoryColumns               = []string{"id", "fulfilled_on", "currency_pair", "asset_type", "order_type", "contract_type", "amount", "rate", "exchange_config_id", "portfolio_id"}
	exchangePortfolioOrderHistoryColumnsWithoutDefault = []string{}
	exchangePortfolioOrderHistoryColumnsWithDefault    = []string{"id", "fulfilled_on", "currency_pair", "asset_type", "order_type", "contract_type", "amount", "rate", "exchange_config_id", "portfolio_id"}
	exchangePortfolioOrderHistoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// ExchangePortfolioOrderHistorySlice is an alias for a slice of pointers to ExchangePortfolioOrderHistory.
	// This should generally be used opposed to []ExchangePortfolioOrderHistory.
	ExchangePortfolioOrderHistorySlice []*ExchangePortfolioOrderHistory
	// ExchangePortfolioOrderHistoryHook is the signature for custom ExchangePortfolioOrderHistory hook methods
	ExchangePortfolioOrderHistoryHook func(context.Context, boil.ContextExecutor, *ExchangePortfolioOrderHistory) error

	exchangePortfolioOrderHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	exchangePortfolioOrderHistoryType                 = reflect.TypeOf(&ExchangePortfolioOrderHistory{})
	exchangePortfolioOrderHistoryMapping              = queries.MakeStructMapping(exchangePortfolioOrderHistoryType)
	exchangePortfolioOrderHistoryPrimaryKeyMapping, _ = queries.BindMapping(exchangePortfolioOrderHistoryType, exchangePortfolioOrderHistoryMapping, exchangePortfolioOrderHistoryPrimaryKeyColumns)
	exchangePortfolioOrderHistoryInsertCacheMut       sync.RWMutex
	exchangePortfolioOrderHistoryInsertCache          = make(map[string]insertCache)
	exchangePortfolioOrderHistoryUpdateCacheMut       sync.RWMutex
	exchangePortfolioOrderHistoryUpdateCache          = make(map[string]updateCache)
	exchangePortfolioOrderHistoryUpsertCacheMut       sync.RWMutex
	exchangePortfolioOrderHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var exchangePortfolioOrderHistoryBeforeInsertHooks []ExchangePortfolioOrderHistoryHook
var exchangePortfolioOrderHistoryBeforeUpdateHooks []ExchangePortfolioOrderHistoryHook
var exchangePortfolioOrderHistoryBeforeDeleteHooks []ExchangePortfolioOrderHistoryHook
var exchangePortfolioOrderHistoryBeforeUpsertHooks []ExchangePortfolioOrderHistoryHook

var exchangePortfolioOrderHistoryAfterInsertHooks []ExchangePortfolioOrderHistoryHook
var exchangePortfolioOrderHistoryAfterSelectHooks []ExchangePortfolioOrderHistoryHook
var exchangePortfolioOrderHistoryAfterUpdateHooks []ExchangePortfolioOrderHistoryHook
var exchangePortfolioOrderHistoryAfterDeleteHooks []ExchangePortfolioOrderHistoryHook
var exchangePortfolioOrderHistoryAfterUpsertHooks []ExchangePortfolioOrderHistoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExchangePortfolioOrderHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangePortfolioOrderHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExchangePortfolioOrderHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangePortfolioOrderHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExchangePortfolioOrderHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangePortfolioOrderHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExchangePortfolioOrderHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangePortfolioOrderHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExchangePortfolioOrderHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangePortfolioOrderHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExchangePortfolioOrderHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangePortfolioOrderHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExchangePortfolioOrderHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangePortfolioOrderHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExchangePortfolioOrderHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangePortfolioOrderHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExchangePortfolioOrderHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangePortfolioOrderHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExchangePortfolioOrderHistoryHook registers your hook function for all future operations.
func AddExchangePortfolioOrderHistoryHook(hookPoint boil.HookPoint, exchangePortfolioOrderHistoryHook ExchangePortfolioOrderHistoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		exchangePortfolioOrderHistoryBeforeInsertHooks = append(exchangePortfolioOrderHistoryBeforeInsertHooks, exchangePortfolioOrderHistoryHook)
	case boil.BeforeUpdateHook:
		exchangePortfolioOrderHistoryBeforeUpdateHooks = append(exchangePortfolioOrderHistoryBeforeUpdateHooks, exchangePortfolioOrderHistoryHook)
	case boil.BeforeDeleteHook:
		exchangePortfolioOrderHistoryBeforeDeleteHooks = append(exchangePortfolioOrderHistoryBeforeDeleteHooks, exchangePortfolioOrderHistoryHook)
	case boil.BeforeUpsertHook:
		exchangePortfolioOrderHistoryBeforeUpsertHooks = append(exchangePortfolioOrderHistoryBeforeUpsertHooks, exchangePortfolioOrderHistoryHook)
	case boil.AfterInsertHook:
		exchangePortfolioOrderHistoryAfterInsertHooks = append(exchangePortfolioOrderHistoryAfterInsertHooks, exchangePortfolioOrderHistoryHook)
	case boil.AfterSelectHook:
		exchangePortfolioOrderHistoryAfterSelectHooks = append(exchangePortfolioOrderHistoryAfterSelectHooks, exchangePortfolioOrderHistoryHook)
	case boil.AfterUpdateHook:
		exchangePortfolioOrderHistoryAfterUpdateHooks = append(exchangePortfolioOrderHistoryAfterUpdateHooks, exchangePortfolioOrderHistoryHook)
	case boil.AfterDeleteHook:
		exchangePortfolioOrderHistoryAfterDeleteHooks = append(exchangePortfolioOrderHistoryAfterDeleteHooks, exchangePortfolioOrderHistoryHook)
	case boil.AfterUpsertHook:
		exchangePortfolioOrderHistoryAfterUpsertHooks = append(exchangePortfolioOrderHistoryAfterUpsertHooks, exchangePortfolioOrderHistoryHook)
	}
}

// One returns a single exchangePortfolioOrderHistory record from the query.
func (q exchangePortfolioOrderHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExchangePortfolioOrderHistory, error) {
	o := &ExchangePortfolioOrderHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for exchange_portfolio_order_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExchangePortfolioOrderHistory records from the query.
func (q exchangePortfolioOrderHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExchangePortfolioOrderHistorySlice, error) {
	var o []*ExchangePortfolioOrderHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExchangePortfolioOrderHistory slice")
	}

	if len(exchangePortfolioOrderHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExchangePortfolioOrderHistory records in the query.
func (q exchangePortfolioOrderHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count exchange_portfolio_order_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q exchangePortfolioOrderHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if exchange_portfolio_order_history exists")
	}

	return count > 0, nil
}

// Portfolio pointed to by the foreign key.
func (o *ExchangePortfolioOrderHistory) Portfolio(mods ...qm.QueryMod) portfolioQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.PortfolioID),
	}

	queryMods = append(queryMods, mods...)

	query := Portfolios(queryMods...)
	queries.SetFrom(query.Query, "\"portfolio\"")

	return query
}

// LoadPortfolio allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (exchangePortfolioOrderHistoryL) LoadPortfolio(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExchangePortfolioOrderHistory interface{}, mods queries.Applicator) error {
	var slice []*ExchangePortfolioOrderHistory
	var object *ExchangePortfolioOrderHistory

	if singular {
		object = maybeExchangePortfolioOrderHistory.(*ExchangePortfolioOrderHistory)
	} else {
		slice = *maybeExchangePortfolioOrderHistory.(*[]*ExchangePortfolioOrderHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &exchangePortfolioOrderHistoryR{}
		}
		args = append(args, object.PortfolioID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exchangePortfolioOrderHistoryR{}
			}

			for _, a := range args {
				if a == obj.PortfolioID {
					continue Outer
				}
			}

			args = append(args, obj.PortfolioID)
		}
	}

	query := NewQuery(qm.From(`portfolio`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Portfolio")
	}

	var resultSlice []*Portfolio
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Portfolio")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for portfolio")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for portfolio")
	}

	if len(exchangePortfolioOrderHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Portfolio = foreign
		if foreign.R == nil {
			foreign.R = &portfolioR{}
		}
		foreign.R.ExchangePortfolioOrderHistories = append(foreign.R.ExchangePortfolioOrderHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PortfolioID == foreign.ID {
				local.R.Portfolio = foreign
				if foreign.R == nil {
					foreign.R = &portfolioR{}
				}
				foreign.R.ExchangePortfolioOrderHistories = append(foreign.R.ExchangePortfolioOrderHistories, local)
				break
			}
		}
	}

	return nil
}

// SetPortfolio of the exchangePortfolioOrderHistory to the related item.
// Sets o.R.Portfolio to related.
// Adds o to related.R.ExchangePortfolioOrderHistories.
func (o *ExchangePortfolioOrderHistory) SetPortfolio(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Portfolio) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"exchange_portfolio_order_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"portfolio_id"}),
		strmangle.WhereClause("\"", "\"", 0, exchangePortfolioOrderHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PortfolioID = related.ID
	if o.R == nil {
		o.R = &exchangePortfolioOrderHistoryR{
			Portfolio: related,
		}
	} else {
		o.R.Portfolio = related
	}

	if related.R == nil {
		related.R = &portfolioR{
			ExchangePortfolioOrderHistories: ExchangePortfolioOrderHistorySlice{o},
		}
	} else {
		related.R.ExchangePortfolioOrderHistories = append(related.R.ExchangePortfolioOrderHistories, o)
	}

	return nil
}

// ExchangePortfolioOrderHistories retrieves all the records using an executor.
func ExchangePortfolioOrderHistories(mods ...qm.QueryMod) exchangePortfolioOrderHistoryQuery {
	mods = append(mods, qm.From("\"exchange_portfolio_order_history\""))
	return exchangePortfolioOrderHistoryQuery{NewQuery(mods...)}
}

// FindExchangePortfolioOrderHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExchangePortfolioOrderHistory(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ExchangePortfolioOrderHistory, error) {
	exchangePortfolioOrderHistoryObj := &ExchangePortfolioOrderHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"exchange_portfolio_order_history\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, exchangePortfolioOrderHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from exchange_portfolio_order_history")
	}

	return exchangePortfolioOrderHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExchangePortfolioOrderHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exchange_portfolio_order_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exchangePortfolioOrderHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	exchangePortfolioOrderHistoryInsertCacheMut.RLock()
	cache, cached := exchangePortfolioOrderHistoryInsertCache[key]
	exchangePortfolioOrderHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			exchangePortfolioOrderHistoryColumns,
			exchangePortfolioOrderHistoryColumnsWithDefault,
			exchangePortfolioOrderHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(exchangePortfolioOrderHistoryType, exchangePortfolioOrderHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(exchangePortfolioOrderHistoryType, exchangePortfolioOrderHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"exchange_portfolio_order_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"exchange_portfolio_order_history\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"exchange_portfolio_order_history\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, exchangePortfolioOrderHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into exchange_portfolio_order_history")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == exchangePortfolioOrderHistoryMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for exchange_portfolio_order_history")
	}

CacheNoHooks:
	if !cached {
		exchangePortfolioOrderHistoryInsertCacheMut.Lock()
		exchangePortfolioOrderHistoryInsertCache[key] = cache
		exchangePortfolioOrderHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExchangePortfolioOrderHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExchangePortfolioOrderHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	exchangePortfolioOrderHistoryUpdateCacheMut.RLock()
	cache, cached := exchangePortfolioOrderHistoryUpdateCache[key]
	exchangePortfolioOrderHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			exchangePortfolioOrderHistoryColumns,
			exchangePortfolioOrderHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update exchange_portfolio_order_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"exchange_portfolio_order_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, exchangePortfolioOrderHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(exchangePortfolioOrderHistoryType, exchangePortfolioOrderHistoryMapping, append(wl, exchangePortfolioOrderHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update exchange_portfolio_order_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for exchange_portfolio_order_history")
	}

	if !cached {
		exchangePortfolioOrderHistoryUpdateCacheMut.Lock()
		exchangePortfolioOrderHistoryUpdateCache[key] = cache
		exchangePortfolioOrderHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q exchangePortfolioOrderHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for exchange_portfolio_order_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for exchange_portfolio_order_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExchangePortfolioOrderHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangePortfolioOrderHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"exchange_portfolio_order_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exchangePortfolioOrderHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in exchangePortfolioOrderHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all exchangePortfolioOrderHistory")
	}
	return rowsAff, nil
}

// Delete deletes a single ExchangePortfolioOrderHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExchangePortfolioOrderHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExchangePortfolioOrderHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), exchangePortfolioOrderHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"exchange_portfolio_order_history\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from exchange_portfolio_order_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for exchange_portfolio_order_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q exchangePortfolioOrderHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no exchangePortfolioOrderHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exchange_portfolio_order_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exchange_portfolio_order_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExchangePortfolioOrderHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExchangePortfolioOrderHistory slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(exchangePortfolioOrderHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangePortfolioOrderHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"exchange_portfolio_order_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exchangePortfolioOrderHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exchangePortfolioOrderHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exchange_portfolio_order_history")
	}

	if len(exchangePortfolioOrderHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExchangePortfolioOrderHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExchangePortfolioOrderHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExchangePortfolioOrderHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExchangePortfolioOrderHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangePortfolioOrderHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"exchange_portfolio_order_history\".* FROM \"exchange_portfolio_order_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exchangePortfolioOrderHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExchangePortfolioOrderHistorySlice")
	}

	*o = slice

	return nil
}

// ExchangePortfolioOrderHistoryExists checks if the ExchangePortfolioOrderHistory row exists.
func ExchangePortfolioOrderHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"exchange_portfolio_order_history\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if exchange_portfolio_order_history exists")
	}

	return exists, nil
}
