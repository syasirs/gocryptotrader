// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Ticker is an object representing the database table.
type Ticker struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	ExchangeID int       `boil:"exchange_id" json:"exchange_id" toml:"exchange_id" yaml:"exchange_id"`
	ExecutedOn time.Time `boil:"executed_on" json:"executed_on" toml:"executed_on" yaml:"executed_on"`
	Open       float32   `boil:"open" json:"open" toml:"open" yaml:"open"`
	High       float32   `boil:"high" json:"high" toml:"high" yaml:"high"`
	Low        float32   `boil:"low" json:"low" toml:"low" yaml:"low"`
	Close      float32   `boil:"close" json:"close" toml:"close" yaml:"close"`
	Volume     float32   `boil:"volume" json:"volume" toml:"volume" yaml:"volume"`
	AdjClose   float32   `boil:"adj_close" json:"adj_close" toml:"adj_close" yaml:"adj_close"`

	R *tickerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tickerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TickerColumns = struct {
	ID         string
	ExchangeID string
	ExecutedOn string
	Open       string
	High       string
	Low        string
	Close      string
	Volume     string
	AdjClose   string
}{
	ID:         "id",
	ExchangeID: "exchange_id",
	ExecutedOn: "executed_on",
	Open:       "open",
	High:       "high",
	Low:        "low",
	Close:      "close",
	Volume:     "volume",
	AdjClose:   "adj_close",
}

// tickerR is where relationships are stored.
type tickerR struct {
	Exchange *Exchange
}

// tickerL is where Load methods for each relationship are stored.
type tickerL struct{}

var (
	tickerColumns               = []string{"id", "exchange_id", "executed_on", "open", "high", "low", "close", "volume", "adj_close"}
	tickerColumnsWithoutDefault = []string{"id", "exchange_id", "executed_on", "open", "high", "low", "close", "volume", "adj_close"}
	tickerColumnsWithDefault    = []string{}
	tickerPrimaryKeyColumns     = []string{"id"}
)

type (
	// TickerSlice is an alias for a slice of pointers to Ticker.
	// This should generally be used opposed to []Ticker.
	TickerSlice []*Ticker
	// TickerHook is the signature for custom Ticker hook methods
	TickerHook func(boil.Executor, *Ticker) error

	tickerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tickerType                 = reflect.TypeOf(&Ticker{})
	tickerMapping              = queries.MakeStructMapping(tickerType)
	tickerPrimaryKeyMapping, _ = queries.BindMapping(tickerType, tickerMapping, tickerPrimaryKeyColumns)
	tickerInsertCacheMut       sync.RWMutex
	tickerInsertCache          = make(map[string]insertCache)
	tickerUpdateCacheMut       sync.RWMutex
	tickerUpdateCache          = make(map[string]updateCache)
	tickerUpsertCacheMut       sync.RWMutex
	tickerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var tickerBeforeInsertHooks []TickerHook
var tickerBeforeUpdateHooks []TickerHook
var tickerBeforeDeleteHooks []TickerHook
var tickerBeforeUpsertHooks []TickerHook

var tickerAfterInsertHooks []TickerHook
var tickerAfterSelectHooks []TickerHook
var tickerAfterUpdateHooks []TickerHook
var tickerAfterDeleteHooks []TickerHook
var tickerAfterUpsertHooks []TickerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Ticker) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tickerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Ticker) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tickerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Ticker) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tickerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Ticker) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tickerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Ticker) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tickerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Ticker) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tickerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Ticker) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tickerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Ticker) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tickerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Ticker) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tickerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTickerHook registers your hook function for all future operations.
func AddTickerHook(hookPoint boil.HookPoint, tickerHook TickerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tickerBeforeInsertHooks = append(tickerBeforeInsertHooks, tickerHook)
	case boil.BeforeUpdateHook:
		tickerBeforeUpdateHooks = append(tickerBeforeUpdateHooks, tickerHook)
	case boil.BeforeDeleteHook:
		tickerBeforeDeleteHooks = append(tickerBeforeDeleteHooks, tickerHook)
	case boil.BeforeUpsertHook:
		tickerBeforeUpsertHooks = append(tickerBeforeUpsertHooks, tickerHook)
	case boil.AfterInsertHook:
		tickerAfterInsertHooks = append(tickerAfterInsertHooks, tickerHook)
	case boil.AfterSelectHook:
		tickerAfterSelectHooks = append(tickerAfterSelectHooks, tickerHook)
	case boil.AfterUpdateHook:
		tickerAfterUpdateHooks = append(tickerAfterUpdateHooks, tickerHook)
	case boil.AfterDeleteHook:
		tickerAfterDeleteHooks = append(tickerAfterDeleteHooks, tickerHook)
	case boil.AfterUpsertHook:
		tickerAfterUpsertHooks = append(tickerAfterUpsertHooks, tickerHook)
	}
}

// OneP returns a single ticker record from the query, and panics on error.
func (q tickerQuery) OneP() *Ticker {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single ticker record from the query.
func (q tickerQuery) One() (*Ticker, error) {
	o := &Ticker{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ticker")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Ticker records from the query, and panics on error.
func (q tickerQuery) AllP() TickerSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Ticker records from the query.
func (q tickerQuery) All() (TickerSlice, error) {
	var o []*Ticker

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Ticker slice")
	}

	if len(tickerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Ticker records in the query, and panics on error.
func (q tickerQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Ticker records in the query.
func (q tickerQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ticker rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q tickerQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q tickerQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ticker exists")
	}

	return count > 0, nil
}

// ExchangeG pointed to by the foreign key.
func (o *Ticker) ExchangeG(mods ...qm.QueryMod) exchangeQuery {
	return o.Exchange(boil.GetDB(), mods...)
}

// Exchange pointed to by the foreign key.
func (o *Ticker) Exchange(exec boil.Executor, mods ...qm.QueryMod) exchangeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ExchangeID),
	}

	queryMods = append(queryMods, mods...)

	query := Exchanges(exec, queryMods...)
	queries.SetFrom(query.Query, "\"exchange\"")

	return query
} // LoadExchange allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (tickerL) LoadExchange(e boil.Executor, singular bool, maybeTicker interface{}) error {
	var slice []*Ticker
	var object *Ticker

	count := 1
	if singular {
		object = maybeTicker.(*Ticker)
	} else {
		slice = *maybeTicker.(*[]*Ticker)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &tickerR{}
		}
		args[0] = object.ExchangeID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &tickerR{}
			}
			args[i] = obj.ExchangeID
		}
	}

	query := fmt.Sprintf(
		"select * from \"exchange\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Exchange")
	}
	defer results.Close()

	var resultSlice []*Exchange
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Exchange")
	}

	if len(tickerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Exchange = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExchangeID == foreign.ID {
				local.R.Exchange = foreign
				break
			}
		}
	}

	return nil
}

// SetExchangeG of the ticker to the related item.
// Sets o.R.Exchange to related.
// Adds o to related.R.Tickers.
// Uses the global database handle.
func (o *Ticker) SetExchangeG(insert bool, related *Exchange) error {
	return o.SetExchange(boil.GetDB(), insert, related)
}

// SetExchangeP of the ticker to the related item.
// Sets o.R.Exchange to related.
// Adds o to related.R.Tickers.
// Panics on error.
func (o *Ticker) SetExchangeP(exec boil.Executor, insert bool, related *Exchange) {
	if err := o.SetExchange(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetExchangeGP of the ticker to the related item.
// Sets o.R.Exchange to related.
// Adds o to related.R.Tickers.
// Uses the global database handle and panics on error.
func (o *Ticker) SetExchangeGP(insert bool, related *Exchange) {
	if err := o.SetExchange(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetExchange of the ticker to the related item.
// Sets o.R.Exchange to related.
// Adds o to related.R.Tickers.
func (o *Ticker) SetExchange(exec boil.Executor, insert bool, related *Exchange) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ticker\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"exchange_id"}),
		strmangle.WhereClause("\"", "\"", 2, tickerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExchangeID = related.ID

	if o.R == nil {
		o.R = &tickerR{
			Exchange: related,
		}
	} else {
		o.R.Exchange = related
	}

	if related.R == nil {
		related.R = &exchangeR{
			Tickers: TickerSlice{o},
		}
	} else {
		related.R.Tickers = append(related.R.Tickers, o)
	}

	return nil
}

// TickersG retrieves all records.
func TickersG(mods ...qm.QueryMod) tickerQuery {
	return Tickers(boil.GetDB(), mods...)
}

// Tickers retrieves all the records using an executor.
func Tickers(exec boil.Executor, mods ...qm.QueryMod) tickerQuery {
	mods = append(mods, qm.From("\"ticker\""))
	return tickerQuery{NewQuery(exec, mods...)}
}

// FindTickerG retrieves a single record by ID.
func FindTickerG(id int, selectCols ...string) (*Ticker, error) {
	return FindTicker(boil.GetDB(), id, selectCols...)
}

// FindTickerGP retrieves a single record by ID, and panics on error.
func FindTickerGP(id int, selectCols ...string) *Ticker {
	retobj, err := FindTicker(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTicker retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTicker(exec boil.Executor, id int, selectCols ...string) (*Ticker, error) {
	tickerObj := &Ticker{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ticker\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(tickerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ticker")
	}

	return tickerObj, nil
}

// FindTickerP retrieves a single record by ID with an executor, and panics on error.
func FindTickerP(exec boil.Executor, id int, selectCols ...string) *Ticker {
	retobj, err := FindTicker(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Ticker) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Ticker) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Ticker) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Ticker) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no ticker provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tickerColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	tickerInsertCacheMut.RLock()
	cache, cached := tickerInsertCache[key]
	tickerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			tickerColumns,
			tickerColumnsWithDefault,
			tickerColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(tickerType, tickerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tickerType, tickerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ticker\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ticker\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ticker")
	}

	if !cached {
		tickerInsertCacheMut.Lock()
		tickerInsertCache[key] = cache
		tickerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Ticker record. See Update for
// whitelist behavior description.
func (o *Ticker) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Ticker record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Ticker) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Ticker, and panics on error.
// See Update for whitelist behavior description.
func (o *Ticker) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Ticker.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Ticker) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	tickerUpdateCacheMut.RLock()
	cache, cached := tickerUpdateCache[key]
	tickerUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			tickerColumns,
			tickerPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update ticker, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ticker\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tickerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tickerType, tickerMapping, append(wl, tickerPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update ticker row")
	}

	if !cached {
		tickerUpdateCacheMut.Lock()
		tickerUpdateCache[key] = cache
		tickerUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q tickerQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q tickerQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for ticker")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TickerSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TickerSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TickerSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TickerSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tickerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ticker\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tickerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in ticker slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Ticker) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Ticker) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Ticker) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Ticker) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no ticker provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tickerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tickerUpsertCacheMut.RLock()
	cache, cached := tickerUpsertCache[key]
	tickerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			tickerColumns,
			tickerColumnsWithDefault,
			tickerColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			tickerColumns,
			tickerPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert ticker, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tickerPrimaryKeyColumns))
			copy(conflict, tickerPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"ticker\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tickerType, tickerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tickerType, tickerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ticker")
	}

	if !cached {
		tickerUpsertCacheMut.Lock()
		tickerUpsertCache[key] = cache
		tickerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Ticker record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Ticker) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Ticker record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Ticker) DeleteG() error {
	if o == nil {
		return errors.New("models: no Ticker provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Ticker record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Ticker) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Ticker record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Ticker) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Ticker provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tickerPrimaryKeyMapping)
	sql := "DELETE FROM \"ticker\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from ticker")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q tickerQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q tickerQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no tickerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from ticker")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TickerSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TickerSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Ticker slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TickerSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TickerSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Ticker slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(tickerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tickerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ticker\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tickerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from ticker slice")
	}

	if len(tickerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Ticker) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Ticker) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Ticker) ReloadG() error {
	if o == nil {
		return errors.New("models: no Ticker provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Ticker) Reload(exec boil.Executor) error {
	ret, err := FindTicker(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TickerSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TickerSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TickerSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty TickerSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TickerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	tickers := TickerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tickerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ticker\".* FROM \"ticker\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tickerPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&tickers)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TickerSlice")
	}

	*o = tickers

	return nil
}

// TickerExists checks if the Ticker row exists.
func TickerExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ticker\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ticker exists")
	}

	return exists, nil
}

// TickerExistsG checks if the Ticker row exists.
func TickerExistsG(id int) (bool, error) {
	return TickerExists(boil.GetDB(), id)
}

// TickerExistsGP checks if the Ticker row exists. Panics on error.
func TickerExistsGP(id int) bool {
	e, err := TickerExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TickerExistsP checks if the Ticker row exists. Panics on error.
func TickerExistsP(exec boil.Executor, id int) bool {
	e, err := TickerExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
