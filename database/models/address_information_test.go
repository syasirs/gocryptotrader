// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testAddressInformations(t *testing.T) {
	t.Parallel()

	query := AddressInformations(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testAddressInformationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = addressInformation.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := AddressInformations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAddressInformationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = AddressInformations(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := AddressInformations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAddressInformationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AddressInformationSlice{addressInformation}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := AddressInformations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testAddressInformationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := AddressInformationExists(tx, addressInformation.ID)
	if err != nil {
		t.Errorf("Unable to check if AddressInformation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AddressInformationExistsG to return true, but got false.")
	}
}
func testAddressInformationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx); err != nil {
		t.Error(err)
	}

	addressInformationFound, err := FindAddressInformation(tx, addressInformation.ID)
	if err != nil {
		t.Error(err)
	}

	if addressInformationFound == nil {
		t.Error("want a record, got nil")
	}
}
func testAddressInformationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = AddressInformations(tx).Bind(addressInformation); err != nil {
		t.Error(err)
	}
}

func testAddressInformationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := AddressInformations(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAddressInformationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressInformationOne := &AddressInformation{}
	addressInformationTwo := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformationOne, addressInformationDBTypes, false, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}
	if err = randomize.Struct(seed, addressInformationTwo, addressInformationDBTypes, false, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = addressInformationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := AddressInformations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAddressInformationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	addressInformationOne := &AddressInformation{}
	addressInformationTwo := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformationOne, addressInformationDBTypes, false, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}
	if err = randomize.Struct(seed, addressInformationTwo, addressInformationDBTypes, false, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = addressInformationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := AddressInformations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func addressInformationBeforeInsertHook(e boil.Executor, o *AddressInformation) error {
	*o = AddressInformation{}
	return nil
}

func addressInformationAfterInsertHook(e boil.Executor, o *AddressInformation) error {
	*o = AddressInformation{}
	return nil
}

func addressInformationAfterSelectHook(e boil.Executor, o *AddressInformation) error {
	*o = AddressInformation{}
	return nil
}

func addressInformationBeforeUpdateHook(e boil.Executor, o *AddressInformation) error {
	*o = AddressInformation{}
	return nil
}

func addressInformationAfterUpdateHook(e boil.Executor, o *AddressInformation) error {
	*o = AddressInformation{}
	return nil
}

func addressInformationBeforeDeleteHook(e boil.Executor, o *AddressInformation) error {
	*o = AddressInformation{}
	return nil
}

func addressInformationAfterDeleteHook(e boil.Executor, o *AddressInformation) error {
	*o = AddressInformation{}
	return nil
}

func addressInformationBeforeUpsertHook(e boil.Executor, o *AddressInformation) error {
	*o = AddressInformation{}
	return nil
}

func addressInformationAfterUpsertHook(e boil.Executor, o *AddressInformation) error {
	*o = AddressInformation{}
	return nil
}

func testAddressInformationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &AddressInformation{}
	o := &AddressInformation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, addressInformationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AddressInformation object: %s", err)
	}

	AddAddressInformationHook(boil.BeforeInsertHook, addressInformationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	addressInformationBeforeInsertHooks = []AddressInformationHook{}

	AddAddressInformationHook(boil.AfterInsertHook, addressInformationAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	addressInformationAfterInsertHooks = []AddressInformationHook{}

	AddAddressInformationHook(boil.AfterSelectHook, addressInformationAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	addressInformationAfterSelectHooks = []AddressInformationHook{}

	AddAddressInformationHook(boil.BeforeUpdateHook, addressInformationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	addressInformationBeforeUpdateHooks = []AddressInformationHook{}

	AddAddressInformationHook(boil.AfterUpdateHook, addressInformationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	addressInformationAfterUpdateHooks = []AddressInformationHook{}

	AddAddressInformationHook(boil.BeforeDeleteHook, addressInformationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	addressInformationBeforeDeleteHooks = []AddressInformationHook{}

	AddAddressInformationHook(boil.AfterDeleteHook, addressInformationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	addressInformationAfterDeleteHooks = []AddressInformationHook{}

	AddAddressInformationHook(boil.BeforeUpsertHook, addressInformationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	addressInformationBeforeUpsertHooks = []AddressInformationHook{}

	AddAddressInformationHook(boil.AfterUpsertHook, addressInformationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	addressInformationAfterUpsertHooks = []AddressInformationHook{}
}
func testAddressInformationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := AddressInformations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAddressInformationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx, addressInformationColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := AddressInformations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAddressInformationToManyGCTUsers(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a AddressInformation
	var b, c GCTUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, gctUserDBTypes, false, gctUserColumnsWithDefault...)
	randomize.Struct(seed, &c, gctUserDBTypes, false, gctUserColumnsWithDefault...)

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"portfolio\" (\"address_id\", \"gct_user_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"portfolio\" (\"address_id\", \"gct_user_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	gctUser, err := a.GCTUsers(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range gctUser {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AddressInformationSlice{&a}
	if err = a.L.LoadGCTUsers(tx, false, (*[]*AddressInformation)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GCTUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GCTUsers = nil
	if err = a.L.LoadGCTUsers(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GCTUsers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", gctUser)
	}
}

func testAddressInformationToManyAddOpGCTUsers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a AddressInformation
	var b, c, d, e GCTUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressInformationDBTypes, false, strmangle.SetComplement(addressInformationPrimaryKeyColumns, addressInformationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GCTUser{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gctUserDBTypes, false, strmangle.SetComplement(gctUserPrimaryKeyColumns, gctUserColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GCTUser{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGCTUsers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.AddressAddressInformations[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.AddressAddressInformations[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.GCTUsers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GCTUsers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GCTUsers(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAddressInformationToManySetOpGCTUsers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a AddressInformation
	var b, c, d, e GCTUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressInformationDBTypes, false, strmangle.SetComplement(addressInformationPrimaryKeyColumns, addressInformationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GCTUser{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gctUserDBTypes, false, strmangle.SetComplement(gctUserPrimaryKeyColumns, gctUserColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetGCTUsers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GCTUsers(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGCTUsers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GCTUsers(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.AddressAddressInformations) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.AddressAddressInformations) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.AddressAddressInformations[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.AddressAddressInformations[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.GCTUsers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.GCTUsers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAddressInformationToManyRemoveOpGCTUsers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a AddressInformation
	var b, c, d, e GCTUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressInformationDBTypes, false, strmangle.SetComplement(addressInformationPrimaryKeyColumns, addressInformationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GCTUser{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, gctUserDBTypes, false, strmangle.SetComplement(gctUserPrimaryKeyColumns, gctUserColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddGCTUsers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GCTUsers(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGCTUsers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GCTUsers(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.AddressAddressInformations) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.AddressAddressInformations) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.AddressAddressInformations[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AddressAddressInformations[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.GCTUsers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.GCTUsers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.GCTUsers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAddressInformationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = addressInformation.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAddressInformationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AddressInformationSlice{addressInformation}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testAddressInformationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := AddressInformations(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	addressInformationDBTypes = map[string]string{`Address`: `text`, `Balance`: `real`, `CoinType`: `text`, `Description`: `text`, `ID`: `integer`}
	_                         = bytes.MinRead
)

func testAddressInformationsUpdate(t *testing.T) {
	t.Parallel()

	if len(addressInformationColumns) == len(addressInformationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := AddressInformations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	if err = addressInformation.Update(tx); err != nil {
		t.Error(err)
	}
}

func testAddressInformationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(addressInformationColumns) == len(addressInformationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	addressInformation := &AddressInformation{}
	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := AddressInformations(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, addressInformation, addressInformationDBTypes, true, addressInformationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(addressInformationColumns, addressInformationPrimaryKeyColumns) {
		fields = addressInformationColumns
	} else {
		fields = strmangle.SetComplement(
			addressInformationColumns,
			addressInformationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(addressInformation))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := AddressInformationSlice{addressInformation}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testAddressInformationsUpsert(t *testing.T) {
	t.Parallel()

	if len(addressInformationColumns) == len(addressInformationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	addressInformation := AddressInformation{}
	if err = randomize.Struct(seed, &addressInformation, addressInformationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressInformation.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert AddressInformation: %s", err)
	}

	count, err := AddressInformations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &addressInformation, addressInformationDBTypes, false, addressInformationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AddressInformation struct: %s", err)
	}

	if err = addressInformation.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert AddressInformation: %s", err)
	}

	count, err = AddressInformations(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
