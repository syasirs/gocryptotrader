// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TradeHistory is an object representing the database table.
type TradeHistory struct {
	GCTUserID    int       `boil:"gct_user_id" json:"gct_user_id" toml:"gct_user_id" yaml:"gct_user_id"`
	ExchangeName string    `boil:"exchange_name" json:"exchange_name" toml:"exchange_name" yaml:"exchange_name"`
	FulfilledOn  time.Time `boil:"fulfilled_on" json:"fulfilled_on" toml:"fulfilled_on" yaml:"fulfilled_on"`
	CurrencyPair string    `boil:"currency_pair" json:"currency_pair" toml:"currency_pair" yaml:"currency_pair"`
	OrderType    string    `boil:"order_type" json:"order_type" toml:"order_type" yaml:"order_type"`
	Amount       float32   `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Rate         float32   `boil:"rate" json:"rate" toml:"rate" yaml:"rate"`

	R *tradeHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tradeHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TradeHistoryColumns = struct {
	GCTUserID    string
	ExchangeName string
	FulfilledOn  string
	CurrencyPair string
	OrderType    string
	Amount       string
	Rate         string
}{
	GCTUserID:    "gct_user_id",
	ExchangeName: "exchange_name",
	FulfilledOn:  "fulfilled_on",
	CurrencyPair: "currency_pair",
	OrderType:    "order_type",
	Amount:       "amount",
	Rate:         "rate",
}

// tradeHistoryR is where relationships are stored.
type tradeHistoryR struct {
	GCTUser *GCTUser
}

// tradeHistoryL is where Load methods for each relationship are stored.
type tradeHistoryL struct{}

var (
	tradeHistoryColumns               = []string{"gct_user_id", "exchange_name", "fulfilled_on", "currency_pair", "order_type", "amount", "rate"}
	tradeHistoryColumnsWithoutDefault = []string{"gct_user_id", "exchange_name", "fulfilled_on", "currency_pair", "order_type", "amount", "rate"}
	tradeHistoryColumnsWithDefault    = []string{}
	tradeHistoryPrimaryKeyColumns     = []string{"fulfilled_on"}
)

type (
	// TradeHistorySlice is an alias for a slice of pointers to TradeHistory.
	// This should generally be used opposed to []TradeHistory.
	TradeHistorySlice []*TradeHistory
	// TradeHistoryHook is the signature for custom TradeHistory hook methods
	TradeHistoryHook func(boil.Executor, *TradeHistory) error

	tradeHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tradeHistoryType                 = reflect.TypeOf(&TradeHistory{})
	tradeHistoryMapping              = queries.MakeStructMapping(tradeHistoryType)
	tradeHistoryPrimaryKeyMapping, _ = queries.BindMapping(tradeHistoryType, tradeHistoryMapping, tradeHistoryPrimaryKeyColumns)
	tradeHistoryInsertCacheMut       sync.RWMutex
	tradeHistoryInsertCache          = make(map[string]insertCache)
	tradeHistoryUpdateCacheMut       sync.RWMutex
	tradeHistoryUpdateCache          = make(map[string]updateCache)
	tradeHistoryUpsertCacheMut       sync.RWMutex
	tradeHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var tradeHistoryBeforeInsertHooks []TradeHistoryHook
var tradeHistoryBeforeUpdateHooks []TradeHistoryHook
var tradeHistoryBeforeDeleteHooks []TradeHistoryHook
var tradeHistoryBeforeUpsertHooks []TradeHistoryHook

var tradeHistoryAfterInsertHooks []TradeHistoryHook
var tradeHistoryAfterSelectHooks []TradeHistoryHook
var tradeHistoryAfterUpdateHooks []TradeHistoryHook
var tradeHistoryAfterDeleteHooks []TradeHistoryHook
var tradeHistoryAfterUpsertHooks []TradeHistoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TradeHistory) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeHistoryBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TradeHistory) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeHistoryBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TradeHistory) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeHistoryBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TradeHistory) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeHistoryBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TradeHistory) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeHistoryAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TradeHistory) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeHistoryAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TradeHistory) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeHistoryAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TradeHistory) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeHistoryAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TradeHistory) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeHistoryAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTradeHistoryHook registers your hook function for all future operations.
func AddTradeHistoryHook(hookPoint boil.HookPoint, tradeHistoryHook TradeHistoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tradeHistoryBeforeInsertHooks = append(tradeHistoryBeforeInsertHooks, tradeHistoryHook)
	case boil.BeforeUpdateHook:
		tradeHistoryBeforeUpdateHooks = append(tradeHistoryBeforeUpdateHooks, tradeHistoryHook)
	case boil.BeforeDeleteHook:
		tradeHistoryBeforeDeleteHooks = append(tradeHistoryBeforeDeleteHooks, tradeHistoryHook)
	case boil.BeforeUpsertHook:
		tradeHistoryBeforeUpsertHooks = append(tradeHistoryBeforeUpsertHooks, tradeHistoryHook)
	case boil.AfterInsertHook:
		tradeHistoryAfterInsertHooks = append(tradeHistoryAfterInsertHooks, tradeHistoryHook)
	case boil.AfterSelectHook:
		tradeHistoryAfterSelectHooks = append(tradeHistoryAfterSelectHooks, tradeHistoryHook)
	case boil.AfterUpdateHook:
		tradeHistoryAfterUpdateHooks = append(tradeHistoryAfterUpdateHooks, tradeHistoryHook)
	case boil.AfterDeleteHook:
		tradeHistoryAfterDeleteHooks = append(tradeHistoryAfterDeleteHooks, tradeHistoryHook)
	case boil.AfterUpsertHook:
		tradeHistoryAfterUpsertHooks = append(tradeHistoryAfterUpsertHooks, tradeHistoryHook)
	}
}

// OneP returns a single tradeHistory record from the query, and panics on error.
func (q tradeHistoryQuery) OneP() *TradeHistory {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single tradeHistory record from the query.
func (q tradeHistoryQuery) One() (*TradeHistory, error) {
	o := &TradeHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for trade_history")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all TradeHistory records from the query, and panics on error.
func (q tradeHistoryQuery) AllP() TradeHistorySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all TradeHistory records from the query.
func (q tradeHistoryQuery) All() (TradeHistorySlice, error) {
	var o []*TradeHistory

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TradeHistory slice")
	}

	if len(tradeHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all TradeHistory records in the query, and panics on error.
func (q tradeHistoryQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all TradeHistory records in the query.
func (q tradeHistoryQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count trade_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q tradeHistoryQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q tradeHistoryQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if trade_history exists")
	}

	return count > 0, nil
}

// GCTUserG pointed to by the foreign key.
func (o *TradeHistory) GCTUserG(mods ...qm.QueryMod) gctUserQuery {
	return o.GCTUser(boil.GetDB(), mods...)
}

// GCTUser pointed to by the foreign key.
func (o *TradeHistory) GCTUser(exec boil.Executor, mods ...qm.QueryMod) gctUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.GCTUserID),
	}

	queryMods = append(queryMods, mods...)

	query := GCTUsers(exec, queryMods...)
	queries.SetFrom(query.Query, "\"gct_user\"")

	return query
} // LoadGCTUser allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (tradeHistoryL) LoadGCTUser(e boil.Executor, singular bool, maybeTradeHistory interface{}) error {
	var slice []*TradeHistory
	var object *TradeHistory

	count := 1
	if singular {
		object = maybeTradeHistory.(*TradeHistory)
	} else {
		slice = *maybeTradeHistory.(*[]*TradeHistory)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &tradeHistoryR{}
		}
		args[0] = object.GCTUserID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeHistoryR{}
			}
			args[i] = obj.GCTUserID
		}
	}

	query := fmt.Sprintf(
		"select * from \"gct_user\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GCTUser")
	}
	defer results.Close()

	var resultSlice []*GCTUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GCTUser")
	}

	if len(tradeHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.GCTUser = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GCTUserID == foreign.ID {
				local.R.GCTUser = foreign
				break
			}
		}
	}

	return nil
}

// SetGCTUserG of the trade_history to the related item.
// Sets o.R.GCTUser to related.
// Adds o to related.R.TradeHistories.
// Uses the global database handle.
func (o *TradeHistory) SetGCTUserG(insert bool, related *GCTUser) error {
	return o.SetGCTUser(boil.GetDB(), insert, related)
}

// SetGCTUserP of the trade_history to the related item.
// Sets o.R.GCTUser to related.
// Adds o to related.R.TradeHistories.
// Panics on error.
func (o *TradeHistory) SetGCTUserP(exec boil.Executor, insert bool, related *GCTUser) {
	if err := o.SetGCTUser(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGCTUserGP of the trade_history to the related item.
// Sets o.R.GCTUser to related.
// Adds o to related.R.TradeHistories.
// Uses the global database handle and panics on error.
func (o *TradeHistory) SetGCTUserGP(insert bool, related *GCTUser) {
	if err := o.SetGCTUser(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGCTUser of the trade_history to the related item.
// Sets o.R.GCTUser to related.
// Adds o to related.R.TradeHistories.
func (o *TradeHistory) SetGCTUser(exec boil.Executor, insert bool, related *GCTUser) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"trade_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"gct_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, tradeHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.FulfilledOn}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GCTUserID = related.ID

	if o.R == nil {
		o.R = &tradeHistoryR{
			GCTUser: related,
		}
	} else {
		o.R.GCTUser = related
	}

	if related.R == nil {
		related.R = &gctUserR{
			TradeHistories: TradeHistorySlice{o},
		}
	} else {
		related.R.TradeHistories = append(related.R.TradeHistories, o)
	}

	return nil
}

// TradeHistoriesG retrieves all records.
func TradeHistoriesG(mods ...qm.QueryMod) tradeHistoryQuery {
	return TradeHistories(boil.GetDB(), mods...)
}

// TradeHistories retrieves all the records using an executor.
func TradeHistories(exec boil.Executor, mods ...qm.QueryMod) tradeHistoryQuery {
	mods = append(mods, qm.From("\"trade_history\""))
	return tradeHistoryQuery{NewQuery(exec, mods...)}
}

// FindTradeHistoryG retrieves a single record by ID.
func FindTradeHistoryG(fulfilledOn time.Time, selectCols ...string) (*TradeHistory, error) {
	return FindTradeHistory(boil.GetDB(), fulfilledOn, selectCols...)
}

// FindTradeHistoryGP retrieves a single record by ID, and panics on error.
func FindTradeHistoryGP(fulfilledOn time.Time, selectCols ...string) *TradeHistory {
	retobj, err := FindTradeHistory(boil.GetDB(), fulfilledOn, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTradeHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTradeHistory(exec boil.Executor, fulfilledOn time.Time, selectCols ...string) (*TradeHistory, error) {
	tradeHistoryObj := &TradeHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"trade_history\" where \"fulfilled_on\"=$1", sel,
	)

	q := queries.Raw(exec, query, fulfilledOn)

	err := q.Bind(tradeHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from trade_history")
	}

	return tradeHistoryObj, nil
}

// FindTradeHistoryP retrieves a single record by ID with an executor, and panics on error.
func FindTradeHistoryP(exec boil.Executor, fulfilledOn time.Time, selectCols ...string) *TradeHistory {
	retobj, err := FindTradeHistory(exec, fulfilledOn, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TradeHistory) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *TradeHistory) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *TradeHistory) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *TradeHistory) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no trade_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tradeHistoryColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	tradeHistoryInsertCacheMut.RLock()
	cache, cached := tradeHistoryInsertCache[key]
	tradeHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			tradeHistoryColumns,
			tradeHistoryColumnsWithDefault,
			tradeHistoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(tradeHistoryType, tradeHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tradeHistoryType, tradeHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"trade_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"trade_history\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into trade_history")
	}

	if !cached {
		tradeHistoryInsertCacheMut.Lock()
		tradeHistoryInsertCache[key] = cache
		tradeHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single TradeHistory record. See Update for
// whitelist behavior description.
func (o *TradeHistory) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single TradeHistory record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *TradeHistory) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the TradeHistory, and panics on error.
// See Update for whitelist behavior description.
func (o *TradeHistory) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the TradeHistory.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *TradeHistory) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	tradeHistoryUpdateCacheMut.RLock()
	cache, cached := tradeHistoryUpdateCache[key]
	tradeHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			tradeHistoryColumns,
			tradeHistoryPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update trade_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"trade_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tradeHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tradeHistoryType, tradeHistoryMapping, append(wl, tradeHistoryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update trade_history row")
	}

	if !cached {
		tradeHistoryUpdateCacheMut.Lock()
		tradeHistoryUpdateCache[key] = cache
		tradeHistoryUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q tradeHistoryQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q tradeHistoryQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for trade_history")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TradeHistorySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TradeHistorySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TradeHistorySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TradeHistorySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"trade_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tradeHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in tradeHistory slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TradeHistory) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *TradeHistory) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *TradeHistory) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TradeHistory) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no trade_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tradeHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tradeHistoryUpsertCacheMut.RLock()
	cache, cached := tradeHistoryUpsertCache[key]
	tradeHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			tradeHistoryColumns,
			tradeHistoryColumnsWithDefault,
			tradeHistoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			tradeHistoryColumns,
			tradeHistoryPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert trade_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tradeHistoryPrimaryKeyColumns))
			copy(conflict, tradeHistoryPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"trade_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tradeHistoryType, tradeHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tradeHistoryType, tradeHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert trade_history")
	}

	if !cached {
		tradeHistoryUpsertCacheMut.Lock()
		tradeHistoryUpsertCache[key] = cache
		tradeHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single TradeHistory record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TradeHistory) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single TradeHistory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TradeHistory) DeleteG() error {
	if o == nil {
		return errors.New("models: no TradeHistory provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single TradeHistory record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TradeHistory) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single TradeHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TradeHistory) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no TradeHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tradeHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"trade_history\" WHERE \"fulfilled_on\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from trade_history")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q tradeHistoryQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q tradeHistoryQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no tradeHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from trade_history")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TradeHistorySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TradeHistorySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no TradeHistory slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TradeHistorySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TradeHistorySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no TradeHistory slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(tradeHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"trade_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tradeHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from tradeHistory slice")
	}

	if len(tradeHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *TradeHistory) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *TradeHistory) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TradeHistory) ReloadG() error {
	if o == nil {
		return errors.New("models: no TradeHistory provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TradeHistory) Reload(exec boil.Executor) error {
	ret, err := FindTradeHistory(exec, o.FulfilledOn)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TradeHistorySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TradeHistorySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TradeHistorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty TradeHistorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TradeHistorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	tradeHistories := TradeHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"trade_history\".* FROM \"trade_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tradeHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&tradeHistories)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TradeHistorySlice")
	}

	*o = tradeHistories

	return nil
}

// TradeHistoryExists checks if the TradeHistory row exists.
func TradeHistoryExists(exec boil.Executor, fulfilledOn time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"trade_history\" where \"fulfilled_on\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, fulfilledOn)
	}

	row := exec.QueryRow(sql, fulfilledOn)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if trade_history exists")
	}

	return exists, nil
}

// TradeHistoryExistsG checks if the TradeHistory row exists.
func TradeHistoryExistsG(fulfilledOn time.Time) (bool, error) {
	return TradeHistoryExists(boil.GetDB(), fulfilledOn)
}

// TradeHistoryExistsGP checks if the TradeHistory row exists. Panics on error.
func TradeHistoryExistsGP(fulfilledOn time.Time) bool {
	e, err := TradeHistoryExists(boil.GetDB(), fulfilledOn)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TradeHistoryExistsP checks if the TradeHistory row exists. Panics on error.
func TradeHistoryExistsP(exec boil.Executor, fulfilledOn time.Time) bool {
	e, err := TradeHistoryExists(exec, fulfilledOn)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
