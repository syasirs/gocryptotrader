// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ExchangeConfig is an object representing the database table.
type ExchangeConfig struct {
	ID                       int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                     string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Enabled                  bool        `boil:"enabled" json:"enabled" toml:"enabled" yaml:"enabled"`
	Verbose                  bool        `boil:"verbose" json:"verbose" toml:"verbose" yaml:"verbose"`
	WebsocketEnabled         bool        `boil:"websocket_enabled" json:"websocket_enabled" toml:"websocket_enabled" yaml:"websocket_enabled"`
	UseSandbox               bool        `boil:"use_sandbox" json:"use_sandbox" toml:"use_sandbox" yaml:"use_sandbox"`
	RestPollingDelay         int64       `boil:"rest_polling_delay" json:"rest_polling_delay" toml:"rest_polling_delay" yaml:"rest_polling_delay"`
	HTTPTimeout              int64       `boil:"http_timeout" json:"http_timeout" toml:"http_timeout" yaml:"http_timeout"`
	AuthenticatedAPISupport  bool        `boil:"authenticated_api_support" json:"authenticated_api_support" toml:"authenticated_api_support" yaml:"authenticated_api_support"`
	APIKey                   null.String `boil:"api_key" json:"api_key,omitempty" toml:"api_key" yaml:"api_key,omitempty"`
	APISecret                null.String `boil:"api_secret" json:"api_secret,omitempty" toml:"api_secret" yaml:"api_secret,omitempty"`
	ClientID                 null.String `boil:"client_id" json:"client_id,omitempty" toml:"client_id" yaml:"client_id,omitempty"`
	AvailablePairs           string      `boil:"available_pairs" json:"available_pairs" toml:"available_pairs" yaml:"available_pairs"`
	EnabledPairs             string      `boil:"enabled_pairs" json:"enabled_pairs" toml:"enabled_pairs" yaml:"enabled_pairs"`
	BaseCurrencies           string      `boil:"base_currencies" json:"base_currencies" toml:"base_currencies" yaml:"base_currencies"`
	AssetTypes               string      `boil:"asset_types" json:"asset_types" toml:"asset_types" yaml:"asset_types"`
	SupportedAutoPairUpdates bool        `boil:"supported_auto_pair_updates" json:"supported_auto_pair_updates" toml:"supported_auto_pair_updates" yaml:"supported_auto_pair_updates"`
	PairsLastUpdated         time.Time   `boil:"pairs_last_updated" json:"pairs_last_updated" toml:"pairs_last_updated" yaml:"pairs_last_updated"`
	ConfigID                 int64       `boil:"config_id" json:"config_id" toml:"config_id" yaml:"config_id"`

	R *exchangeConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L exchangeConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExchangeConfigColumns = struct {
	ID                       string
	Name                     string
	Enabled                  string
	Verbose                  string
	WebsocketEnabled         string
	UseSandbox               string
	RestPollingDelay         string
	HTTPTimeout              string
	AuthenticatedAPISupport  string
	APIKey                   string
	APISecret                string
	ClientID                 string
	AvailablePairs           string
	EnabledPairs             string
	BaseCurrencies           string
	AssetTypes               string
	SupportedAutoPairUpdates string
	PairsLastUpdated         string
	ConfigID                 string
}{
	ID:                       "id",
	Name:                     "name",
	Enabled:                  "enabled",
	Verbose:                  "verbose",
	WebsocketEnabled:         "websocket_enabled",
	UseSandbox:               "use_sandbox",
	RestPollingDelay:         "rest_polling_delay",
	HTTPTimeout:              "http_timeout",
	AuthenticatedAPISupport:  "authenticated_api_support",
	APIKey:                   "api_key",
	APISecret:                "api_secret",
	ClientID:                 "client_id",
	AvailablePairs:           "available_pairs",
	EnabledPairs:             "enabled_pairs",
	BaseCurrencies:           "base_currencies",
	AssetTypes:               "asset_types",
	SupportedAutoPairUpdates: "supported_auto_pair_updates",
	PairsLastUpdated:         "pairs_last_updated",
	ConfigID:                 "config_id",
}

// ExchangeConfigRels is where relationship names are stored.
var ExchangeConfigRels = struct {
	Config                              string
	ExchangeExchangeCurrencyPairFormats string
	ExchangeExchangeTradeHistories      string
}{
	Config: "Config",
	ExchangeExchangeCurrencyPairFormats: "ExchangeExchangeCurrencyPairFormats",
	ExchangeExchangeTradeHistories:      "ExchangeExchangeTradeHistories",
}

// exchangeConfigR is where relationships are stored.
type exchangeConfigR struct {
	Config                              *Config
	ExchangeExchangeCurrencyPairFormats ExchangeCurrencyPairFormatSlice
	ExchangeExchangeTradeHistories      ExchangeTradeHistorySlice
}

// NewStruct creates a new relationship struct
func (*exchangeConfigR) NewStruct() *exchangeConfigR {
	return &exchangeConfigR{}
}

// exchangeConfigL is where Load methods for each relationship are stored.
type exchangeConfigL struct{}

var (
	exchangeConfigColumns               = []string{"id", "name", "enabled", "verbose", "websocket_enabled", "use_sandbox", "rest_polling_delay", "http_timeout", "authenticated_api_support", "api_key", "api_secret", "client_id", "available_pairs", "enabled_pairs", "base_currencies", "asset_types", "supported_auto_pair_updates", "pairs_last_updated", "config_id"}
	exchangeConfigColumnsWithoutDefault = []string{}
	exchangeConfigColumnsWithDefault    = []string{"id", "name", "enabled", "verbose", "websocket_enabled", "use_sandbox", "rest_polling_delay", "http_timeout", "authenticated_api_support", "api_key", "api_secret", "client_id", "available_pairs", "enabled_pairs", "base_currencies", "asset_types", "supported_auto_pair_updates", "pairs_last_updated", "config_id"}
	exchangeConfigPrimaryKeyColumns     = []string{"id"}
)

type (
	// ExchangeConfigSlice is an alias for a slice of pointers to ExchangeConfig.
	// This should generally be used opposed to []ExchangeConfig.
	ExchangeConfigSlice []*ExchangeConfig
	// ExchangeConfigHook is the signature for custom ExchangeConfig hook methods
	ExchangeConfigHook func(context.Context, boil.ContextExecutor, *ExchangeConfig) error

	exchangeConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	exchangeConfigType                 = reflect.TypeOf(&ExchangeConfig{})
	exchangeConfigMapping              = queries.MakeStructMapping(exchangeConfigType)
	exchangeConfigPrimaryKeyMapping, _ = queries.BindMapping(exchangeConfigType, exchangeConfigMapping, exchangeConfigPrimaryKeyColumns)
	exchangeConfigInsertCacheMut       sync.RWMutex
	exchangeConfigInsertCache          = make(map[string]insertCache)
	exchangeConfigUpdateCacheMut       sync.RWMutex
	exchangeConfigUpdateCache          = make(map[string]updateCache)
	exchangeConfigUpsertCacheMut       sync.RWMutex
	exchangeConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var exchangeConfigBeforeInsertHooks []ExchangeConfigHook
var exchangeConfigBeforeUpdateHooks []ExchangeConfigHook
var exchangeConfigBeforeDeleteHooks []ExchangeConfigHook
var exchangeConfigBeforeUpsertHooks []ExchangeConfigHook

var exchangeConfigAfterInsertHooks []ExchangeConfigHook
var exchangeConfigAfterSelectHooks []ExchangeConfigHook
var exchangeConfigAfterUpdateHooks []ExchangeConfigHook
var exchangeConfigAfterDeleteHooks []ExchangeConfigHook
var exchangeConfigAfterUpsertHooks []ExchangeConfigHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExchangeConfig) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeConfigBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExchangeConfig) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeConfigBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExchangeConfig) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeConfigBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExchangeConfig) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeConfigBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExchangeConfig) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeConfigAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExchangeConfig) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeConfigAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExchangeConfig) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeConfigAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExchangeConfig) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeConfigAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExchangeConfig) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeConfigAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExchangeConfigHook registers your hook function for all future operations.
func AddExchangeConfigHook(hookPoint boil.HookPoint, exchangeConfigHook ExchangeConfigHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		exchangeConfigBeforeInsertHooks = append(exchangeConfigBeforeInsertHooks, exchangeConfigHook)
	case boil.BeforeUpdateHook:
		exchangeConfigBeforeUpdateHooks = append(exchangeConfigBeforeUpdateHooks, exchangeConfigHook)
	case boil.BeforeDeleteHook:
		exchangeConfigBeforeDeleteHooks = append(exchangeConfigBeforeDeleteHooks, exchangeConfigHook)
	case boil.BeforeUpsertHook:
		exchangeConfigBeforeUpsertHooks = append(exchangeConfigBeforeUpsertHooks, exchangeConfigHook)
	case boil.AfterInsertHook:
		exchangeConfigAfterInsertHooks = append(exchangeConfigAfterInsertHooks, exchangeConfigHook)
	case boil.AfterSelectHook:
		exchangeConfigAfterSelectHooks = append(exchangeConfigAfterSelectHooks, exchangeConfigHook)
	case boil.AfterUpdateHook:
		exchangeConfigAfterUpdateHooks = append(exchangeConfigAfterUpdateHooks, exchangeConfigHook)
	case boil.AfterDeleteHook:
		exchangeConfigAfterDeleteHooks = append(exchangeConfigAfterDeleteHooks, exchangeConfigHook)
	case boil.AfterUpsertHook:
		exchangeConfigAfterUpsertHooks = append(exchangeConfigAfterUpsertHooks, exchangeConfigHook)
	}
}

// One returns a single exchangeConfig record from the query.
func (q exchangeConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExchangeConfig, error) {
	o := &ExchangeConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for exchange_config")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExchangeConfig records from the query.
func (q exchangeConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExchangeConfigSlice, error) {
	var o []*ExchangeConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExchangeConfig slice")
	}

	if len(exchangeConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExchangeConfig records in the query.
func (q exchangeConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count exchange_config rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q exchangeConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if exchange_config exists")
	}

	return count > 0, nil
}

// Config pointed to by the foreign key.
func (o *ExchangeConfig) Config(mods ...qm.QueryMod) configQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ConfigID),
	}

	queryMods = append(queryMods, mods...)

	query := Configs(queryMods...)
	queries.SetFrom(query.Query, "\"config\"")

	return query
}

// ExchangeExchangeCurrencyPairFormats retrieves all the exchange_currency_pair_format's ExchangeCurrencyPairFormats with an executor via exchange_id column.
func (o *ExchangeConfig) ExchangeExchangeCurrencyPairFormats(mods ...qm.QueryMod) exchangeCurrencyPairFormatQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"exchange_currency_pair_format\".\"exchange_id\"=?", o.ID),
	)

	query := ExchangeCurrencyPairFormats(queryMods...)
	queries.SetFrom(query.Query, "\"exchange_currency_pair_format\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"exchange_currency_pair_format\".*"})
	}

	return query
}

// ExchangeExchangeTradeHistories retrieves all the exchange_trade_history's ExchangeTradeHistories with an executor via exchange_id column.
func (o *ExchangeConfig) ExchangeExchangeTradeHistories(mods ...qm.QueryMod) exchangeTradeHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"exchange_trade_history\".\"exchange_id\"=?", o.ID),
	)

	query := ExchangeTradeHistories(queryMods...)
	queries.SetFrom(query.Query, "\"exchange_trade_history\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"exchange_trade_history\".*"})
	}

	return query
}

// LoadConfig allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (exchangeConfigL) LoadConfig(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExchangeConfig interface{}, mods queries.Applicator) error {
	var slice []*ExchangeConfig
	var object *ExchangeConfig

	if singular {
		object = maybeExchangeConfig.(*ExchangeConfig)
	} else {
		slice = *maybeExchangeConfig.(*[]*ExchangeConfig)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &exchangeConfigR{}
		}
		args = append(args, object.ConfigID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exchangeConfigR{}
			}

			for _, a := range args {
				if a == obj.ConfigID {
					continue Outer
				}
			}

			args = append(args, obj.ConfigID)
		}
	}

	query := NewQuery(qm.From(`config`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Config")
	}

	var resultSlice []*Config
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Config")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for config")
	}

	if len(exchangeConfigAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Config = foreign
		if foreign.R == nil {
			foreign.R = &configR{}
		}
		foreign.R.ExchangeConfigs = append(foreign.R.ExchangeConfigs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ConfigID == foreign.ID {
				local.R.Config = foreign
				if foreign.R == nil {
					foreign.R = &configR{}
				}
				foreign.R.ExchangeConfigs = append(foreign.R.ExchangeConfigs, local)
				break
			}
		}
	}

	return nil
}

// LoadExchangeExchangeCurrencyPairFormats allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (exchangeConfigL) LoadExchangeExchangeCurrencyPairFormats(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExchangeConfig interface{}, mods queries.Applicator) error {
	var slice []*ExchangeConfig
	var object *ExchangeConfig

	if singular {
		object = maybeExchangeConfig.(*ExchangeConfig)
	} else {
		slice = *maybeExchangeConfig.(*[]*ExchangeConfig)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &exchangeConfigR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exchangeConfigR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`exchange_currency_pair_format`), qm.WhereIn(`exchange_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load exchange_currency_pair_format")
	}

	var resultSlice []*ExchangeCurrencyPairFormat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice exchange_currency_pair_format")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on exchange_currency_pair_format")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exchange_currency_pair_format")
	}

	if len(exchangeCurrencyPairFormatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ExchangeExchangeCurrencyPairFormats = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &exchangeCurrencyPairFormatR{}
			}
			foreign.R.Exchange = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ExchangeID {
				local.R.ExchangeExchangeCurrencyPairFormats = append(local.R.ExchangeExchangeCurrencyPairFormats, foreign)
				if foreign.R == nil {
					foreign.R = &exchangeCurrencyPairFormatR{}
				}
				foreign.R.Exchange = local
				break
			}
		}
	}

	return nil
}

// LoadExchangeExchangeTradeHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (exchangeConfigL) LoadExchangeExchangeTradeHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExchangeConfig interface{}, mods queries.Applicator) error {
	var slice []*ExchangeConfig
	var object *ExchangeConfig

	if singular {
		object = maybeExchangeConfig.(*ExchangeConfig)
	} else {
		slice = *maybeExchangeConfig.(*[]*ExchangeConfig)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &exchangeConfigR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exchangeConfigR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`exchange_trade_history`), qm.WhereIn(`exchange_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load exchange_trade_history")
	}

	var resultSlice []*ExchangeTradeHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice exchange_trade_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on exchange_trade_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exchange_trade_history")
	}

	if len(exchangeTradeHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ExchangeExchangeTradeHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &exchangeTradeHistoryR{}
			}
			foreign.R.Exchange = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ExchangeID {
				local.R.ExchangeExchangeTradeHistories = append(local.R.ExchangeExchangeTradeHistories, foreign)
				if foreign.R == nil {
					foreign.R = &exchangeTradeHistoryR{}
				}
				foreign.R.Exchange = local
				break
			}
		}
	}

	return nil
}

// SetConfig of the exchangeConfig to the related item.
// Sets o.R.Config to related.
// Adds o to related.R.ExchangeConfigs.
func (o *ExchangeConfig) SetConfig(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Config) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"exchange_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"config_id"}),
		strmangle.WhereClause("\"", "\"", 0, exchangeConfigPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ConfigID = related.ID
	if o.R == nil {
		o.R = &exchangeConfigR{
			Config: related,
		}
	} else {
		o.R.Config = related
	}

	if related.R == nil {
		related.R = &configR{
			ExchangeConfigs: ExchangeConfigSlice{o},
		}
	} else {
		related.R.ExchangeConfigs = append(related.R.ExchangeConfigs, o)
	}

	return nil
}

// AddExchangeExchangeCurrencyPairFormats adds the given related objects to the existing relationships
// of the exchange_config, optionally inserting them as new records.
// Appends related to o.R.ExchangeExchangeCurrencyPairFormats.
// Sets related.R.Exchange appropriately.
func (o *ExchangeConfig) AddExchangeExchangeCurrencyPairFormats(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExchangeCurrencyPairFormat) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ExchangeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"exchange_currency_pair_format\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"exchange_id"}),
				strmangle.WhereClause("\"", "\"", 0, exchangeCurrencyPairFormatPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ExchangeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &exchangeConfigR{
			ExchangeExchangeCurrencyPairFormats: related,
		}
	} else {
		o.R.ExchangeExchangeCurrencyPairFormats = append(o.R.ExchangeExchangeCurrencyPairFormats, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &exchangeCurrencyPairFormatR{
				Exchange: o,
			}
		} else {
			rel.R.Exchange = o
		}
	}
	return nil
}

// AddExchangeExchangeTradeHistories adds the given related objects to the existing relationships
// of the exchange_config, optionally inserting them as new records.
// Appends related to o.R.ExchangeExchangeTradeHistories.
// Sets related.R.Exchange appropriately.
func (o *ExchangeConfig) AddExchangeExchangeTradeHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExchangeTradeHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ExchangeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"exchange_trade_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"exchange_id"}),
				strmangle.WhereClause("\"", "\"", 0, exchangeTradeHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ExchangeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &exchangeConfigR{
			ExchangeExchangeTradeHistories: related,
		}
	} else {
		o.R.ExchangeExchangeTradeHistories = append(o.R.ExchangeExchangeTradeHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &exchangeTradeHistoryR{
				Exchange: o,
			}
		} else {
			rel.R.Exchange = o
		}
	}
	return nil
}

// ExchangeConfigs retrieves all the records using an executor.
func ExchangeConfigs(mods ...qm.QueryMod) exchangeConfigQuery {
	mods = append(mods, qm.From("\"exchange_config\""))
	return exchangeConfigQuery{NewQuery(mods...)}
}

// FindExchangeConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExchangeConfig(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ExchangeConfig, error) {
	exchangeConfigObj := &ExchangeConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"exchange_config\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, exchangeConfigObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from exchange_config")
	}

	return exchangeConfigObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExchangeConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exchange_config provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exchangeConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	exchangeConfigInsertCacheMut.RLock()
	cache, cached := exchangeConfigInsertCache[key]
	exchangeConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			exchangeConfigColumns,
			exchangeConfigColumnsWithDefault,
			exchangeConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(exchangeConfigType, exchangeConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(exchangeConfigType, exchangeConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"exchange_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"exchange_config\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"exchange_config\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, exchangeConfigPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into exchange_config")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == exchangeConfigMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for exchange_config")
	}

CacheNoHooks:
	if !cached {
		exchangeConfigInsertCacheMut.Lock()
		exchangeConfigInsertCache[key] = cache
		exchangeConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExchangeConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExchangeConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	exchangeConfigUpdateCacheMut.RLock()
	cache, cached := exchangeConfigUpdateCache[key]
	exchangeConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			exchangeConfigColumns,
			exchangeConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update exchange_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"exchange_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, exchangeConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(exchangeConfigType, exchangeConfigMapping, append(wl, exchangeConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update exchange_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for exchange_config")
	}

	if !cached {
		exchangeConfigUpdateCacheMut.Lock()
		exchangeConfigUpdateCache[key] = cache
		exchangeConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q exchangeConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for exchange_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for exchange_config")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExchangeConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"exchange_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exchangeConfigPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in exchangeConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all exchangeConfig")
	}
	return rowsAff, nil
}

// Delete deletes a single ExchangeConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExchangeConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExchangeConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), exchangeConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"exchange_config\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from exchange_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for exchange_config")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q exchangeConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no exchangeConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exchange_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exchange_config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExchangeConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExchangeConfig slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(exchangeConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"exchange_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exchangeConfigPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exchangeConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exchange_config")
	}

	if len(exchangeConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExchangeConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExchangeConfig(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExchangeConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExchangeConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"exchange_config\".* FROM \"exchange_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exchangeConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExchangeConfigSlice")
	}

	*o = slice

	return nil
}

// ExchangeConfigExists checks if the ExchangeConfig row exists.
func ExchangeConfigExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"exchange_config\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if exchange_config exists")
	}

	return exists, nil
}
