// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Configs", testConfigs)
	t.Run("CurrencyPairFormats", testCurrencyPairFormats)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistories)
	t.Run("Exchanges", testExchanges)
	t.Run("OrderHistories", testOrderHistories)
	t.Run("Portfolios", testPortfolios)
	t.Run("Smsglobals", testSmsglobals)
	t.Run("SmsglobalContacts", testSmsglobalContacts)
	t.Run("TaxableEvents", testTaxableEvents)
	t.Run("Webservers", testWebservers)
}

func TestDelete(t *testing.T) {
	t.Run("Configs", testConfigsDelete)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsDelete)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesDelete)
	t.Run("Exchanges", testExchangesDelete)
	t.Run("OrderHistories", testOrderHistoriesDelete)
	t.Run("Portfolios", testPortfoliosDelete)
	t.Run("Smsglobals", testSmsglobalsDelete)
	t.Run("SmsglobalContacts", testSmsglobalContactsDelete)
	t.Run("TaxableEvents", testTaxableEventsDelete)
	t.Run("Webservers", testWebserversDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Configs", testConfigsQueryDeleteAll)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsQueryDeleteAll)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesQueryDeleteAll)
	t.Run("Exchanges", testExchangesQueryDeleteAll)
	t.Run("OrderHistories", testOrderHistoriesQueryDeleteAll)
	t.Run("Portfolios", testPortfoliosQueryDeleteAll)
	t.Run("Smsglobals", testSmsglobalsQueryDeleteAll)
	t.Run("SmsglobalContacts", testSmsglobalContactsQueryDeleteAll)
	t.Run("TaxableEvents", testTaxableEventsQueryDeleteAll)
	t.Run("Webservers", testWebserversQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Configs", testConfigsSliceDeleteAll)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsSliceDeleteAll)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesSliceDeleteAll)
	t.Run("Exchanges", testExchangesSliceDeleteAll)
	t.Run("OrderHistories", testOrderHistoriesSliceDeleteAll)
	t.Run("Portfolios", testPortfoliosSliceDeleteAll)
	t.Run("Smsglobals", testSmsglobalsSliceDeleteAll)
	t.Run("SmsglobalContacts", testSmsglobalContactsSliceDeleteAll)
	t.Run("TaxableEvents", testTaxableEventsSliceDeleteAll)
	t.Run("Webservers", testWebserversSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Configs", testConfigsExists)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsExists)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesExists)
	t.Run("Exchanges", testExchangesExists)
	t.Run("OrderHistories", testOrderHistoriesExists)
	t.Run("Portfolios", testPortfoliosExists)
	t.Run("Smsglobals", testSmsglobalsExists)
	t.Run("SmsglobalContacts", testSmsglobalContactsExists)
	t.Run("TaxableEvents", testTaxableEventsExists)
	t.Run("Webservers", testWebserversExists)
}

func TestFind(t *testing.T) {
	t.Run("Configs", testConfigsFind)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsFind)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesFind)
	t.Run("Exchanges", testExchangesFind)
	t.Run("OrderHistories", testOrderHistoriesFind)
	t.Run("Portfolios", testPortfoliosFind)
	t.Run("Smsglobals", testSmsglobalsFind)
	t.Run("SmsglobalContacts", testSmsglobalContactsFind)
	t.Run("TaxableEvents", testTaxableEventsFind)
	t.Run("Webservers", testWebserversFind)
}

func TestBind(t *testing.T) {
	t.Run("Configs", testConfigsBind)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsBind)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesBind)
	t.Run("Exchanges", testExchangesBind)
	t.Run("OrderHistories", testOrderHistoriesBind)
	t.Run("Portfolios", testPortfoliosBind)
	t.Run("Smsglobals", testSmsglobalsBind)
	t.Run("SmsglobalContacts", testSmsglobalContactsBind)
	t.Run("TaxableEvents", testTaxableEventsBind)
	t.Run("Webservers", testWebserversBind)
}

func TestOne(t *testing.T) {
	t.Run("Configs", testConfigsOne)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsOne)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesOne)
	t.Run("Exchanges", testExchangesOne)
	t.Run("OrderHistories", testOrderHistoriesOne)
	t.Run("Portfolios", testPortfoliosOne)
	t.Run("Smsglobals", testSmsglobalsOne)
	t.Run("SmsglobalContacts", testSmsglobalContactsOne)
	t.Run("TaxableEvents", testTaxableEventsOne)
	t.Run("Webservers", testWebserversOne)
}

func TestAll(t *testing.T) {
	t.Run("Configs", testConfigsAll)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsAll)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesAll)
	t.Run("Exchanges", testExchangesAll)
	t.Run("OrderHistories", testOrderHistoriesAll)
	t.Run("Portfolios", testPortfoliosAll)
	t.Run("Smsglobals", testSmsglobalsAll)
	t.Run("SmsglobalContacts", testSmsglobalContactsAll)
	t.Run("TaxableEvents", testTaxableEventsAll)
	t.Run("Webservers", testWebserversAll)
}

func TestCount(t *testing.T) {
	t.Run("Configs", testConfigsCount)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsCount)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesCount)
	t.Run("Exchanges", testExchangesCount)
	t.Run("OrderHistories", testOrderHistoriesCount)
	t.Run("Portfolios", testPortfoliosCount)
	t.Run("Smsglobals", testSmsglobalsCount)
	t.Run("SmsglobalContacts", testSmsglobalContactsCount)
	t.Run("TaxableEvents", testTaxableEventsCount)
	t.Run("Webservers", testWebserversCount)
}

func TestInsert(t *testing.T) {
	t.Run("Configs", testConfigsInsert)
	t.Run("Configs", testConfigsInsertWhitelist)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsInsert)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsInsertWhitelist)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesInsert)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesInsertWhitelist)
	t.Run("Exchanges", testExchangesInsert)
	t.Run("Exchanges", testExchangesInsertWhitelist)
	t.Run("OrderHistories", testOrderHistoriesInsert)
	t.Run("OrderHistories", testOrderHistoriesInsertWhitelist)
	t.Run("Portfolios", testPortfoliosInsert)
	t.Run("Portfolios", testPortfoliosInsertWhitelist)
	t.Run("Smsglobals", testSmsglobalsInsert)
	t.Run("Smsglobals", testSmsglobalsInsertWhitelist)
	t.Run("SmsglobalContacts", testSmsglobalContactsInsert)
	t.Run("SmsglobalContacts", testSmsglobalContactsInsertWhitelist)
	t.Run("TaxableEvents", testTaxableEventsInsert)
	t.Run("TaxableEvents", testTaxableEventsInsertWhitelist)
	t.Run("Webservers", testWebserversInsert)
	t.Run("Webservers", testWebserversInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CurrencyPairFormatToExchangeUsingExchange", testCurrencyPairFormatToOneExchangeUsingExchange)
	t.Run("ExchangeTradeHistoryToExchangeUsingExchange", testExchangeTradeHistoryToOneExchangeUsingExchange)
	t.Run("OrderHistoryToConfigUsingConfig", testOrderHistoryToOneConfigUsingConfig)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ConfigToOrderHistories", testConfigToManyOrderHistories)
	t.Run("ExchangeToCurrencyPairFormats", testExchangeToManyCurrencyPairFormats)
	t.Run("ExchangeToExchangeTradeHistories", testExchangeToManyExchangeTradeHistories)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CurrencyPairFormatToExchangeUsingExchange", testCurrencyPairFormatToOneSetOpExchangeUsingExchange)
	t.Run("ExchangeTradeHistoryToExchangeUsingExchange", testExchangeTradeHistoryToOneSetOpExchangeUsingExchange)
	t.Run("OrderHistoryToConfigUsingConfig", testOrderHistoryToOneSetOpConfigUsingConfig)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ConfigToOrderHistories", testConfigToManyAddOpOrderHistories)
	t.Run("ExchangeToCurrencyPairFormats", testExchangeToManyAddOpCurrencyPairFormats)
	t.Run("ExchangeToExchangeTradeHistories", testExchangeToManyAddOpExchangeTradeHistories)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Configs", testConfigsReload)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsReload)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesReload)
	t.Run("Exchanges", testExchangesReload)
	t.Run("OrderHistories", testOrderHistoriesReload)
	t.Run("Portfolios", testPortfoliosReload)
	t.Run("Smsglobals", testSmsglobalsReload)
	t.Run("SmsglobalContacts", testSmsglobalContactsReload)
	t.Run("TaxableEvents", testTaxableEventsReload)
	t.Run("Webservers", testWebserversReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Configs", testConfigsReloadAll)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsReloadAll)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesReloadAll)
	t.Run("Exchanges", testExchangesReloadAll)
	t.Run("OrderHistories", testOrderHistoriesReloadAll)
	t.Run("Portfolios", testPortfoliosReloadAll)
	t.Run("Smsglobals", testSmsglobalsReloadAll)
	t.Run("SmsglobalContacts", testSmsglobalContactsReloadAll)
	t.Run("TaxableEvents", testTaxableEventsReloadAll)
	t.Run("Webservers", testWebserversReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Configs", testConfigsSelect)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsSelect)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesSelect)
	t.Run("Exchanges", testExchangesSelect)
	t.Run("OrderHistories", testOrderHistoriesSelect)
	t.Run("Portfolios", testPortfoliosSelect)
	t.Run("Smsglobals", testSmsglobalsSelect)
	t.Run("SmsglobalContacts", testSmsglobalContactsSelect)
	t.Run("TaxableEvents", testTaxableEventsSelect)
	t.Run("Webservers", testWebserversSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Configs", testConfigsUpdate)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsUpdate)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesUpdate)
	t.Run("Exchanges", testExchangesUpdate)
	t.Run("OrderHistories", testOrderHistoriesUpdate)
	t.Run("Portfolios", testPortfoliosUpdate)
	t.Run("Smsglobals", testSmsglobalsUpdate)
	t.Run("SmsglobalContacts", testSmsglobalContactsUpdate)
	t.Run("TaxableEvents", testTaxableEventsUpdate)
	t.Run("Webservers", testWebserversUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Configs", testConfigsSliceUpdateAll)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsSliceUpdateAll)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesSliceUpdateAll)
	t.Run("Exchanges", testExchangesSliceUpdateAll)
	t.Run("OrderHistories", testOrderHistoriesSliceUpdateAll)
	t.Run("Portfolios", testPortfoliosSliceUpdateAll)
	t.Run("Smsglobals", testSmsglobalsSliceUpdateAll)
	t.Run("SmsglobalContacts", testSmsglobalContactsSliceUpdateAll)
	t.Run("TaxableEvents", testTaxableEventsSliceUpdateAll)
	t.Run("Webservers", testWebserversSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Configs", testConfigsUpsert)
	t.Run("CurrencyPairFormats", testCurrencyPairFormatsUpsert)
	t.Run("ExchangeTradeHistories", testExchangeTradeHistoriesUpsert)
	t.Run("Exchanges", testExchangesUpsert)
	t.Run("OrderHistories", testOrderHistoriesUpsert)
	t.Run("Portfolios", testPortfoliosUpsert)
	t.Run("Smsglobals", testSmsglobalsUpsert)
	t.Run("SmsglobalContacts", testSmsglobalContactsUpsert)
	t.Run("TaxableEvents", testTaxableEventsUpsert)
	t.Run("Webservers", testWebserversUpsert)
}
