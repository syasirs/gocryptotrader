// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AddressInformations", testAddressInformations)
	t.Run("Exchanges", testExchanges)
	t.Run("GCTUsers", testGCTUsers)
	t.Run("Tickers", testTickers)
	t.Run("TradeHistories", testTradeHistories)
}

func TestDelete(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsDelete)
	t.Run("Exchanges", testExchangesDelete)
	t.Run("GCTUsers", testGCTUsersDelete)
	t.Run("Tickers", testTickersDelete)
	t.Run("TradeHistories", testTradeHistoriesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsQueryDeleteAll)
	t.Run("Exchanges", testExchangesQueryDeleteAll)
	t.Run("GCTUsers", testGCTUsersQueryDeleteAll)
	t.Run("Tickers", testTickersQueryDeleteAll)
	t.Run("TradeHistories", testTradeHistoriesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsSliceDeleteAll)
	t.Run("Exchanges", testExchangesSliceDeleteAll)
	t.Run("GCTUsers", testGCTUsersSliceDeleteAll)
	t.Run("Tickers", testTickersSliceDeleteAll)
	t.Run("TradeHistories", testTradeHistoriesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsExists)
	t.Run("Exchanges", testExchangesExists)
	t.Run("GCTUsers", testGCTUsersExists)
	t.Run("Tickers", testTickersExists)
	t.Run("TradeHistories", testTradeHistoriesExists)
}

func TestFind(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsFind)
	t.Run("Exchanges", testExchangesFind)
	t.Run("GCTUsers", testGCTUsersFind)
	t.Run("Tickers", testTickersFind)
	t.Run("TradeHistories", testTradeHistoriesFind)
}

func TestBind(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsBind)
	t.Run("Exchanges", testExchangesBind)
	t.Run("GCTUsers", testGCTUsersBind)
	t.Run("Tickers", testTickersBind)
	t.Run("TradeHistories", testTradeHistoriesBind)
}

func TestOne(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsOne)
	t.Run("Exchanges", testExchangesOne)
	t.Run("GCTUsers", testGCTUsersOne)
	t.Run("Tickers", testTickersOne)
	t.Run("TradeHistories", testTradeHistoriesOne)
}

func TestAll(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsAll)
	t.Run("Exchanges", testExchangesAll)
	t.Run("GCTUsers", testGCTUsersAll)
	t.Run("Tickers", testTickersAll)
	t.Run("TradeHistories", testTradeHistoriesAll)
}

func TestCount(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsCount)
	t.Run("Exchanges", testExchangesCount)
	t.Run("GCTUsers", testGCTUsersCount)
	t.Run("Tickers", testTickersCount)
	t.Run("TradeHistories", testTradeHistoriesCount)
}

func TestHooks(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsHooks)
	t.Run("Exchanges", testExchangesHooks)
	t.Run("GCTUsers", testGCTUsersHooks)
	t.Run("Tickers", testTickersHooks)
	t.Run("TradeHistories", testTradeHistoriesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsInsert)
	t.Run("AddressInformations", testAddressInformationsInsertWhitelist)
	t.Run("Exchanges", testExchangesInsert)
	t.Run("Exchanges", testExchangesInsertWhitelist)
	t.Run("GCTUsers", testGCTUsersInsert)
	t.Run("GCTUsers", testGCTUsersInsertWhitelist)
	t.Run("Tickers", testTickersInsert)
	t.Run("Tickers", testTickersInsertWhitelist)
	t.Run("TradeHistories", testTradeHistoriesInsert)
	t.Run("TradeHistories", testTradeHistoriesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ExchangeToGCTUserUsingGCTUser", testExchangeToOneGCTUserUsingGCTUser)
	t.Run("TickerToExchangeUsingExchange", testTickerToOneExchangeUsingExchange)
	t.Run("TradeHistoryToGCTUserUsingGCTUser", testTradeHistoryToOneGCTUserUsingGCTUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AddressInformationToGCTUsers", testAddressInformationToManyGCTUsers)
	t.Run("ExchangeToTickers", testExchangeToManyTickers)
	t.Run("GCTUserToExchanges", testGCTUserToManyExchanges)
	t.Run("GCTUserToAddressAddressInformations", testGCTUserToManyAddressAddressInformations)
	t.Run("GCTUserToTradeHistories", testGCTUserToManyTradeHistories)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ExchangeToGCTUserUsingGCTUser", testExchangeToOneSetOpGCTUserUsingGCTUser)
	t.Run("TickerToExchangeUsingExchange", testTickerToOneSetOpExchangeUsingExchange)
	t.Run("TradeHistoryToGCTUserUsingGCTUser", testTradeHistoryToOneSetOpGCTUserUsingGCTUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AddressInformationToGCTUsers", testAddressInformationToManyAddOpGCTUsers)
	t.Run("ExchangeToTickers", testExchangeToManyAddOpTickers)
	t.Run("GCTUserToExchanges", testGCTUserToManyAddOpExchanges)
	t.Run("GCTUserToAddressAddressInformations", testGCTUserToManyAddOpAddressAddressInformations)
	t.Run("GCTUserToTradeHistories", testGCTUserToManyAddOpTradeHistories)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AddressInformationToGCTUsers", testAddressInformationToManySetOpGCTUsers)
	t.Run("GCTUserToAddressAddressInformations", testGCTUserToManySetOpAddressAddressInformations)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AddressInformationToGCTUsers", testAddressInformationToManyRemoveOpGCTUsers)
	t.Run("GCTUserToAddressAddressInformations", testGCTUserToManyRemoveOpAddressAddressInformations)
}

func TestReload(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsReload)
	t.Run("Exchanges", testExchangesReload)
	t.Run("GCTUsers", testGCTUsersReload)
	t.Run("Tickers", testTickersReload)
	t.Run("TradeHistories", testTradeHistoriesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsReloadAll)
	t.Run("Exchanges", testExchangesReloadAll)
	t.Run("GCTUsers", testGCTUsersReloadAll)
	t.Run("Tickers", testTickersReloadAll)
	t.Run("TradeHistories", testTradeHistoriesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsSelect)
	t.Run("Exchanges", testExchangesSelect)
	t.Run("GCTUsers", testGCTUsersSelect)
	t.Run("Tickers", testTickersSelect)
	t.Run("TradeHistories", testTradeHistoriesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsUpdate)
	t.Run("Exchanges", testExchangesUpdate)
	t.Run("GCTUsers", testGCTUsersUpdate)
	t.Run("Tickers", testTickersUpdate)
	t.Run("TradeHistories", testTradeHistoriesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsSliceUpdateAll)
	t.Run("Exchanges", testExchangesSliceUpdateAll)
	t.Run("GCTUsers", testGCTUsersSliceUpdateAll)
	t.Run("Tickers", testTickersSliceUpdateAll)
	t.Run("TradeHistories", testTradeHistoriesSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("AddressInformations", testAddressInformationsUpsert)
	t.Run("Exchanges", testExchangesUpsert)
	t.Run("GCTUsers", testGCTUsersUpsert)
	t.Run("Tickers", testTickersUpsert)
	t.Run("TradeHistories", testTradeHistoriesUpsert)
}
