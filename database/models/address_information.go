// This file is generated by SQLBoiler (https://github.com/volatiletech/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// AddressInformation is an object representing the database table.
type AddressInformation struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Address     string      `boil:"address" json:"address" toml:"address" yaml:"address"`
	CoinType    string      `boil:"coin_type" json:"coin_type" toml:"coin_type" yaml:"coin_type"`
	Balance     float32     `boil:"balance" json:"balance" toml:"balance" yaml:"balance"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *addressInformationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L addressInformationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AddressInformationColumns = struct {
	ID          string
	Address     string
	CoinType    string
	Balance     string
	Description string
}{
	ID:          "id",
	Address:     "address",
	CoinType:    "coin_type",
	Balance:     "balance",
	Description: "description",
}

// addressInformationR is where relationships are stored.
type addressInformationR struct {
	GCTUsers GCTUserSlice
}

// addressInformationL is where Load methods for each relationship are stored.
type addressInformationL struct{}

var (
	addressInformationColumns               = []string{"id", "address", "coin_type", "balance", "description"}
	addressInformationColumnsWithoutDefault = []string{"id", "address", "coin_type", "balance", "description"}
	addressInformationColumnsWithDefault    = []string{}
	addressInformationPrimaryKeyColumns     = []string{"id"}
)

type (
	// AddressInformationSlice is an alias for a slice of pointers to AddressInformation.
	// This should generally be used opposed to []AddressInformation.
	AddressInformationSlice []*AddressInformation
	// AddressInformationHook is the signature for custom AddressInformation hook methods
	AddressInformationHook func(boil.Executor, *AddressInformation) error

	addressInformationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	addressInformationType                 = reflect.TypeOf(&AddressInformation{})
	addressInformationMapping              = queries.MakeStructMapping(addressInformationType)
	addressInformationPrimaryKeyMapping, _ = queries.BindMapping(addressInformationType, addressInformationMapping, addressInformationPrimaryKeyColumns)
	addressInformationInsertCacheMut       sync.RWMutex
	addressInformationInsertCache          = make(map[string]insertCache)
	addressInformationUpdateCacheMut       sync.RWMutex
	addressInformationUpdateCache          = make(map[string]updateCache)
	addressInformationUpsertCacheMut       sync.RWMutex
	addressInformationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var addressInformationBeforeInsertHooks []AddressInformationHook
var addressInformationBeforeUpdateHooks []AddressInformationHook
var addressInformationBeforeDeleteHooks []AddressInformationHook
var addressInformationBeforeUpsertHooks []AddressInformationHook

var addressInformationAfterInsertHooks []AddressInformationHook
var addressInformationAfterSelectHooks []AddressInformationHook
var addressInformationAfterUpdateHooks []AddressInformationHook
var addressInformationAfterDeleteHooks []AddressInformationHook
var addressInformationAfterUpsertHooks []AddressInformationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AddressInformation) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range addressInformationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AddressInformation) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range addressInformationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AddressInformation) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range addressInformationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AddressInformation) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range addressInformationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AddressInformation) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range addressInformationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AddressInformation) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range addressInformationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AddressInformation) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range addressInformationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AddressInformation) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range addressInformationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AddressInformation) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range addressInformationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAddressInformationHook registers your hook function for all future operations.
func AddAddressInformationHook(hookPoint boil.HookPoint, addressInformationHook AddressInformationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		addressInformationBeforeInsertHooks = append(addressInformationBeforeInsertHooks, addressInformationHook)
	case boil.BeforeUpdateHook:
		addressInformationBeforeUpdateHooks = append(addressInformationBeforeUpdateHooks, addressInformationHook)
	case boil.BeforeDeleteHook:
		addressInformationBeforeDeleteHooks = append(addressInformationBeforeDeleteHooks, addressInformationHook)
	case boil.BeforeUpsertHook:
		addressInformationBeforeUpsertHooks = append(addressInformationBeforeUpsertHooks, addressInformationHook)
	case boil.AfterInsertHook:
		addressInformationAfterInsertHooks = append(addressInformationAfterInsertHooks, addressInformationHook)
	case boil.AfterSelectHook:
		addressInformationAfterSelectHooks = append(addressInformationAfterSelectHooks, addressInformationHook)
	case boil.AfterUpdateHook:
		addressInformationAfterUpdateHooks = append(addressInformationAfterUpdateHooks, addressInformationHook)
	case boil.AfterDeleteHook:
		addressInformationAfterDeleteHooks = append(addressInformationAfterDeleteHooks, addressInformationHook)
	case boil.AfterUpsertHook:
		addressInformationAfterUpsertHooks = append(addressInformationAfterUpsertHooks, addressInformationHook)
	}
}

// OneP returns a single addressInformation record from the query, and panics on error.
func (q addressInformationQuery) OneP() *AddressInformation {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single addressInformation record from the query.
func (q addressInformationQuery) One() (*AddressInformation, error) {
	o := &AddressInformation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for address_information")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all AddressInformation records from the query, and panics on error.
func (q addressInformationQuery) AllP() AddressInformationSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all AddressInformation records from the query.
func (q addressInformationQuery) All() (AddressInformationSlice, error) {
	var o []*AddressInformation

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AddressInformation slice")
	}

	if len(addressInformationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all AddressInformation records in the query, and panics on error.
func (q addressInformationQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all AddressInformation records in the query.
func (q addressInformationQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count address_information rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q addressInformationQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q addressInformationQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if address_information exists")
	}

	return count > 0, nil
}

// GCTUsersG retrieves all the gct_user's gct user.
func (o *AddressInformation) GCTUsersG(mods ...qm.QueryMod) gctUserQuery {
	return o.GCTUsers(boil.GetDB(), mods...)
}

// GCTUsers retrieves all the gct_user's gct user with an executor.
func (o *AddressInformation) GCTUsers(exec boil.Executor, mods ...qm.QueryMod) gctUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"portfolio\" on \"gct_user\".\"id\" = \"portfolio\".\"gct_user_id\""),
		qm.Where("\"portfolio\".\"address_id\"=?", o.ID),
	)

	query := GCTUsers(exec, queryMods...)
	queries.SetFrom(query.Query, "\"gct_user\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"gct_user\".*"})
	}

	return query
}

// LoadGCTUsers allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (addressInformationL) LoadGCTUsers(e boil.Executor, singular bool, maybeAddressInformation interface{}) error {
	var slice []*AddressInformation
	var object *AddressInformation

	count := 1
	if singular {
		object = maybeAddressInformation.(*AddressInformation)
	} else {
		slice = *maybeAddressInformation.(*[]*AddressInformation)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &addressInformationR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &addressInformationR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select \"a\".*, \"b\".\"address_id\" from \"gct_user\" as \"a\" inner join \"portfolio\" as \"b\" on \"a\".\"id\" = \"b\".\"gct_user_id\" where \"b\".\"address_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load gct_user")
	}
	defer results.Close()

	var resultSlice []*GCTUser

	var localJoinCols []int
	for results.Next() {
		one := new(GCTUser)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.Password, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice gct_user")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice gct_user")
	}

	if len(gctUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GCTUsers = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.GCTUsers = append(local.R.GCTUsers, foreign)
				break
			}
		}
	}

	return nil
}

// AddGCTUsersG adds the given related objects to the existing relationships
// of the address_information, optionally inserting them as new records.
// Appends related to o.R.GCTUsers.
// Sets related.R.AddressAddressInformations appropriately.
// Uses the global database handle.
func (o *AddressInformation) AddGCTUsersG(insert bool, related ...*GCTUser) error {
	return o.AddGCTUsers(boil.GetDB(), insert, related...)
}

// AddGCTUsersP adds the given related objects to the existing relationships
// of the address_information, optionally inserting them as new records.
// Appends related to o.R.GCTUsers.
// Sets related.R.AddressAddressInformations appropriately.
// Panics on error.
func (o *AddressInformation) AddGCTUsersP(exec boil.Executor, insert bool, related ...*GCTUser) {
	if err := o.AddGCTUsers(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGCTUsersGP adds the given related objects to the existing relationships
// of the address_information, optionally inserting them as new records.
// Appends related to o.R.GCTUsers.
// Sets related.R.AddressAddressInformations appropriately.
// Uses the global database handle and panics on error.
func (o *AddressInformation) AddGCTUsersGP(insert bool, related ...*GCTUser) {
	if err := o.AddGCTUsers(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGCTUsers adds the given related objects to the existing relationships
// of the address_information, optionally inserting them as new records.
// Appends related to o.R.GCTUsers.
// Sets related.R.AddressAddressInformations appropriately.
func (o *AddressInformation) AddGCTUsers(exec boil.Executor, insert bool, related ...*GCTUser) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"portfolio\" (\"address_id\", \"gct_user_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &addressInformationR{
			GCTUsers: related,
		}
	} else {
		o.R.GCTUsers = append(o.R.GCTUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &gctUserR{
				AddressAddressInformations: AddressInformationSlice{o},
			}
		} else {
			rel.R.AddressAddressInformations = append(rel.R.AddressAddressInformations, o)
		}
	}
	return nil
}

// SetGCTUsersG removes all previously related items of the
// address_information replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressAddressInformations's GCTUsers accordingly.
// Replaces o.R.GCTUsers with related.
// Sets related.R.AddressAddressInformations's GCTUsers accordingly.
// Uses the global database handle.
func (o *AddressInformation) SetGCTUsersG(insert bool, related ...*GCTUser) error {
	return o.SetGCTUsers(boil.GetDB(), insert, related...)
}

// SetGCTUsersP removes all previously related items of the
// address_information replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressAddressInformations's GCTUsers accordingly.
// Replaces o.R.GCTUsers with related.
// Sets related.R.AddressAddressInformations's GCTUsers accordingly.
// Panics on error.
func (o *AddressInformation) SetGCTUsersP(exec boil.Executor, insert bool, related ...*GCTUser) {
	if err := o.SetGCTUsers(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGCTUsersGP removes all previously related items of the
// address_information replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressAddressInformations's GCTUsers accordingly.
// Replaces o.R.GCTUsers with related.
// Sets related.R.AddressAddressInformations's GCTUsers accordingly.
// Uses the global database handle and panics on error.
func (o *AddressInformation) SetGCTUsersGP(insert bool, related ...*GCTUser) {
	if err := o.SetGCTUsers(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGCTUsers removes all previously related items of the
// address_information replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AddressAddressInformations's GCTUsers accordingly.
// Replaces o.R.GCTUsers with related.
// Sets related.R.AddressAddressInformations's GCTUsers accordingly.
func (o *AddressInformation) SetGCTUsers(exec boil.Executor, insert bool, related ...*GCTUser) error {
	query := "delete from \"portfolio\" where \"address_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeGCTUsersFromAddressAddressInformationsSlice(o, related)
	if o.R != nil {
		o.R.GCTUsers = nil
	}
	return o.AddGCTUsers(exec, insert, related...)
}

// RemoveGCTUsersG relationships from objects passed in.
// Removes related items from R.GCTUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.AddressAddressInformations.
// Uses the global database handle.
func (o *AddressInformation) RemoveGCTUsersG(related ...*GCTUser) error {
	return o.RemoveGCTUsers(boil.GetDB(), related...)
}

// RemoveGCTUsersP relationships from objects passed in.
// Removes related items from R.GCTUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.AddressAddressInformations.
// Panics on error.
func (o *AddressInformation) RemoveGCTUsersP(exec boil.Executor, related ...*GCTUser) {
	if err := o.RemoveGCTUsers(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveGCTUsersGP relationships from objects passed in.
// Removes related items from R.GCTUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.AddressAddressInformations.
// Uses the global database handle and panics on error.
func (o *AddressInformation) RemoveGCTUsersGP(related ...*GCTUser) {
	if err := o.RemoveGCTUsers(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveGCTUsers relationships from objects passed in.
// Removes related items from R.GCTUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.AddressAddressInformations.
func (o *AddressInformation) RemoveGCTUsers(exec boil.Executor, related ...*GCTUser) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"portfolio\" where \"address_id\" = $1 and \"gct_user_id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeGCTUsersFromAddressAddressInformationsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GCTUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.GCTUsers)
			if ln > 1 && i < ln-1 {
				o.R.GCTUsers[i] = o.R.GCTUsers[ln-1]
			}
			o.R.GCTUsers = o.R.GCTUsers[:ln-1]
			break
		}
	}

	return nil
}

func removeGCTUsersFromAddressAddressInformationsSlice(o *AddressInformation, related []*GCTUser) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.AddressAddressInformations {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.AddressAddressInformations)
			if ln > 1 && i < ln-1 {
				rel.R.AddressAddressInformations[i] = rel.R.AddressAddressInformations[ln-1]
			}
			rel.R.AddressAddressInformations = rel.R.AddressAddressInformations[:ln-1]
			break
		}
	}
}

// AddressInformationsG retrieves all records.
func AddressInformationsG(mods ...qm.QueryMod) addressInformationQuery {
	return AddressInformations(boil.GetDB(), mods...)
}

// AddressInformations retrieves all the records using an executor.
func AddressInformations(exec boil.Executor, mods ...qm.QueryMod) addressInformationQuery {
	mods = append(mods, qm.From("\"address_information\""))
	return addressInformationQuery{NewQuery(exec, mods...)}
}

// FindAddressInformationG retrieves a single record by ID.
func FindAddressInformationG(id int, selectCols ...string) (*AddressInformation, error) {
	return FindAddressInformation(boil.GetDB(), id, selectCols...)
}

// FindAddressInformationGP retrieves a single record by ID, and panics on error.
func FindAddressInformationGP(id int, selectCols ...string) *AddressInformation {
	retobj, err := FindAddressInformation(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAddressInformation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAddressInformation(exec boil.Executor, id int, selectCols ...string) (*AddressInformation, error) {
	addressInformationObj := &AddressInformation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"address_information\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(addressInformationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from address_information")
	}

	return addressInformationObj, nil
}

// FindAddressInformationP retrieves a single record by ID with an executor, and panics on error.
func FindAddressInformationP(exec boil.Executor, id int, selectCols ...string) *AddressInformation {
	retobj, err := FindAddressInformation(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AddressInformation) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *AddressInformation) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *AddressInformation) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *AddressInformation) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no address_information provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(addressInformationColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	addressInformationInsertCacheMut.RLock()
	cache, cached := addressInformationInsertCache[key]
	addressInformationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			addressInformationColumns,
			addressInformationColumnsWithDefault,
			addressInformationColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(addressInformationType, addressInformationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(addressInformationType, addressInformationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"address_information\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"address_information\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into address_information")
	}

	if !cached {
		addressInformationInsertCacheMut.Lock()
		addressInformationInsertCache[key] = cache
		addressInformationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single AddressInformation record. See Update for
// whitelist behavior description.
func (o *AddressInformation) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single AddressInformation record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *AddressInformation) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the AddressInformation, and panics on error.
// See Update for whitelist behavior description.
func (o *AddressInformation) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the AddressInformation.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *AddressInformation) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	addressInformationUpdateCacheMut.RLock()
	cache, cached := addressInformationUpdateCache[key]
	addressInformationUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			addressInformationColumns,
			addressInformationPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update address_information, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"address_information\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, addressInformationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(addressInformationType, addressInformationMapping, append(wl, addressInformationPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update address_information row")
	}

	if !cached {
		addressInformationUpdateCacheMut.Lock()
		addressInformationUpdateCache[key] = cache
		addressInformationUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q addressInformationQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q addressInformationQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for address_information")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AddressInformationSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o AddressInformationSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o AddressInformationSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AddressInformationSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressInformationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"address_information\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, addressInformationPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in addressInformation slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AddressInformation) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *AddressInformation) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *AddressInformation) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *AddressInformation) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no address_information provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(addressInformationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	addressInformationUpsertCacheMut.RLock()
	cache, cached := addressInformationUpsertCache[key]
	addressInformationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			addressInformationColumns,
			addressInformationColumnsWithDefault,
			addressInformationColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			addressInformationColumns,
			addressInformationPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert address_information, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(addressInformationPrimaryKeyColumns))
			copy(conflict, addressInformationPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"address_information\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(addressInformationType, addressInformationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(addressInformationType, addressInformationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert address_information")
	}

	if !cached {
		addressInformationUpsertCacheMut.Lock()
		addressInformationUpsertCache[key] = cache
		addressInformationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single AddressInformation record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AddressInformation) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single AddressInformation record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AddressInformation) DeleteG() error {
	if o == nil {
		return errors.New("models: no AddressInformation provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single AddressInformation record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *AddressInformation) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single AddressInformation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AddressInformation) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no AddressInformation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), addressInformationPrimaryKeyMapping)
	sql := "DELETE FROM \"address_information\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from address_information")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q addressInformationQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q addressInformationQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no addressInformationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from address_information")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o AddressInformationSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o AddressInformationSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no AddressInformation slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o AddressInformationSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AddressInformationSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no AddressInformation slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(addressInformationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressInformationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"address_information\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, addressInformationPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from addressInformation slice")
	}

	if len(addressInformationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *AddressInformation) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *AddressInformation) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AddressInformation) ReloadG() error {
	if o == nil {
		return errors.New("models: no AddressInformation provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AddressInformation) Reload(exec boil.Executor) error {
	ret, err := FindAddressInformation(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AddressInformationSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AddressInformationSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AddressInformationSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty AddressInformationSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AddressInformationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	addressInformations := AddressInformationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), addressInformationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"address_information\".* FROM \"address_information\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, addressInformationPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&addressInformations)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AddressInformationSlice")
	}

	*o = addressInformations

	return nil
}

// AddressInformationExists checks if the AddressInformation row exists.
func AddressInformationExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"address_information\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if address_information exists")
	}

	return exists, nil
}

// AddressInformationExistsG checks if the AddressInformation row exists.
func AddressInformationExistsG(id int) (bool, error) {
	return AddressInformationExists(boil.GetDB(), id)
}

// AddressInformationExistsGP checks if the AddressInformation row exists. Panics on error.
func AddressInformationExistsGP(id int) bool {
	e, err := AddressInformationExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AddressInformationExistsP checks if the AddressInformation row exists. Panics on error.
func AddressInformationExistsP(exec boil.Executor, id int) bool {
	e, err := AddressInformationExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
