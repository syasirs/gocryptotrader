// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testConfigs(t *testing.T) {
	t.Parallel()

	query := Configs(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testConfigsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = config.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Configs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConfigsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Configs(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Configs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConfigsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ConfigSlice{config}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Configs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testConfigsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ConfigExists(tx, config.ConfigID)
	if err != nil {
		t.Errorf("Unable to check if Config exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ConfigExistsG to return true, but got false.")
	}
}
func testConfigsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx); err != nil {
		t.Error(err)
	}

	configFound, err := FindConfig(tx, config.ConfigID)
	if err != nil {
		t.Error(err)
	}

	if configFound == nil {
		t.Error("want a record, got nil")
	}
}
func testConfigsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Configs(tx).Bind(config); err != nil {
		t.Error(err)
	}
}

func testConfigsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Configs(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testConfigsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	configOne := &Config{}
	configTwo := &Config{}
	if err = randomize.Struct(seed, configOne, configDBTypes, false, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}
	if err = randomize.Struct(seed, configTwo, configDBTypes, false, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = configOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = configTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Configs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testConfigsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	configOne := &Config{}
	configTwo := &Config{}
	if err = randomize.Struct(seed, configOne, configDBTypes, false, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}
	if err = randomize.Struct(seed, configTwo, configDBTypes, false, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = configOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = configTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Configs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testConfigsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Configs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testConfigsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx, configColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Configs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testConfigToManyOrderHistories(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Config
	var b, c OrderHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, orderHistoryDBTypes, false, orderHistoryColumnsWithDefault...)
	randomize.Struct(seed, &c, orderHistoryDBTypes, false, orderHistoryColumnsWithDefault...)

	b.ConfigID = a.ConfigID
	c.ConfigID = a.ConfigID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	orderHistory, err := a.OrderHistories(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range orderHistory {
		if v.ConfigID == b.ConfigID {
			bFound = true
		}
		if v.ConfigID == c.ConfigID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ConfigSlice{&a}
	if err = a.L.LoadOrderHistories(tx, false, (*[]*Config)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OrderHistories = nil
	if err = a.L.LoadOrderHistories(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OrderHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", orderHistory)
	}
}

func testConfigToManyAddOpOrderHistories(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Config
	var b, c, d, e OrderHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, configDBTypes, false, strmangle.SetComplement(configPrimaryKeyColumns, configColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OrderHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, orderHistoryDBTypes, false, strmangle.SetComplement(orderHistoryPrimaryKeyColumns, orderHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OrderHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOrderHistories(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ConfigID != first.ConfigID {
			t.Error("foreign key was wrong value", a.ConfigID, first.ConfigID)
		}
		if a.ConfigID != second.ConfigID {
			t.Error("foreign key was wrong value", a.ConfigID, second.ConfigID)
		}

		if first.R.Config != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Config != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OrderHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OrderHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OrderHistories(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testConfigsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = config.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testConfigsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ConfigSlice{config}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testConfigsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Configs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	configDBTypes = map[string]string{`ConfigID`: `bigint`, `Cryptocurrencies`: `text`, `CurrencyFXProvider`: `text`, `EncryptConfig`: `integer`, `FiatDisplayCurrency`: `text`, `GlobalHTTPTimeout`: `bigint`, `Name`: `text`, `Password`: `text`}
	_             = bytes.MinRead
)

func testConfigsUpdate(t *testing.T) {
	t.Parallel()

	if len(configColumns) == len(configPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Configs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	if err = config.Update(tx); err != nil {
		t.Error(err)
	}
}

func testConfigsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(configColumns) == len(configPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	config := &Config{}
	if err = randomize.Struct(seed, config, configDBTypes, true, configColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Configs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, config, configDBTypes, true, configPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(configColumns, configPrimaryKeyColumns) {
		fields = configColumns
	} else {
		fields = strmangle.SetComplement(
			configColumns,
			configPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(config))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ConfigSlice{config}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testConfigsUpsert(t *testing.T) {
	t.Parallel()

	if len(configColumns) == len(configPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	config := Config{}
	if err = randomize.Struct(seed, &config, configDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = config.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Config: %s", err)
	}

	count, err := Configs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &config, configDBTypes, false, configPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Config struct: %s", err)
	}

	if err = config.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Config: %s", err)
	}

	count, err = Configs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
