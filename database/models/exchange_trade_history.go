// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ExchangeTradeHistory is an object representing the database table.
type ExchangeTradeHistory struct {
	ExchangeTradeHistoryID int64     `boil:"exchange_trade_history_id" json:"exchange_trade_history_id" toml:"exchange_trade_history_id" yaml:"exchange_trade_history_id"`
	ConfigID               int64     `boil:"config_id" json:"config_id" toml:"config_id" yaml:"config_id"`
	ExchangeID             int64     `boil:"exchange_id" json:"exchange_id" toml:"exchange_id" yaml:"exchange_id"`
	FulfilledOn            time.Time `boil:"fulfilled_on" json:"fulfilled_on" toml:"fulfilled_on" yaml:"fulfilled_on"`
	CurrencyPair           string    `boil:"currency_pair" json:"currency_pair" toml:"currency_pair" yaml:"currency_pair"`
	AssetType              string    `boil:"asset_type" json:"asset_type" toml:"asset_type" yaml:"asset_type"`
	OrderType              string    `boil:"order_type" json:"order_type" toml:"order_type" yaml:"order_type"`
	Amount                 float64   `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Rate                   float64   `boil:"rate" json:"rate" toml:"rate" yaml:"rate"`

	R *exchangeTradeHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L exchangeTradeHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExchangeTradeHistoryColumns = struct {
	ExchangeTradeHistoryID string
	ConfigID               string
	ExchangeID             string
	FulfilledOn            string
	CurrencyPair           string
	AssetType              string
	OrderType              string
	Amount                 string
	Rate                   string
}{
	ExchangeTradeHistoryID: "exchange_trade_history_id",
	ConfigID:               "config_id",
	ExchangeID:             "exchange_id",
	FulfilledOn:            "fulfilled_on",
	CurrencyPair:           "currency_pair",
	AssetType:              "asset_type",
	OrderType:              "order_type",
	Amount:                 "amount",
	Rate:                   "rate",
}

// exchangeTradeHistoryR is where relationships are stored.
type exchangeTradeHistoryR struct {
}

// exchangeTradeHistoryL is where Load methods for each relationship are stored.
type exchangeTradeHistoryL struct{}

var (
	exchangeTradeHistoryColumns               = []string{"exchange_trade_history_id", "config_id", "exchange_id", "fulfilled_on", "currency_pair", "asset_type", "order_type", "amount", "rate"}
	exchangeTradeHistoryColumnsWithoutDefault = []string{"exchange_trade_history_id", "config_id", "exchange_id", "fulfilled_on", "currency_pair", "asset_type", "order_type", "amount", "rate"}
	exchangeTradeHistoryColumnsWithDefault    = []string{}
	exchangeTradeHistoryPrimaryKeyColumns     = []string{"exchange_trade_history_id"}
)

type (
	// ExchangeTradeHistorySlice is an alias for a slice of pointers to ExchangeTradeHistory.
	// This should generally be used opposed to []ExchangeTradeHistory.
	ExchangeTradeHistorySlice []*ExchangeTradeHistory

	exchangeTradeHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	exchangeTradeHistoryType                 = reflect.TypeOf(&ExchangeTradeHistory{})
	exchangeTradeHistoryMapping              = queries.MakeStructMapping(exchangeTradeHistoryType)
	exchangeTradeHistoryPrimaryKeyMapping, _ = queries.BindMapping(exchangeTradeHistoryType, exchangeTradeHistoryMapping, exchangeTradeHistoryPrimaryKeyColumns)
	exchangeTradeHistoryInsertCacheMut       sync.RWMutex
	exchangeTradeHistoryInsertCache          = make(map[string]insertCache)
	exchangeTradeHistoryUpdateCacheMut       sync.RWMutex
	exchangeTradeHistoryUpdateCache          = make(map[string]updateCache)
	exchangeTradeHistoryUpsertCacheMut       sync.RWMutex
	exchangeTradeHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)

// OneP returns a single exchangeTradeHistory record from the query, and panics on error.
func (q exchangeTradeHistoryQuery) OneP() *ExchangeTradeHistory {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single exchangeTradeHistory record from the query.
func (q exchangeTradeHistoryQuery) One() (*ExchangeTradeHistory, error) {
	o := &ExchangeTradeHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for exchange_trade_history")
	}

	return o, nil
}

// AllP returns all ExchangeTradeHistory records from the query, and panics on error.
func (q exchangeTradeHistoryQuery) AllP() ExchangeTradeHistorySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all ExchangeTradeHistory records from the query.
func (q exchangeTradeHistoryQuery) All() (ExchangeTradeHistorySlice, error) {
	var o []*ExchangeTradeHistory

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExchangeTradeHistory slice")
	}

	return o, nil
}

// CountP returns the count of all ExchangeTradeHistory records in the query, and panics on error.
func (q exchangeTradeHistoryQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all ExchangeTradeHistory records in the query.
func (q exchangeTradeHistoryQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count exchange_trade_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q exchangeTradeHistoryQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q exchangeTradeHistoryQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if exchange_trade_history exists")
	}

	return count > 0, nil
}

// ExchangeTradeHistoriesG retrieves all records.
func ExchangeTradeHistoriesG(mods ...qm.QueryMod) exchangeTradeHistoryQuery {
	return ExchangeTradeHistories(boil.GetDB(), mods...)
}

// ExchangeTradeHistories retrieves all the records using an executor.
func ExchangeTradeHistories(exec boil.Executor, mods ...qm.QueryMod) exchangeTradeHistoryQuery {
	mods = append(mods, qm.From("\"exchange_trade_history\""))
	return exchangeTradeHistoryQuery{NewQuery(exec, mods...)}
}

// FindExchangeTradeHistoryG retrieves a single record by ID.
func FindExchangeTradeHistoryG(exchangeTradeHistoryID int64, selectCols ...string) (*ExchangeTradeHistory, error) {
	return FindExchangeTradeHistory(boil.GetDB(), exchangeTradeHistoryID, selectCols...)
}

// FindExchangeTradeHistoryGP retrieves a single record by ID, and panics on error.
func FindExchangeTradeHistoryGP(exchangeTradeHistoryID int64, selectCols ...string) *ExchangeTradeHistory {
	retobj, err := FindExchangeTradeHistory(boil.GetDB(), exchangeTradeHistoryID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindExchangeTradeHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExchangeTradeHistory(exec boil.Executor, exchangeTradeHistoryID int64, selectCols ...string) (*ExchangeTradeHistory, error) {
	exchangeTradeHistoryObj := &ExchangeTradeHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"exchange_trade_history\" where \"exchange_trade_history_id\"=$1", sel,
	)

	q := queries.Raw(exec, query, exchangeTradeHistoryID)

	err := q.Bind(exchangeTradeHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from exchange_trade_history")
	}

	return exchangeTradeHistoryObj, nil
}

// FindExchangeTradeHistoryP retrieves a single record by ID with an executor, and panics on error.
func FindExchangeTradeHistoryP(exec boil.Executor, exchangeTradeHistoryID int64, selectCols ...string) *ExchangeTradeHistory {
	retobj, err := FindExchangeTradeHistory(exec, exchangeTradeHistoryID, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ExchangeTradeHistory) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *ExchangeTradeHistory) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *ExchangeTradeHistory) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *ExchangeTradeHistory) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no exchange_trade_history provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(exchangeTradeHistoryColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	exchangeTradeHistoryInsertCacheMut.RLock()
	cache, cached := exchangeTradeHistoryInsertCache[key]
	exchangeTradeHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			exchangeTradeHistoryColumns,
			exchangeTradeHistoryColumnsWithDefault,
			exchangeTradeHistoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(exchangeTradeHistoryType, exchangeTradeHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(exchangeTradeHistoryType, exchangeTradeHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"exchange_trade_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"exchange_trade_history\" DEFAULT VALUES"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into exchange_trade_history")
	}

	if !cached {
		exchangeTradeHistoryInsertCacheMut.Lock()
		exchangeTradeHistoryInsertCache[key] = cache
		exchangeTradeHistoryInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single ExchangeTradeHistory record. See Update for
// whitelist behavior description.
func (o *ExchangeTradeHistory) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single ExchangeTradeHistory record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *ExchangeTradeHistory) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the ExchangeTradeHistory, and panics on error.
// See Update for whitelist behavior description.
func (o *ExchangeTradeHistory) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the ExchangeTradeHistory.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *ExchangeTradeHistory) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	key := makeCacheKey(whitelist, nil)
	exchangeTradeHistoryUpdateCacheMut.RLock()
	cache, cached := exchangeTradeHistoryUpdateCache[key]
	exchangeTradeHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			exchangeTradeHistoryColumns,
			exchangeTradeHistoryPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update exchange_trade_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"exchange_trade_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, exchangeTradeHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(exchangeTradeHistoryType, exchangeTradeHistoryMapping, append(wl, exchangeTradeHistoryPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update exchange_trade_history row")
	}

	if !cached {
		exchangeTradeHistoryUpdateCacheMut.Lock()
		exchangeTradeHistoryUpdateCache[key] = cache
		exchangeTradeHistoryUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q exchangeTradeHistoryQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q exchangeTradeHistoryQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for exchange_trade_history")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ExchangeTradeHistorySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ExchangeTradeHistorySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ExchangeTradeHistorySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExchangeTradeHistorySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeTradeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"exchange_trade_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, exchangeTradeHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in exchangeTradeHistory slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ExchangeTradeHistory) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *ExchangeTradeHistory) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *ExchangeTradeHistory) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *ExchangeTradeHistory) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no exchange_trade_history provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(exchangeTradeHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()

	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	exchangeTradeHistoryUpsertCacheMut.RLock()
	cache, cached := exchangeTradeHistoryUpsertCache[key]
	exchangeTradeHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			exchangeTradeHistoryColumns,
			exchangeTradeHistoryColumnsWithDefault,
			exchangeTradeHistoryColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			exchangeTradeHistoryColumns,
			exchangeTradeHistoryPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert exchange_trade_history, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(exchangeTradeHistoryPrimaryKeyColumns))
			copy(conflict, exchangeTradeHistoryPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"exchange_trade_history\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(exchangeTradeHistoryType, exchangeTradeHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(exchangeTradeHistoryType, exchangeTradeHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert exchange_trade_history")
	}

	if !cached {
		exchangeTradeHistoryUpsertCacheMut.Lock()
		exchangeTradeHistoryUpsertCache[key] = cache
		exchangeTradeHistoryUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteP deletes a single ExchangeTradeHistory record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ExchangeTradeHistory) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single ExchangeTradeHistory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ExchangeTradeHistory) DeleteG() error {
	if o == nil {
		return errors.New("models: no ExchangeTradeHistory provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single ExchangeTradeHistory record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *ExchangeTradeHistory) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single ExchangeTradeHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExchangeTradeHistory) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no ExchangeTradeHistory provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), exchangeTradeHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"exchange_trade_history\" WHERE \"exchange_trade_history_id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from exchange_trade_history")
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q exchangeTradeHistoryQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q exchangeTradeHistoryQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no exchangeTradeHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from exchange_trade_history")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ExchangeTradeHistorySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ExchangeTradeHistorySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no ExchangeTradeHistory slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ExchangeTradeHistorySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExchangeTradeHistorySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no ExchangeTradeHistory slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeTradeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"exchange_trade_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, exchangeTradeHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from exchangeTradeHistory slice")
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *ExchangeTradeHistory) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *ExchangeTradeHistory) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ExchangeTradeHistory) ReloadG() error {
	if o == nil {
		return errors.New("models: no ExchangeTradeHistory provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExchangeTradeHistory) Reload(exec boil.Executor) error {
	ret, err := FindExchangeTradeHistory(exec, o.ExchangeTradeHistoryID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ExchangeTradeHistorySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ExchangeTradeHistorySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExchangeTradeHistorySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty ExchangeTradeHistorySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExchangeTradeHistorySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	exchangeTradeHistories := ExchangeTradeHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeTradeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"exchange_trade_history\".* FROM \"exchange_trade_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, exchangeTradeHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&exchangeTradeHistories)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExchangeTradeHistorySlice")
	}

	*o = exchangeTradeHistories

	return nil
}

// ExchangeTradeHistoryExists checks if the ExchangeTradeHistory row exists.
func ExchangeTradeHistoryExists(exec boil.Executor, exchangeTradeHistoryID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"exchange_trade_history\" where \"exchange_trade_history_id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, exchangeTradeHistoryID)
	}

	row := exec.QueryRow(sql, exchangeTradeHistoryID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if exchange_trade_history exists")
	}

	return exists, nil
}

// ExchangeTradeHistoryExistsG checks if the ExchangeTradeHistory row exists.
func ExchangeTradeHistoryExistsG(exchangeTradeHistoryID int64) (bool, error) {
	return ExchangeTradeHistoryExists(boil.GetDB(), exchangeTradeHistoryID)
}

// ExchangeTradeHistoryExistsGP checks if the ExchangeTradeHistory row exists. Panics on error.
func ExchangeTradeHistoryExistsGP(exchangeTradeHistoryID int64) bool {
	e, err := ExchangeTradeHistoryExists(boil.GetDB(), exchangeTradeHistoryID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ExchangeTradeHistoryExistsP checks if the ExchangeTradeHistory row exists. Panics on error.
func ExchangeTradeHistoryExistsP(exec boil.Executor, exchangeTradeHistoryID int64) bool {
	e, err := ExchangeTradeHistoryExists(exec, exchangeTradeHistoryID)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
