// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ExchangeTradeHistory is an object representing the database table.
type ExchangeTradeHistory struct {
	ID           int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	FulfilledOn  time.Time `boil:"fulfilled_on" json:"fulfilled_on" toml:"fulfilled_on" yaml:"fulfilled_on"`
	CurrencyPair string    `boil:"currency_pair" json:"currency_pair" toml:"currency_pair" yaml:"currency_pair"`
	AssetType    string    `boil:"asset_type" json:"asset_type" toml:"asset_type" yaml:"asset_type"`
	OrderType    string    `boil:"order_type" json:"order_type" toml:"order_type" yaml:"order_type"`
	ContractType string    `boil:"contract_type" json:"contract_type" toml:"contract_type" yaml:"contract_type"`
	Amount       float64   `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Rate         float64   `boil:"rate" json:"rate" toml:"rate" yaml:"rate"`
	OrderID      int64     `boil:"order_id" json:"order_id" toml:"order_id" yaml:"order_id"`
	ExchangeID   int64     `boil:"exchange_id" json:"exchange_id" toml:"exchange_id" yaml:"exchange_id"`

	R *exchangeTradeHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L exchangeTradeHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExchangeTradeHistoryColumns = struct {
	ID           string
	FulfilledOn  string
	CurrencyPair string
	AssetType    string
	OrderType    string
	ContractType string
	Amount       string
	Rate         string
	OrderID      string
	ExchangeID   string
}{
	ID:           "id",
	FulfilledOn:  "fulfilled_on",
	CurrencyPair: "currency_pair",
	AssetType:    "asset_type",
	OrderType:    "order_type",
	ContractType: "contract_type",
	Amount:       "amount",
	Rate:         "rate",
	OrderID:      "order_id",
	ExchangeID:   "exchange_id",
}

// ExchangeTradeHistoryRels is where relationship names are stored.
var ExchangeTradeHistoryRels = struct {
	Exchange string
}{
	Exchange: "Exchange",
}

// exchangeTradeHistoryR is where relationships are stored.
type exchangeTradeHistoryR struct {
	Exchange *ExchangeConfig
}

// NewStruct creates a new relationship struct
func (*exchangeTradeHistoryR) NewStruct() *exchangeTradeHistoryR {
	return &exchangeTradeHistoryR{}
}

// exchangeTradeHistoryL is where Load methods for each relationship are stored.
type exchangeTradeHistoryL struct{}

var (
	exchangeTradeHistoryColumns               = []string{"id", "fulfilled_on", "currency_pair", "asset_type", "order_type", "contract_type", "amount", "rate", "order_id", "exchange_id"}
	exchangeTradeHistoryColumnsWithoutDefault = []string{}
	exchangeTradeHistoryColumnsWithDefault    = []string{"id", "fulfilled_on", "currency_pair", "asset_type", "order_type", "contract_type", "amount", "rate", "order_id", "exchange_id"}
	exchangeTradeHistoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// ExchangeTradeHistorySlice is an alias for a slice of pointers to ExchangeTradeHistory.
	// This should generally be used opposed to []ExchangeTradeHistory.
	ExchangeTradeHistorySlice []*ExchangeTradeHistory
	// ExchangeTradeHistoryHook is the signature for custom ExchangeTradeHistory hook methods
	ExchangeTradeHistoryHook func(context.Context, boil.ContextExecutor, *ExchangeTradeHistory) error

	exchangeTradeHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	exchangeTradeHistoryType                 = reflect.TypeOf(&ExchangeTradeHistory{})
	exchangeTradeHistoryMapping              = queries.MakeStructMapping(exchangeTradeHistoryType)
	exchangeTradeHistoryPrimaryKeyMapping, _ = queries.BindMapping(exchangeTradeHistoryType, exchangeTradeHistoryMapping, exchangeTradeHistoryPrimaryKeyColumns)
	exchangeTradeHistoryInsertCacheMut       sync.RWMutex
	exchangeTradeHistoryInsertCache          = make(map[string]insertCache)
	exchangeTradeHistoryUpdateCacheMut       sync.RWMutex
	exchangeTradeHistoryUpdateCache          = make(map[string]updateCache)
	exchangeTradeHistoryUpsertCacheMut       sync.RWMutex
	exchangeTradeHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var exchangeTradeHistoryBeforeInsertHooks []ExchangeTradeHistoryHook
var exchangeTradeHistoryBeforeUpdateHooks []ExchangeTradeHistoryHook
var exchangeTradeHistoryBeforeDeleteHooks []ExchangeTradeHistoryHook
var exchangeTradeHistoryBeforeUpsertHooks []ExchangeTradeHistoryHook

var exchangeTradeHistoryAfterInsertHooks []ExchangeTradeHistoryHook
var exchangeTradeHistoryAfterSelectHooks []ExchangeTradeHistoryHook
var exchangeTradeHistoryAfterUpdateHooks []ExchangeTradeHistoryHook
var exchangeTradeHistoryAfterDeleteHooks []ExchangeTradeHistoryHook
var exchangeTradeHistoryAfterUpsertHooks []ExchangeTradeHistoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExchangeTradeHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeTradeHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExchangeTradeHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeTradeHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExchangeTradeHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeTradeHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExchangeTradeHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeTradeHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExchangeTradeHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeTradeHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExchangeTradeHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeTradeHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExchangeTradeHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeTradeHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExchangeTradeHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeTradeHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExchangeTradeHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range exchangeTradeHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExchangeTradeHistoryHook registers your hook function for all future operations.
func AddExchangeTradeHistoryHook(hookPoint boil.HookPoint, exchangeTradeHistoryHook ExchangeTradeHistoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		exchangeTradeHistoryBeforeInsertHooks = append(exchangeTradeHistoryBeforeInsertHooks, exchangeTradeHistoryHook)
	case boil.BeforeUpdateHook:
		exchangeTradeHistoryBeforeUpdateHooks = append(exchangeTradeHistoryBeforeUpdateHooks, exchangeTradeHistoryHook)
	case boil.BeforeDeleteHook:
		exchangeTradeHistoryBeforeDeleteHooks = append(exchangeTradeHistoryBeforeDeleteHooks, exchangeTradeHistoryHook)
	case boil.BeforeUpsertHook:
		exchangeTradeHistoryBeforeUpsertHooks = append(exchangeTradeHistoryBeforeUpsertHooks, exchangeTradeHistoryHook)
	case boil.AfterInsertHook:
		exchangeTradeHistoryAfterInsertHooks = append(exchangeTradeHistoryAfterInsertHooks, exchangeTradeHistoryHook)
	case boil.AfterSelectHook:
		exchangeTradeHistoryAfterSelectHooks = append(exchangeTradeHistoryAfterSelectHooks, exchangeTradeHistoryHook)
	case boil.AfterUpdateHook:
		exchangeTradeHistoryAfterUpdateHooks = append(exchangeTradeHistoryAfterUpdateHooks, exchangeTradeHistoryHook)
	case boil.AfterDeleteHook:
		exchangeTradeHistoryAfterDeleteHooks = append(exchangeTradeHistoryAfterDeleteHooks, exchangeTradeHistoryHook)
	case boil.AfterUpsertHook:
		exchangeTradeHistoryAfterUpsertHooks = append(exchangeTradeHistoryAfterUpsertHooks, exchangeTradeHistoryHook)
	}
}

// One returns a single exchangeTradeHistory record from the query.
func (q exchangeTradeHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExchangeTradeHistory, error) {
	o := &ExchangeTradeHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for exchange_trade_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExchangeTradeHistory records from the query.
func (q exchangeTradeHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExchangeTradeHistorySlice, error) {
	var o []*ExchangeTradeHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ExchangeTradeHistory slice")
	}

	if len(exchangeTradeHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExchangeTradeHistory records in the query.
func (q exchangeTradeHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count exchange_trade_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q exchangeTradeHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if exchange_trade_history exists")
	}

	return count > 0, nil
}

// Exchange pointed to by the foreign key.
func (o *ExchangeTradeHistory) Exchange(mods ...qm.QueryMod) exchangeConfigQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ExchangeID),
	}

	queryMods = append(queryMods, mods...)

	query := ExchangeConfigs(queryMods...)
	queries.SetFrom(query.Query, "\"exchange_config\"")

	return query
}

// LoadExchange allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (exchangeTradeHistoryL) LoadExchange(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExchangeTradeHistory interface{}, mods queries.Applicator) error {
	var slice []*ExchangeTradeHistory
	var object *ExchangeTradeHistory

	if singular {
		object = maybeExchangeTradeHistory.(*ExchangeTradeHistory)
	} else {
		slice = *maybeExchangeTradeHistory.(*[]*ExchangeTradeHistory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &exchangeTradeHistoryR{}
		}
		args = append(args, object.ExchangeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &exchangeTradeHistoryR{}
			}

			for _, a := range args {
				if a == obj.ExchangeID {
					continue Outer
				}
			}

			args = append(args, obj.ExchangeID)
		}
	}

	query := NewQuery(qm.From(`exchange_config`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ExchangeConfig")
	}

	var resultSlice []*ExchangeConfig
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ExchangeConfig")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for exchange_config")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for exchange_config")
	}

	if len(exchangeTradeHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Exchange = foreign
		if foreign.R == nil {
			foreign.R = &exchangeConfigR{}
		}
		foreign.R.ExchangeExchangeTradeHistories = append(foreign.R.ExchangeExchangeTradeHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ExchangeID == foreign.ID {
				local.R.Exchange = foreign
				if foreign.R == nil {
					foreign.R = &exchangeConfigR{}
				}
				foreign.R.ExchangeExchangeTradeHistories = append(foreign.R.ExchangeExchangeTradeHistories, local)
				break
			}
		}
	}

	return nil
}

// SetExchange of the exchangeTradeHistory to the related item.
// Sets o.R.Exchange to related.
// Adds o to related.R.ExchangeExchangeTradeHistories.
func (o *ExchangeTradeHistory) SetExchange(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ExchangeConfig) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"exchange_trade_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"exchange_id"}),
		strmangle.WhereClause("\"", "\"", 0, exchangeTradeHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ExchangeID = related.ID
	if o.R == nil {
		o.R = &exchangeTradeHistoryR{
			Exchange: related,
		}
	} else {
		o.R.Exchange = related
	}

	if related.R == nil {
		related.R = &exchangeConfigR{
			ExchangeExchangeTradeHistories: ExchangeTradeHistorySlice{o},
		}
	} else {
		related.R.ExchangeExchangeTradeHistories = append(related.R.ExchangeExchangeTradeHistories, o)
	}

	return nil
}

// ExchangeTradeHistories retrieves all the records using an executor.
func ExchangeTradeHistories(mods ...qm.QueryMod) exchangeTradeHistoryQuery {
	mods = append(mods, qm.From("\"exchange_trade_history\""))
	return exchangeTradeHistoryQuery{NewQuery(mods...)}
}

// FindExchangeTradeHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExchangeTradeHistory(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ExchangeTradeHistory, error) {
	exchangeTradeHistoryObj := &ExchangeTradeHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"exchange_trade_history\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, exchangeTradeHistoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from exchange_trade_history")
	}

	return exchangeTradeHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExchangeTradeHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no exchange_trade_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(exchangeTradeHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	exchangeTradeHistoryInsertCacheMut.RLock()
	cache, cached := exchangeTradeHistoryInsertCache[key]
	exchangeTradeHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			exchangeTradeHistoryColumns,
			exchangeTradeHistoryColumnsWithDefault,
			exchangeTradeHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(exchangeTradeHistoryType, exchangeTradeHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(exchangeTradeHistoryType, exchangeTradeHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"exchange_trade_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"exchange_trade_history\" () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT \"%s\" FROM \"exchange_trade_history\" WHERE %s", strings.Join(returnColumns, "\",\""), strmangle.WhereClause("\"", "\"", 0, exchangeTradeHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into exchange_trade_history")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == exchangeTradeHistoryMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for exchange_trade_history")
	}

CacheNoHooks:
	if !cached {
		exchangeTradeHistoryInsertCacheMut.Lock()
		exchangeTradeHistoryInsertCache[key] = cache
		exchangeTradeHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExchangeTradeHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExchangeTradeHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	exchangeTradeHistoryUpdateCacheMut.RLock()
	cache, cached := exchangeTradeHistoryUpdateCache[key]
	exchangeTradeHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			exchangeTradeHistoryColumns,
			exchangeTradeHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update exchange_trade_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"exchange_trade_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, exchangeTradeHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(exchangeTradeHistoryType, exchangeTradeHistoryMapping, append(wl, exchangeTradeHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update exchange_trade_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for exchange_trade_history")
	}

	if !cached {
		exchangeTradeHistoryUpdateCacheMut.Lock()
		exchangeTradeHistoryUpdateCache[key] = cache
		exchangeTradeHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q exchangeTradeHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for exchange_trade_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for exchange_trade_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExchangeTradeHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeTradeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"exchange_trade_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exchangeTradeHistoryPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in exchangeTradeHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all exchangeTradeHistory")
	}
	return rowsAff, nil
}

// Delete deletes a single ExchangeTradeHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExchangeTradeHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExchangeTradeHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), exchangeTradeHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"exchange_trade_history\" WHERE \"id\"=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from exchange_trade_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for exchange_trade_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q exchangeTradeHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no exchangeTradeHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exchange_trade_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exchange_trade_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExchangeTradeHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ExchangeTradeHistory slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(exchangeTradeHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeTradeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"exchange_trade_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exchangeTradeHistoryPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from exchangeTradeHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for exchange_trade_history")
	}

	if len(exchangeTradeHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExchangeTradeHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExchangeTradeHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExchangeTradeHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExchangeTradeHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), exchangeTradeHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"exchange_trade_history\".* FROM \"exchange_trade_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, exchangeTradeHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ExchangeTradeHistorySlice")
	}

	*o = slice

	return nil
}

// ExchangeTradeHistoryExists checks if the ExchangeTradeHistory row exists.
func ExchangeTradeHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"exchange_trade_history\" where \"id\"=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if exchange_trade_history exists")
	}

	return exists, nil
}
